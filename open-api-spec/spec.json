{
    "openapi": "3.0.1",
    "info": {
      "description": "Orkes Conductor API Server",
      "title": "Orkes Conductor API Server",
      "version": "v2"
    },
    "servers": [
      {
        "url": "https://sdkdev.orkesconductor.io",
        "description": "Generated server url"
      }
    ],
    "security": [
      {
        "api_key": []
      }
    ],
    "paths": {
      "/api/admin/cache/clear/{taskDefName}": {
        "post": {
          "operationId": "clearTaskExecutionCache",
          "parameters": [
            {
              "in": "path",
              "name": "taskDefName",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Remove execution cached values for the task",
          "tags": [
            "admin-resource"
          ]
        }
      },
      "/api/admin/consistency/verifyAndRepair/{workflowId}": {
        "post": {
          "operationId": "verifyAndRepairWorkflowConsistency",
          "parameters": [
            {
              "in": "path",
              "name": "workflowId",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "text/plain": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Verify and repair workflow consistency",
          "tags": [
            "admin-resource"
          ]
        }
      },
      "/api/admin/redisUsage": {
        "get": {
          "operationId": "getRedisUsage",
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "type": "object",
              "additionalProperties": {}
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get details of redis usage",
          "tags": [
            "admin-resource"
          ]
        }
      },
      "/api/admin/sweep/requeue/{workflowId}": {
        "post": {
          "operationId": "requeueSweep",
          "parameters": [
            {
              "in": "path",
              "name": "workflowId",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "text/plain": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Queue up all the running workflows for sweep",
          "tags": [
            "admin-resource"
          ]
        }
      },
      "/api/admin/task/{tasktype}": {
        "get": {
          "operationId": "view",
          "parameters": [
            {
              "in": "path",
              "name": "tasktype",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "start",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 0
              }
            },
            {
              "in": "query",
              "name": "count",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 100
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Task"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get the list of pending tasks for a given task type",
          "tags": [
            "admin-resource"
          ]
        }
      },
      "/api/applications": {
        "get": {
          "operationId": "listApplications",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ExtendedConductorApplication"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get all applications",
          "tags": [
            "application-resource"
          ]
        },
        "post": {
          "operationId": "createApplication",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrUpdateApplicationRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Create an application",
          "tags": [
            "application-resource"
          ]
        }
      },
      "/api/applications/key/{accessKeyId}": {
        "get": {
          "operationId": "getAppByAccessKeyId",
          "parameters": [
            {
              "in": "path",
              "name": "accessKeyId",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get application id by access key id",
          "tags": [
            "application-resource"
          ]
        }
      },
      "/api/applications/{applicationId}/accessKeys/{keyId}": {
        "delete": {
          "operationId": "deleteAccessKey",
          "parameters": [
            {
              "in": "path",
              "name": "applicationId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "keyId",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Delete an access key",
          "tags": [
            "application-resource"
          ]
        }
      },
      "/api/applications/{applicationId}/accessKeys/{keyId}/status": {
        "post": {
          "operationId": "toggleAccessKeyStatus",
          "parameters": [
            {
              "in": "path",
              "name": "applicationId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "keyId",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Toggle the status of an access key",
          "tags": [
            "application-resource"
          ]
        }
      },
      "/api/applications/{applicationId}/roles/{role}": {
        "delete": {
          "operationId": "removeRoleFromApplicationUser",
          "parameters": [
            {
              "in": "path",
              "name": "applicationId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "role",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            }
          },
          "tags": [
            "application-resource"
          ]
        },
        "post": {
          "operationId": "addRoleToApplicationUser",
          "parameters": [
            {
              "in": "path",
              "name": "applicationId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "role",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            }
          },
          "tags": [
            "application-resource"
          ]
        }
      },
      "/api/applications/{id}": {
        "delete": {
          "operationId": "deleteApplication",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Delete an application",
          "tags": [
            "application-resource"
          ]
        },
        "get": {
          "operationId": "getApplication",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get an application by id",
          "tags": [
            "application-resource"
          ]
        },
        "put": {
          "operationId": "updateApplication",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrUpdateApplicationRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Update an application",
          "tags": [
            "application-resource"
          ]
        }
      },
      "/api/applications/{id}/accessKeys": {
        "get": {
          "operationId": "getAccessKeys",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get application's access keys",
          "tags": [
            "application-resource"
          ]
        },
        "post": {
          "operationId": "createAccessKey",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Create an access key for an application",
          "tags": [
            "application-resource"
          ]
        }
      },
      "/api/applications/{id}/tags": {
        "delete": {
          "operationId": "deleteTagForApplication",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Delete a tag for application",
          "tags": [
            "application-resource"
          ]
        },
        "get": {
          "operationId": "getTagsForApplication",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Tag"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get tags by application",
          "tags": [
            "application-resource"
          ]
        },
        "put": {
          "operationId": "putTagForApplication",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Put a tag to application",
          "tags": [
            "application-resource"
          ]
        }
      },
      "/api/auth/authorization": {
        "delete": {
          "operationId": "removePermissions",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Response"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Remove user's access over the target",
          "tags": [
            "authorization-resource"
          ]
        },
        "post": {
          "operationId": "grantPermissions",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Response"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Grant access to a user over the target",
          "tags": [
            "authorization-resource"
          ]
        }
      },
      "/api/auth/authorization/{type}/{id}": {
        "get": {
          "operationId": "getPermissions",
          "parameters": [
            {
              "in": "path",
              "name": "type",
              "required": true,
              "schema": {
                "type": "string",
                "enum": [
                  "WORKFLOW",
                  "WORKFLOW_DEF",
                  "WORKFLOW_SCHEDULE",
                  "EVENT_HANDLER",
                  "TASK_DEF",
                  "TASK_REF_NAME",
                  "TASK_ID",
                  "APPLICATION",
                  "USER",
                  "SECRET_NAME",
                  "ENV_VARIABLE",
                  "TAG",
                  "DOMAIN",
                  "INTEGRATION_PROVIDER",
                  "INTEGRATION",
                  "PROMPT",
                  "USER_FORM_TEMPLATE",
                  "SCHEMA",
                  "CLUSTER_CONFIG",
                  "WEBHOOK"
                ]
              }
            },
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get the access that have been granted over the given object",
          "tags": [
            "authorization-resource"
          ]
        }
      },
      "/api/environment": {
        "get": {
          "operationId": "getAll",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/EnvironmentVariable"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "List all the environment variables",
          "tags": [
            "environment-resource"
          ]
        }
      },
      "/api/environment/{key}": {
        "delete": {
          "operationId": "deleteEnvVariable",
          "parameters": [
            {
              "in": "path",
              "name": "key",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "text/plain": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Delete an environment variable (requires metadata or admin role)",
          "tags": [
            "environment-resource"
          ]
        },
        "get": {
          "operationId": "get_3",
          "parameters": [
            {
              "in": "path",
              "name": "key",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "text/plain": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get the environment value by key",
          "tags": [
            "environment-resource"
          ]
        },
        "put": {
          "operationId": "createOrUpdateEnvVariable",
          "parameters": [
            {
              "in": "path",
              "name": "key",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "text/plain": {
                "schema": {
                  "maxLength": 65535,
                  "minLength": 0,
                  "type": "string"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Create or update an environment variable (requires metadata or admin role)",
          "tags": [
            "environment-resource"
          ]
        }
      },
      "/api/environment/{name}/tags": {
        "delete": {
          "operationId": "deleteTagForEnvVar",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Delete a tag for environment variable name",
          "tags": [
            "environment-resource"
          ]
        },
        "get": {
          "operationId": "getTagsForEnvVar",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Tag"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get tags by environment variable name",
          "tags": [
            "environment-resource"
          ]
        },
        "put": {
          "operationId": "putTagForEnvVar",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Put a tag to environment variable name",
          "tags": [
            "environment-resource"
          ]
        }
      },
      "/api/event": {
        "get": {
          "operationId": "getEventHandlers",
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/EventHandler"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get all the event handlers",
          "tags": [
            "event-resource"
          ]
        },
        "post": {
          "operationId": "addEventHandler",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventHandler"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Add a new event handler.",
          "tags": [
            "event-resource"
          ]
        },
        "put": {
          "operationId": "updateEventHandler",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventHandler"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Update an existing event handler.",
          "tags": [
            "event-resource"
          ]
        }
      },
      "/api/event/execution": {
        "get": {
          "operationId": "getEventHandlersForEvent_1",
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/SearchResultHandledEventResponse"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get All active Event Handlers",
          "tags": [
            "event-execution-resource"
          ]
        }
      },
      "/api/event/execution/{eventHandlerName}": {
        "get": {
          "operationId": "getEventHandlersForEvent_2",
          "parameters": [
            {
              "in": "path",
              "name": "eventHandlerName",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "from",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ExtendedEventExecution"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get event handlers for a given event",
          "tags": [
            "event-execution-resource"
          ]
        }
      },
      "/api/event/handleIncomingEvent": {
        "post": {
          "operationId": "handleIncomingEvent",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
              "additionalProperties": {}
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Handle an incoming event",
          "tags": [
            "event-resource"
          ]
        }
      },
      "/api/event/handler/": {
        "get": {
          "operationId": "test",
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/EventHandler"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get event handler by name",
          "tags": [
            "event-resource"
          ]
        }
      },
      "/api/event/handler/{name}": {
        "get": {
          "operationId": "getEventHandlerByName",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/EventHandler"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get event handler by name",
          "tags": [
            "event-resource"
          ]
        }
      },
      "/api/event/message": {
        "get": {
          "operationId": "getEvents",
          "parameters": [
            {
              "in": "query",
              "name": "from",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/SearchResultHandledEventResponse"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get all event handlers with statistics",
          "tags": [
            "event-message-resource"
          ]
        }
      },
      "/api/event/message/{event}": {
        "get": {
          "operationId": "getMessages",
          "parameters": [
            {
              "in": "path",
              "name": "event",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "from",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/EventMessage"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get event messages for a given event",
          "tags": [
            "event-message-resource"
          ]
        }
      },
      "/api/event/queue/config": {
        "get": {
          "operationId": "getQueueNames",
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get all queue configs",
          "tags": [
            "event-resource"
          ]
        }
      },
      "/api/event/queue/config/{queueType}/{queueName}": {
        "delete": {
          "operationId": "deleteQueueConfig",
          "parameters": [
            {
              "in": "path",
              "name": "queueType",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "queueName",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Delete queue config by name",
          "tags": [
            "event-resource"
          ]
        },
        "get": {
          "operationId": "getQueueConfig",
          "parameters": [
            {
              "in": "path",
              "name": "queueType",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "queueName",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "type": "object",
              "additionalProperties": {}
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get queue config by name",
          "tags": [
            "event-resource"
          ]
        },
        "put": {
          "deprecated": true,
          "operationId": "putQueueConfig",
          "parameters": [
            {
              "in": "path",
              "name": "queueType",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "queueName",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Create or update queue config by name",
          "tags": [
            "event-resource"
          ]
        }
      },
      "/api/event/queue/connectivity": {
        "post": {
          "operationId": "testConnectivity",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectivityTestInput"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ConnectivityTestResult"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Test connectivity for a given queue using a workflow with EVENT task and an EventHandler",
          "tags": [
            "event-resource"
          ]
        }
      },
      "/api/event/{event}": {
        "get": {
          "operationId": "getEventHandlersForEvent",
          "parameters": [
            {
              "in": "path",
              "name": "event",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "activeOnly",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": true
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/EventHandler"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get event handlers for a given event",
          "tags": [
            "event-resource"
          ]
        }
      },
      "/api/event/{name}": {
        "delete": {
          "operationId": "removeEventHandlerStatus",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Remove an event handler",
          "tags": [
            "event-resource"
          ]
        }
      },
      "/api/event/{name}/tags": {
        "delete": {
          "operationId": "deleteTagForEventHandler",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Delete a tag for event handler",
          "tags": [
            "event-resource"
          ]
        },
        "get": {
          "operationId": "getTagsForEventHandler",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Tag"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get tags by event handler",
          "tags": [
            "event-resource"
          ]
        },
        "put": {
          "operationId": "putTagForEventHandler",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Put a tag to event handler",
          "tags": [
            "event-resource"
          ]
        }
      },
      "/api/global_schema": {
        "post": {
          "operationId": "save_1",
          "parameters": [
            {
              "in": "query",
              "name": "newVersion",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SchemaDef"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Save schema",
          "tags": [
            "global-schema-resource"
          ]
        }
      },
      "/api/global_schema/{name}": {
        "get": {
          "operationId": "getSchemaByNameWithLatestVersion_1",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SchemaDef"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get schema by name with latest version",
          "tags": [
            "global-schema-resource"
          ]
        }
      },
      "/api/groups": {
        "get": {
          "operationId": "listGroups",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Group"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get all groups",
          "tags": [
            "group-resource"
          ]
        }
      },
      "/api/groups/{groupId}/permissions": {
        "get": {
          "operationId": "getGrantedPermissions_1",
          "parameters": [
            {
              "in": "path",
              "name": "groupId",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GrantedAccessResponse"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get the permissions this group has over workflows and tasks",
          "tags": [
            "group-resource"
          ]
        }
      },
      "/api/groups/{groupId}/users": {
        "delete": {
          "operationId": "removeUsersFromGroup",
          "parameters": [
            {
              "in": "path",
              "name": "groupId",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Remove users from group",
          "tags": [
            "group-resource"
          ]
        },
        "post": {
          "operationId": "addUsersToGroup",
          "parameters": [
            {
              "in": "path",
              "name": "groupId",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Add users to group",
          "tags": [
            "group-resource"
          ]
        }
      },
      "/api/groups/{groupId}/users/{userId}": {
        "delete": {
          "operationId": "removeUserFromGroup",
          "parameters": [
            {
              "in": "path",
              "name": "groupId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "userId",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Remove user from group",
          "tags": [
            "group-resource"
          ]
        },
        "post": {
          "operationId": "addUserToGroup",
          "parameters": [
            {
              "in": "path",
              "name": "groupId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "userId",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Add user to group",
          "tags": [
            "group-resource"
          ]
        }
      },
      "/api/groups/{id}": {
        "delete": {
          "operationId": "deleteGroup",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Response"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Delete a group",
          "tags": [
            "group-resource"
          ]
        },
        "get": {
          "operationId": "getGroup",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get a group by id",
          "tags": [
            "group-resource"
          ]
        },
        "put": {
          "operationId": "upsertGroup",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertGroupRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Create or update a group",
          "tags": [
            "group-resource"
          ]
        }
      },
      "/api/groups/{id}/users": {
        "get": {
          "operationId": "getUsersInGroup",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get all users in group",
          "tags": [
            "group-resource"
          ]
        }
      },
      "/api/human/tasks/backPopulateFullTextIndex": {
        "get": {
          "operationId": "backPopulateFullTextIndex",
          "parameters": [
            {
              "in": "query",
              "name": "100",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
              "additionalProperties": {}
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "API for backpopulating index data",
          "tags": [
            "human-task"
          ]
        }
      },
      "/api/human/tasks/delete": {
        "delete": {
          "operationId": "deleteTaskFromHumanTaskRecords",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "If the workflow is disconnected from tasks, this API can be used to clean up (in bulk)",
          "tags": [
            "human-task"
          ]
        }
      },
      "/api/human/tasks/delete/{taskId}": {
        "delete": {
          "operationId": "deleteTaskFromHumanTaskRecords_1",
          "parameters": [
            {
              "in": "path",
              "name": "taskId",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "If the workflow is disconnected from tasks, this API can be used to clean up",
          "tags": [
            "human-task"
          ]
        }
      },
      "/api/human/tasks/getTaskDisplayNames": {
        "get": {
          "operationId": "getTaskDisplayNames",
          "parameters": [
            {
              "in": "query",
              "name": "searchType",
              "required": true,
              "schema": {
                "type": "string",
                "enum": [
                  "ADMIN",
                  "INBOX"
                ]
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get list of task display names applicable for the user",
          "tags": [
            "human-task"
          ]
        }
      },
      "/api/human/tasks/search": {
        "post": {
          "operationId": "search",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanTaskSearch"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HumanTaskSearchResult"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Search human tasks",
          "tags": [
            "human-task"
          ]
        }
      },
      "/api/human/tasks/update/taskRef": {
        "post": {
          "operationId": "updateTaskOutputByRef",
          "parameters": [
            {
              "in": "query",
              "name": "workflowId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "taskRefName",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "complete",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false
              }
            },
            {
              "description": "Populate this value if your task is in a loop and you want to update a specific iteration. If its not in a loop OR if you want to just update the latest iteration, leave this as empty",
              "in": "query",
              "name": "iteration",
              "required": false,
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
              "additionalProperties": {}
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Update task output, optionally complete",
          "tags": [
            "human-task"
          ]
        }
      },
      "/api/human/tasks/{taskId}": {
        "get": {
          "operationId": "getTask_1",
          "parameters": [
            {
              "in": "path",
              "name": "taskId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "withTemplate",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HumanTaskEntry"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get a task",
          "tags": [
            "human-task"
          ]
        }
      },
      "/api/human/tasks/{taskId}/claim": {
        "post": {
          "operationId": "claimTask",
          "parameters": [
            {
              "in": "path",
              "name": "taskId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "overrideAssignment",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false
              }
            },
            {
              "in": "query",
              "name": "withTemplate",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HumanTaskEntry"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Claim a task by authenticated Conductor user",
          "tags": [
            "human-task"
          ]
        }
      },
      "/api/human/tasks/{taskId}/conductorTask": {
        "get": {
          "operationId": "getConductorTaskById",
          "parameters": [
            {
              "in": "path",
              "name": "taskId",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get Conductor task by id (for human tasks only)",
          "tags": [
            "human-task-resource"
          ]
        }
      },
      "/api/human/tasks/{taskId}/externalUser/{userId}": {
        "post": {
          "operationId": "assignAndClaim",
          "parameters": [
            {
              "in": "path",
              "name": "taskId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "userId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "overrideAssignment",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false
              }
            },
            {
              "in": "query",
              "name": "withTemplate",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HumanTaskEntry"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Claim a task to an external user",
          "tags": [
            "human-task"
          ]
        }
      },
      "/api/human/tasks/{taskId}/reassign": {
        "post": {
          "operationId": "reassignTask",
          "parameters": [
            {
              "in": "path",
              "name": "taskId",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HumanTaskAssignment"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Reassign a task without completing it",
          "tags": [
            "human-task"
          ]
        }
      },
      "/api/human/tasks/{taskId}/release": {
        "post": {
          "operationId": "releaseTask",
          "parameters": [
            {
              "in": "path",
              "name": "taskId",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Release a task without completing it",
          "tags": [
            "human-task"
          ]
        }
      },
      "/api/human/tasks/{taskId}/skip": {
        "post": {
          "operationId": "skipTask",
          "parameters": [
            {
              "in": "path",
              "name": "taskId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "reason",
              "required": false,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "If a task is assigned to a user, this API can be used to skip that assignment and move to the next assignee",
          "tags": [
            "human-task"
          ]
        }
      },
      "/api/human/tasks/{taskId}/update": {
        "post": {
          "operationId": "updateTaskOutput",
          "parameters": [
            {
              "in": "path",
              "name": "taskId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "complete",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
              "additionalProperties": {}
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Update task output, optionally complete",
          "tags": [
            "human-task"
          ]
        }
      },
      "/api/human/template": {
        "get": {
          "operationId": "getAllTemplates",
          "parameters": [
            {
              "in": "query",
              "name": "name",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "version",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/HumanTaskTemplate"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "List all user form templates or get templates by name, or a template by name and version",
          "tags": [
            "user-form",
            "human-task"
          ]
        },
        "post": {
          "operationId": "saveTemplate",
          "parameters": [
            {
              "in": "query",
              "name": "newVersion",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanTaskTemplate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HumanTaskTemplate"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Save user form template",
          "tags": [
            "user-form",
            "human-task"
          ]
        }
      },
      "/api/human/template/bulk": {
        "post": {
          "operationId": "saveTemplates",
          "parameters": [
            {
              "in": "query",
              "name": "newVersion",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HumanTaskTemplate"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/HumanTaskTemplate"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Save user form template",
          "tags": [
            "user-form",
            "human-task"
          ]
        }
      },
      "/api/human/template/{humanTaskId}": {
        "get": {
          "operationId": "getTemplateByTaskId",
          "parameters": [
            {
              "in": "path",
              "name": "humanTaskId",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HumanTaskTemplate"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get user form by human task id",
          "tags": [
            "user-form",
            "human-task"
          ]
        }
      },
      "/api/human/template/{name}": {
        "delete": {
          "operationId": "deleteTemplateByName",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Delete all versions of user form template by name",
          "tags": [
            "user-form",
            "human-task"
          ]
        }
      },
      "/api/human/template/{name}/tags": {
        "delete": {
          "operationId": "deleteTagForUserFormTemplate",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Delete a tag for template name",
          "tags": [
            "user-form-template-resource"
          ]
        },
        "get": {
          "operationId": "getTagsForUserFormTemplate",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Tag"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get tags by template name",
          "tags": [
            "user-form-template-resource"
          ]
        },
        "put": {
          "operationId": "putTagForUserFormTemplate",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Put a tag to template name",
          "tags": [
            "user-form-template-resource"
          ]
        }
      },
      "/api/human/template/{name}/{version}": {
        "delete": {
          "operationId": "deleteTemplatesByNameAndVersion",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Delete a version of form template by name",
          "tags": [
            "human-task"
          ]
        },
        "get": {
          "operationId": "getTemplateByNameAndVersion",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HumanTaskTemplate"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get user form template by name and version",
          "tags": [
            "user-form",
            "human-task"
          ]
        }
      },
      "/api/integrations/": {
        "get": {
          "operationId": "getAllIntegrations",
          "parameters": [
            {
              "in": "query",
              "name": "category",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "activeOnly",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": true
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Integration"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get all Integrations",
          "tags": [
            "integration-resource"
          ]
        },
        "post": {
          "operationId": "saveAllIntegrations",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Integration"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Save all Integrations",
          "tags": [
            "integration-resource"
          ]
        }
      },
      "/api/integrations/all": {
        "get": {
          "operationId": "getProvidersAndIntegrations",
          "parameters": [
            {
              "in": "query",
              "name": "type",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "activeOnly",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": true
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get Integrations Providers and Integrations combo",
          "tags": [
            "integration-resource"
          ]
        }
      },
      "/api/integrations/def": {
        "get": {
          "operationId": "getIntegrationProviderDefs",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/IntegrationDef"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get Integration provider definitions",
          "tags": [
            "integration-resource"
          ]
        }
      },
      "/api/integrations/def/register": {
        "post": {
          "operationId": "registerIntegration",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IntegrationDef"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "upsert an integration definition",
          "tags": [
            "integration-resource"
          ]
        }
      },
      "/api/integrations/def/{name}": {
        "get": {
          "operationId": "getIntegrationDef",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/IntegrationDef"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get an integration definition",
          "tags": [
            "integration-resource"
          ]
        }
      },
      "/api/integrations/eventStats/{type}": {
        "post": {
          "operationId": "recordEventStats",
          "parameters": [
            {
              "in": "query",
              "name": "type",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventLog"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Record Event Stats",
          "tags": [
            "integration-resource"
          ]
        }
      },
      "/api/integrations/llm/{name}/token": {
        "get": {
          "operationId": "getTokenLimit",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TokenLimit"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get the Token Limit for an integration",
          "tags": [
            "LLM"
          ]
        },
        "post": {
          "operationId": "updateTokenLimit",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenLimit"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Register Token Limit for an integration",
          "tags": [
            "LLM"
          ]
        }
      },
      "/api/integrations/llm/{name}/token/history": {
        "get": {
          "operationId": "getTokenUsage",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "model",
              "required": false,
              "schema": {
                "type": "string",
                "default": "*"
              }
            },
            {
              "in": "query",
              "name": "lookUpWindow",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 31
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TokenUsageLog"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get Token Usage by Integration provider",
          "tags": [
            "LLM"
          ]
        }
      },
      "/api/integrations/provider": {
        "get": {
          "operationId": "getIntegrationProviders",
          "parameters": [
            {
              "in": "query",
              "name": "category",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "activeOnly",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": true
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Integration"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get all Integrations Providers",
          "tags": [
            "integration-resource"
          ]
        }
      },
      "/api/integrations/provider/{integration_provider}/integration/{integration_name}/prompt": {
        "get": {
          "operationId": "getPromptsWithIntegration",
          "parameters": [
            {
              "in": "path",
              "name": "integration_provider",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "integration_name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/MessageTemplate"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get the list of prompt templates associated with an integration",
          "tags": [
            "integration-resource"
          ]
        }
      },
      "/api/integrations/provider/{integration_provider}/integration/{integration_name}/prompt/{prompt_name}": {
        "post": {
          "operationId": "associatePromptWithIntegration",
          "parameters": [
            {
              "in": "path",
              "name": "integration_provider",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "integration_name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "prompt_name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Associate a Prompt Template with an Integration",
          "tags": [
            "integration-resource"
          ]
        }
      },
      "/api/integrations/provider/{name}": {
        "delete": {
          "operationId": "deleteIntegrationProvider",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Delete an Integration Provider",
          "tags": [
            "integration-resource"
          ]
        },
        "get": {
          "operationId": "getIntegrationProvider",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Integration"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get Integration provider",
          "tags": [
            "integration-resource"
          ]
        },
        "post": {
          "operationId": "saveIntegrationProvider",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Create or Update Integration provider",
          "tags": [
            "integration-resource"
          ]
        }
      },
      "/api/integrations/provider/{name}/integration": {
        "get": {
          "operationId": "getIntegrationApis",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "activeOnly",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": true
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/IntegrationApi"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get Integrations of an Integration Provider",
          "tags": [
            "integration-resource"
          ]
        }
      },
      "/api/integrations/provider/{name}/integration/all": {
        "get": {
          "operationId": "getIntegrationAvailableApis",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get Integrations Available for an Integration Provider",
          "tags": [
            "integration-resource"
          ]
        }
      },
      "/api/integrations/provider/{name}/integration/{integration_name}": {
        "delete": {
          "operationId": "deleteIntegrationApi",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "integration_name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Delete an Integration",
          "tags": [
            "integration-resource"
          ]
        },
        "get": {
          "operationId": "getIntegrationApi",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "integration_name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/IntegrationApi"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get Integration details",
          "tags": [
            "integration-resource"
          ]
        },
        "post": {
          "operationId": "saveIntegrationApi",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "integration_name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationApiUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Create or Update Integration",
          "tags": [
            "integration-resource"
          ]
        }
      },
      "/api/integrations/provider/{name}/integration/{integration_name}/tags": {
        "delete": {
          "operationId": "deleteTagForIntegration",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "integration_name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Delete a tag for Integration",
          "tags": [
            "integration-resource"
          ]
        },
        "get": {
          "operationId": "getTagsForIntegration",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "integration_name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Tag"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get tags by Integration",
          "tags": [
            "integration-resource"
          ]
        },
        "put": {
          "operationId": "putTagForIntegration",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "integration_name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Put a tag to Integration",
          "tags": [
            "integration-resource"
          ]
        }
      },
      "/api/integrations/provider/{name}/tags": {
        "delete": {
          "operationId": "deleteTagForIntegrationProvider",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Delete a tag for Integration Provider",
          "tags": [
            "integration-resource"
          ]
        },
        "get": {
          "operationId": "getTagsForIntegrationProvider",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Tag"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get tags by Integration Provider",
          "tags": [
            "integration-resource"
          ]
        },
        "put": {
          "operationId": "putTagForIntegrationProvider",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Put a tag to Integration Provider",
          "tags": [
            "integration-resource"
          ]
        }
      },
      "/api/limits": {
        "get": {
          "operationId": "get_2",
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "type": "object",
              "additionalProperties": {}
                  }
                }
              },
              "description": "OK"
            }
          },
          "tags": [
            "limits-resource"
          ]
        }
      },
      "/api/metadata/tags": {
        "get": {
          "operationId": "getTags_1",
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "uniqueItems": true,
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Tag"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "List all tags",
          "tags": [
            "tags"
          ]
        }
      },
      "/api/metadata/task/{taskName}/tags": {
        "delete": {
          "operationId": "deleteTaskTag",
          "parameters": [
            {
              "in": "path",
              "name": "taskName",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Removes the tag of the task",
          "tags": [
            "tags"
          ]
        },
        "get": {
          "operationId": "getTaskTags",
          "parameters": [
            {
              "in": "path",
              "name": "taskName",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Tag"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Returns all the tags of the task",
          "tags": [
            "tags"
          ]
        },
        "post": {
          "operationId": "addTaskTag",
          "parameters": [
            {
              "in": "path",
              "name": "taskName",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Adds the tag to the task",
          "tags": [
            "tags"
          ]
        },
        "put": {
          "operationId": "setTaskTags",
          "parameters": [
            {
              "in": "path",
              "name": "taskName",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Sets (replaces existing) the tags to the task",
          "tags": [
            "tags"
          ]
        }
      },
      "/api/metadata/taskdefs": {
        "get": {
          "operationId": "getTaskDefs",
          "parameters": [
            {
              "in": "query",
              "name": "access",
              "required": false,
              "schema": {
                "type": "string",
                "default": "READ"
              }
            },
            {
              "in": "query",
              "name": "metadata",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false
              }
            },
            {
              "in": "query",
              "name": "tagKey",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "tagValue",
              "required": false,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TaskDef"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Gets all task definition",
          "tags": [
            "metadata-resource"
          ]
        },
        "post": {
          "operationId": "registerTaskDef",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedTaskDef"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Create or update task definition(s)",
          "tags": [
            "metadata-resource"
          ]
        },
        "put": {
          "operationId": "updateTaskDef",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedTaskDef"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Update an existing task",
          "tags": [
            "metadata-resource"
          ]
        }
      },
      "/api/metadata/taskdefs/{tasktype}": {
        "delete": {
          "operationId": "unregisterTaskDef",
          "parameters": [
            {
              "in": "path",
              "name": "tasktype",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Remove a task definition",
          "tags": [
            "metadata-resource"
          ]
        },
        "get": {
          "operationId": "getTaskDef",
          "parameters": [
            {
              "in": "path",
              "name": "tasktype",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "metadata",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Gets the task definition",
          "tags": [
            "metadata-resource"
          ]
        }
      },
      "/api/metadata/webhook": {
        "get": {
          "operationId": "getAllWebhook",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/WebhookConfig"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "tags": [
            "webhooks-config-resource"
          ]
        },
        "post": {
          "operationId": "createWebhook",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookConfig"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WebhookConfig"
                  }
                }
              },
              "description": "OK"
            }
          },
          "tags": [
            "webhooks-config-resource"
          ]
        }
      },
      "/api/metadata/webhook/{id}": {
        "delete": {
          "operationId": "deleteWebhook",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "tags": [
            "webhooks-config-resource"
          ]
        },
        "get": {
          "operationId": "getWebhook",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WebhookConfig"
                  }
                }
              },
              "description": "OK"
            }
          },
          "tags": [
            "webhooks-config-resource"
          ]
        },
        "put": {
          "operationId": "updateWebhook",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookConfig"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WebhookConfig"
                  }
                }
              },
              "description": "OK"
            }
          },
          "tags": [
            "webhooks-config-resource"
          ]
        }
      },
      "/api/metadata/webhook/{id}/tags": {
        "delete": {
          "operationId": "deleteTagForWebhook",
          "parameters": [],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Delete a tag for webhook id",
          "tags": [
            "webhooks-config-resource"
          ]
        },
        "get": {
          "operationId": "getTagsForWebhook",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Tag"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get tags by webhook id",
          "tags": [
            "webhooks-config-resource"
          ]
        },
        "put": {
          "operationId": "putTagForWebhook",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Put a tag to webhook id",
          "tags": [
            "webhooks-config-resource"
          ]
        }
      },
      "/api/metadata/workflow": {
        "get": {
          "operationId": "getWorkflowDefs",
          "parameters": [
            {
              "in": "query",
              "name": "access",
              "required": false,
              "schema": {
                "type": "string",
                "default": "READ"
              }
            },
            {
              "in": "query",
              "name": "metadata",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false
              }
            },
            {
              "in": "query",
              "name": "tagKey",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "tagValue",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "name",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "short",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/WorkflowDef"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Retrieves all workflow definition along with blueprint",
          "tags": [
            "metadata-resource"
          ]
        },
        "post": {
          "operationId": "create",
          "parameters": [
            {
              "in": "query",
              "name": "overwrite",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false
              }
            },
            {
              "in": "query",
              "name": "newVersion",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedWorkflowDef"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Create a new workflow definition",
          "tags": [
            "metadata-resource"
          ]
        },
        "put": {
          "operationId": "update",
          "parameters": [
            {
              "in": "query",
              "name": "overwrite",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": true
              }
            },
            {
              "in": "query",
              "name": "newVersion",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedWorkflowDef"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Create or update workflow definition(s)",
          "tags": [
            "metadata-resource"
          ]
        }
      },
      "/api/metadata/workflow-importer/import-bpm": {
        "post": {
          "operationId": "uploadBpmnFile",
          "parameters": [
            {
              "in": "query",
              "name": "overwrite",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": true
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncomingBpmnFile"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ExtendedWorkflowDef"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Imports bpmn workflow",
          "tags": [
            "metadata-resource"
          ]
        }
      },
      "/api/metadata/workflow-task-defs/upload": {
        "post": {
          "operationId": "uploadWorkflowsAndTasksDefinitionsToS3",
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Upload all workflows and tasks definitions to Object storage if configured",
          "tags": [
            "metadata-resource"
          ]
        }
      },
      "/api/metadata/workflow/{name}": {
        "get": {
          "operationId": "get_1",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "version",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "in": "query",
              "name": "metadata",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/WorkflowDef"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Retrieves workflow definition along with blueprint",
          "tags": [
            "metadata-resource"
          ]
        }
      },
      "/api/metadata/workflow/{name}/tags": {
        "delete": {
          "operationId": "deleteWorkflowTag",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Removes the tag of the workflow",
          "tags": [
            "tags"
          ]
        },
        "get": {
          "operationId": "getWorkflowTags",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Tag"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Returns all the tags of the workflow",
          "tags": [
            "tags"
          ]
        },
        "post": {
          "operationId": "addWorkflowTag",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Adds the tag to the workflow",
          "tags": [
            "tags"
          ]
        },
        "put": {
          "operationId": "setWorkflowTags",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Set (replaces all existing) the tags of the workflow",
          "tags": [
            "tags"
          ]
        }
      },
      "/api/metadata/workflow/{name}/{version}": {
        "delete": {
          "operationId": "unregisterWorkflowDef",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Removes workflow definition. It does not remove workflows associated with the definition.",
          "tags": [
            "metadata-resource"
          ]
        }
      },
      "/api/prompts": {
        "get": {
          "operationId": "getMessageTemplates",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/MessageTemplate"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get Templates",
          "tags": [
            "prompt-resource"
          ]
        }
      },
      "/api/prompts/": {
        "post": {
          "operationId": "createMessageTemplates",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageTemplate"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Create message templates in bulk",
          "tags": [
            "prompt-resource"
          ]
        }
      },
      "/api/prompts/test": {
        "post": {
          "operationId": "testMessageTemplate",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptTemplateTestRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "text/plain": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Test Prompt Template",
          "tags": [
            "prompt-resource"
          ]
        }
      },
      "/api/prompts/{name}": {
        "delete": {
          "operationId": "deleteMessageTemplate",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Delete Template",
          "tags": [
            "prompt-resource"
          ]
        },
        "get": {
          "operationId": "getMessageTemplate",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "version",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MessageTemplate"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get Template",
          "tags": [
            "prompt-resource"
          ]
        },
        "post": {
          "operationId": "saveMessageTemplate",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "description",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "models",
              "required": false,
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            {
              "in": "query",
              "name": "version",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "in": "query",
              "name": "autoIncrement",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Create or Update a template",
          "tags": [
            "prompt-resource"
          ]
        },
        "put": {
          "operationId": "updateMessageTemplate",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "version",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "in": "query",
              "name": "description",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "models",
              "required": false,
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Create a template",
          "tags": [
            "prompt-resource"
          ]
        }
      },
      "/api/prompts/{name}/tags": {
        "delete": {
          "operationId": "deleteTagForPromptTemplate",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Delete a tag for Prompt Template",
          "tags": [
            "prompt-resource"
          ]
        },
        "get": {
          "operationId": "getTagsForPromptTemplate",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Tag"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get tags by Prompt Template",
          "tags": [
            "prompt-resource"
          ]
        },
        "put": {
          "operationId": "putTagForPromptTemplate",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Put a tag to Prompt Template",
          "tags": [
            "prompt-resource"
          ]
        }
      },
      "/api/prompts/{name}/versions": {
        "get": {
          "operationId": "getMessageTemplateVersions",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/MessageTemplate"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get all versions of a Template",
          "tags": [
            "prompt-resource"
          ]
        }
      },
      "/api/prompts/{name}/versions/{version}": {
        "delete": {
          "operationId": "deleteMessageTemplate_1",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Delete Template",
          "tags": [
            "prompt-resource"
          ]
        }
      },
      "/api/queue/": {
        "get": {
          "operationId": "names",
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get Queue Names",
          "tags": [
            "queue-admin-resource"
          ]
        }
      },
      "/api/queue/size": {
        "get": {
          "operationId": "size_1",
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "integer",
                        "format": "int64"
                      }
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get the queue length",
          "tags": [
            "queue-admin-resource"
          ]
        }
      },
      "/api/registry/service": {
        "get": {
          "operationId": "getRegisteredServices",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ServiceRegistry"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "tags": [
            "service-registry-resource"
          ]
        },
        "post": {
          "operationId": "addOrUpdateService",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceRegistry"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "tags": [
            "service-registry-resource"
          ]
        }
      },
      "/api/registry/service/protos/{registryName}": {
        "get": {
          "operationId": "getAllProtos",
          "parameters": [
            {
              "in": "path",
              "name": "registryName",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ProtoRegistryEntry"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "tags": [
            "service-registry-resource"
          ]
        }
      },
      "/api/registry/service/protos/{registryName}/{filename}": {
        "delete": {
          "operationId": "deleteProto",
          "parameters": [
            {
              "in": "path",
              "name": "registryName",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "filename",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "tags": [
            "service-registry-resource"
          ]
        },
        "get": {
          "operationId": "getProtoData",
          "parameters": [
            {
              "in": "path",
              "name": "registryName",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "filename",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/octet-stream": {
                  "schema": {
                    "type": "string",
                    "format": "byte"
                  }
                }
              },
              "description": "OK"
            }
          },
          "tags": [
            "service-registry-resource"
          ]
        },
        "post": {
          "operationId": "setProtoData",
          "parameters": [
            {
              "in": "path",
              "name": "registryName",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "filename",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "tags": [
            "service-registry-resource"
          ]
        }
      },
      "/api/registry/service/{name}": {
        "delete": {
          "operationId": "removeService",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "tags": [
            "service-registry-resource"
          ]
        },
        "get": {
          "operationId": "getService",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ServiceRegistry"
                  }
                }
              },
              "description": "OK"
            }
          },
          "tags": [
            "service-registry-resource"
          ]
        }
      },
      "/api/registry/service/{name}/circuit-breaker/close": {
        "post": {
          "operationId": "closeCircuitBreaker",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CircuitBreakerTransitionResponse"
                  }
                }
              },
              "description": "OK"
            }
          },
          "tags": [
            "service-registry-resource"
          ]
        }
      },
      "/api/registry/service/{name}/circuit-breaker/open": {
        "post": {
          "operationId": "openCircuitBreaker",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CircuitBreakerTransitionResponse"
                  }
                }
              },
              "description": "OK"
            }
          },
          "tags": [
            "service-registry-resource"
          ]
        }
      },
      "/api/registry/service/{name}/circuit-breaker/status": {
        "get": {
          "operationId": "getCircuitBreakerStatus",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CircuitBreakerTransitionResponse"
                  }
                }
              },
              "description": "OK"
            }
          },
          "tags": [
            "service-registry-resource"
          ]
        }
      },
      "/api/registry/service/{name}/discover": {
        "get": {
          "operationId": "discover",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "create",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ServiceMethod"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "tags": [
            "service-registry-resource"
          ]
        }
      },
      "/api/registry/service/{registryName}/methods": {
        "delete": {
          "operationId": "removeMethod",
          "parameters": [
            {
              "in": "path",
              "name": "registryName",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "serviceName",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "method",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "methodType",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "tags": [
            "service-registry-resource"
          ]
        },
        "post": {
          "operationId": "addOrUpdateMethod",
          "parameters": [
            {
              "in": "path",
              "name": "registryName",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceMethod"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "tags": [
            "service-registry-resource"
          ]
        }
      },
      "/api/scheduler/admin/pause": {
        "get": {
          "operationId": "pauseAllSchedules",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
              "additionalProperties": {}
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Pause all scheduling in a single conductor server instance (for debugging only)",
          "tags": [
            "scheduler-resource"
          ]
        }
      },
      "/api/scheduler/admin/requeue": {
        "get": {
          "operationId": "requeueAllExecutionRecords",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
              "additionalProperties": {}
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Requeue all execution records",
          "tags": [
            "scheduler-resource"
          ]
        }
      },
      "/api/scheduler/admin/resume": {
        "get": {
          "operationId": "resumeAllSchedules",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
              "additionalProperties": {}
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Resume all scheduling",
          "tags": [
            "scheduler-resource"
          ]
        }
      },
      "/api/scheduler/bulk/pause": {
        "put": {
          "operationId": "pauseSchedules",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BulkResponse"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Pause the list of schedules",
          "tags": [
            "scheduler-bulk-resource"
          ]
        }
      },
      "/api/scheduler/bulk/resume": {
        "put": {
          "operationId": "resumeSchedules",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BulkResponse"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Resume the list of schedules",
          "tags": [
            "scheduler-bulk-resource"
          ]
        }
      },
      "/api/scheduler/nextFewSchedules": {
        "get": {
          "operationId": "getNextFewSchedules",
          "parameters": [
            {
              "in": "query",
              "name": "cronExpression",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "scheduleStartTime",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "in": "query",
              "name": "scheduleEndTime",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 3
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get list of the next x (default 3, max 5) execution times for a scheduler",
          "tags": [
            "scheduler-resource"
          ]
        }
      },
      "/api/scheduler/schedules": {
        "get": {
          "operationId": "getAllSchedules",
          "parameters": [
            {
              "in": "query",
              "name": "workflowName",
              "required": false,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/WorkflowScheduleModel"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get all existing workflow schedules and optionally filter by workflow name",
          "tags": [
            "scheduler-resource"
          ]
        },
        "post": {
          "operationId": "saveSchedule",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveScheduleRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Create or update a schedule for a specified workflow with a corresponding start workflow request",
          "tags": [
            "scheduler-resource"
          ]
        }
      },
      "/api/scheduler/schedules/tags": {
        "get": {
          "operationId": "getSchedulesByTag",
          "parameters": [
            {
              "in": "query",
              "name": "tag",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/WorkflowScheduleModel"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get schedules by tag",
          "tags": [
            "scheduler-resource"
          ]
        }
      },
      "/api/scheduler/schedules/{name}": {
        "delete": {
          "operationId": "deleteSchedule",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Deletes an existing workflow schedule by name",
          "tags": [
            "scheduler-resource"
          ]
        },
        "get": {
          "operationId": "getSchedule",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WorkflowSchedule"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get an existing workflow schedule by name",
          "tags": [
            "scheduler-resource"
          ]
        }
      },
      "/api/scheduler/schedules/{name}/pause": {
        "get": {
          "operationId": "pauseSchedule",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Pauses an existing schedule by name",
          "tags": [
            "scheduler-resource"
          ]
        }
      },
      "/api/scheduler/schedules/{name}/resume": {
        "get": {
          "operationId": "resumeSchedule",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Resume a paused schedule by name",
          "tags": [
            "scheduler-resource"
          ]
        }
      },
      "/api/scheduler/schedules/{name}/tags": {
        "delete": {
          "operationId": "deleteTagForSchedule",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Delete a tag for schedule",
          "tags": [
            "scheduler-resource"
          ]
        },
        "get": {
          "operationId": "getTagsForSchedule",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Tag"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get tags by schedule",
          "tags": [
            "scheduler-resource"
          ]
        },
        "put": {
          "operationId": "putTagForSchedule",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Put a tag to schedule",
          "tags": [
            "scheduler-resource"
          ]
        }
      },
      "/api/scheduler/search/executions": {
        "get": {
          "description": "use sort options as sort=\u003Cfield\u003E:ASC|DESC e.g. sort=name&sort=workflowId:DESC. If order is not specified, defaults to ASC.",
          "operationId": "searchV2",
          "parameters": [
            {
              "in": "query",
              "name": "start",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 0
              }
            },
            {
              "in": "query",
              "name": "size",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 100
              }
            },
            {
              "in": "query",
              "name": "sort",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "freeText",
              "required": false,
              "schema": {
                "type": "string",
                "default": "*"
              }
            },
            {
              "in": "query",
              "name": "query",
              "required": false,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SearchResultWorkflowScheduleExecutionModel"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Search for workflow executions based on payload and other parameters",
          "tags": [
            "scheduler-resource"
          ]
        }
      },
      "/api/schema": {
        "get": {
          "operationId": "getAllSchemas",
          "parameters": [
            {
              "in": "query",
              "name": "short",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SchemaDef"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get all schemas",
          "tags": [
            "schema-resource"
          ]
        },
        "post": {
          "operationId": "save",
          "parameters": [
            {
              "in": "query",
              "name": "newVersion",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SchemaDef"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Save schema",
          "tags": [
            "schema-resource"
          ]
        }
      },
      "/api/schema/{name}": {
        "delete": {
          "operationId": "deleteSchemaByName",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Delete all versions of schema by name",
          "tags": [
            "schema-resource"
          ]
        },
        "get": {
          "operationId": "getSchemaByNameWithLatestVersion",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SchemaDef"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get schema by name with latest version",
          "tags": [
            "schema-resource"
          ]
        }
      },
      "/api/schema/{name}/{version}": {
        "delete": {
          "operationId": "deleteSchemaByNameAndVersion",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Delete a version of schema by name",
          "tags": [
            "schema-resource"
          ]
        },
        "get": {
          "operationId": "getSchemaByNameAndVersion",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SchemaDef"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get schema by name and version",
          "tags": [
            "schema-resource"
          ]
        }
      },
      "/api/secrets": {
        "get": {
          "operationId": "listSecretsThatUserCanGrantAccessTo",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "uniqueItems": true,
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "List all secret names user can grant access to",
          "tags": [
            "secret-resource"
          ]
        },
        "post": {
          "operationId": "listAllSecretNames",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "List all secret names",
          "tags": [
            "secret-resource"
          ]
        }
      },
      "/api/secrets-v2": {
        "get": {
          "operationId": "listSecretsWithTagsThatUserCanGrantAccessTo",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ExtendedSecret"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "List all secret names along with tags user can grant access to",
          "tags": [
            "secret-resource"
          ]
        }
      },
      "/api/secrets/clearLocalCache": {
        "get": {
          "operationId": "clearLocalCache",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Clear local cache",
          "tags": [
            "secret-resource"
          ]
        }
      },
      "/api/secrets/clearRedisCache": {
        "get": {
          "operationId": "clearRedisCache",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Clear redis cache",
          "tags": [
            "secret-resource"
          ]
        }
      },
      "/api/secrets/{key}": {
        "delete": {
          "operationId": "deleteSecret",
          "parameters": [
            {
              "in": "path",
              "name": "key",
              "required": true,
              "schema": {
                "pattern": "[a-zA-Z0-9_-]+",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Delete a secret value by key",
          "tags": [
            "secret-resource"
          ]
        },
        "get": {
          "operationId": "getSecret",
          "parameters": [
            {
              "in": "path",
              "name": "key",
              "required": true,
              "schema": {
                "pattern": "[a-zA-Z0-9_-]+",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "text/plain": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get secret value by key",
          "tags": [
            "secret-resource"
          ]
        },
        "put": {
          "operationId": "putSecret",
          "parameters": [
            {
              "in": "path",
              "name": "key",
              "required": true,
              "schema": {
                "pattern": "[a-zA-Z0-9_-]+",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "maxLength": 65535,
                  "minLength": 0,
                  "type": "string"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Put a secret value by key",
          "tags": [
            "secret-resource"
          ]
        }
      },
      "/api/secrets/{key}/exists": {
        "get": {
          "operationId": "secretExists",
          "parameters": [
            {
              "in": "path",
              "name": "key",
              "required": true,
              "schema": {
                "pattern": "[a-zA-Z0-9_-]+",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Check if secret exists",
          "tags": [
            "secret-resource"
          ]
        }
      },
      "/api/secrets/{key}/tags": {
        "delete": {
          "operationId": "deleteTagForSecret",
          "parameters": [
            {
              "in": "path",
              "name": "key",
              "required": true,
              "schema": {
                "pattern": "[a-zA-Z0-9_-]+",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Delete tags of the secret",
          "tags": [
            "secret-resource"
          ]
        },
        "get": {
          "operationId": "getTags",
          "parameters": [
            {
              "in": "path",
              "name": "key",
              "required": true,
              "schema": {
                "pattern": "[a-zA-Z0-9_-]+",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Tag"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get tags by secret",
          "tags": [
            "secret-resource"
          ]
        },
        "put": {
          "operationId": "putTagForSecret",
          "parameters": [
            {
              "in": "path",
              "name": "key",
              "required": true,
              "schema": {
                "pattern": "[a-zA-Z0-9_-]+",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Tag a secret",
          "tags": [
            "secret-resource"
          ]
        }
      },
      "/api/tasks": {
        "post": {
          "operationId": "updateTask",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResult"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "text/plain": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Update a task",
          "tags": [
            "task-resource"
          ]
        }
      },
      "/api/tasks/poll/batch/{tasktype}": {
        "get": {
          "operationId": "batchPoll",
          "parameters": [
            {
              "in": "path",
              "name": "tasktype",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "workerid",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "domain",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "count",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 1
              }
            },
            {
              "in": "query",
              "name": "timeout",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 100
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Task"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Batch poll for a task of a certain type",
          "tags": [
            "task-resource"
          ]
        }
      },
      "/api/tasks/poll/{tasktype}": {
        "get": {
          "operationId": "poll",
          "parameters": [
            {
              "in": "path",
              "name": "tasktype",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "workerid",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "domain",
              "required": false,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Poll for a task of a certain type",
          "tags": [
            "task-resource"
          ]
        }
      },
      "/api/tasks/queue/all": {
        "get": {
          "operationId": "all",
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get the details about each queue",
          "tags": [
            "task-resource"
          ]
        }
      },
      "/api/tasks/queue/all/verbose": {
        "get": {
          "operationId": "allVerbose",
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get the details about each queue",
          "tags": [
            "task-resource"
          ]
        }
      },
      "/api/tasks/queue/polldata": {
        "get": {
          "operationId": "getPollData",
          "parameters": [
            {
              "in": "query",
              "name": "taskType",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PollData"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get the last poll data for a given task type",
          "tags": [
            "task-resource"
          ]
        }
      },
      "/api/tasks/queue/polldata/all": {
        "get": {
          "operationId": "getAllPollData",
          "parameters": [
            {
              "in": "query",
              "name": "workerSize",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "in": "query",
              "name": "workerOpt",
              "required": false,
              "schema": {
                "type": "string",
                "enum": [
                  "GT",
                  "LT"
                ]
              }
            },
            {
              "in": "query",
              "name": "queueSize",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "in": "query",
              "name": "queueOpt",
              "required": false,
              "schema": {
                "type": "string",
                "enum": [
                  "GT",
                  "LT"
                ]
              }
            },
            {
              "in": "query",
              "name": "lastPollTimeSize",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "in": "query",
              "name": "lastPollTimeOpt",
              "required": false,
              "schema": {
                "type": "string",
                "enum": [
                  "GT",
                  "LT"
                ]
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "type": "object",
              "additionalProperties": {}
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get the last poll data for all task types",
          "tags": [
            "task-resource"
          ]
        }
      },
      "/api/tasks/queue/requeue/{taskType}": {
        "post": {
          "operationId": "requeuePendingTask",
          "parameters": [
            {
              "in": "path",
              "name": "taskType",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "text/plain": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Requeue pending tasks",
          "tags": [
            "task-resource"
          ]
        }
      },
      "/api/tasks/queue/sizes": {
        "get": {
          "operationId": "size",
          "parameters": [
            {
              "in": "query",
              "name": "taskType",
              "required": false,
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get Task type queue sizes",
          "tags": [
            "task-resource"
          ]
        }
      },
      "/api/tasks/search": {
        "get": {
          "description": "use sort options as sort=\u003Cfield\u003E:ASC|DESC e.g. sort=name&sort=workflowId:DESC. If order is not specified, defaults to ASC",
          "operationId": "search_2",
          "parameters": [
            {
              "in": "query",
              "name": "start",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 0
              }
            },
            {
              "in": "query",
              "name": "size",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 100
              }
            },
            {
              "in": "query",
              "name": "sort",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "freeText",
              "required": false,
              "schema": {
                "type": "string",
                "default": "*"
              }
            },
            {
              "in": "query",
              "name": "query",
              "required": false,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/SearchResultTaskSummary"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Search for tasks based in payload and other parameters",
          "tags": [
            "task-resource"
          ]
        }
      },
      "/api/tasks/update-v2": {
        "post": {
          "operationId": "updateTaskV2",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResult"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Update a task",
          "tags": [
            "task-resource"
          ]
        }
      },
      "/api/tasks/{taskId}": {
        "get": {
          "operationId": "getTask",
          "parameters": [
            {
              "in": "path",
              "name": "taskId",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get task by Id",
          "tags": [
            "task-resource"
          ]
        }
      },
      "/api/tasks/{taskId}/log": {
        "get": {
          "operationId": "getTaskLogs",
          "parameters": [
            {
              "in": "path",
              "name": "taskId",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TaskExecLog"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get Task Execution Logs",
          "tags": [
            "task-resource"
          ]
        },
        "post": {
          "operationId": "log",
          "parameters": [
            {
              "in": "path",
              "name": "taskId",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Log Task Execution Details",
          "tags": [
            "task-resource"
          ]
        }
      },
      "/api/tasks/{workflowId}/{status}/signal": {
        "post": {
          "operationId": "signalWorkflowTaskASync",
          "parameters": [
            {
              "in": "path",
              "name": "workflowId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "status",
              "required": true,
              "schema": {
                "type": "string",
                "enum": [
                  "IN_PROGRESS",
                  "FAILED",
                  "FAILED_WITH_TERMINAL_ERROR",
                  "COMPLETED"
                ]
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
              "additionalProperties": {}
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Update running task in the workflow with given status and output asynchronously",
          "tags": [
            "task-resource"
          ]
        }
      },
      "/api/tasks/{workflowId}/{status}/signal/sync": {
        "post": {
          "operationId": "signalWorkflowTaskSync",
          "parameters": [
            {
              "in": "path",
              "name": "workflowId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "status",
              "required": true,
              "schema": {
                "type": "string",
                "enum": [
                  "IN_PROGRESS",
                  "FAILED",
                  "FAILED_WITH_TERMINAL_ERROR",
                  "COMPLETED"
                ]
              }
            },
            {
              "in": "query",
              "name": "returnStrategy",
              "required": false,
              "schema": {
                "type": "string",
                "enum": [
                  "TARGET_WORKFLOW",
                  "BLOCKING_WORKFLOW",
                  "BLOCKING_TASK",
                  "BLOCKING_TASK_INPUT"
                ],
                "default": "TARGET_WORKFLOW"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
              "additionalProperties": {}
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SignalResponse"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Update running task in the workflow with given status and output synchronously and return back updated workflow",
          "tags": [
            "task-resource"
          ]
        }
      },
      "/api/tasks/{workflowId}/{taskRefName}/{status}": {
        "post": {
          "operationId": "updateTask_1",
          "parameters": [
            {
              "in": "path",
              "name": "workflowId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "taskRefName",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "status",
              "required": true,
              "schema": {
                "type": "string",
                "enum": [
                  "IN_PROGRESS",
                  "FAILED",
                  "FAILED_WITH_TERMINAL_ERROR",
                  "COMPLETED"
                ]
              }
            },
            {
              "in": "query",
              "name": "workerid",
              "required": false,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
              "additionalProperties": {}
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "text/plain": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Update a task By Ref Name. The output data is merged if data from a previous API call already exists.",
          "tags": [
            "task-resource"
          ]
        }
      },
      "/api/tasks/{workflowId}/{taskRefName}/{status}/sync": {
        "post": {
          "operationId": "updateTaskSync",
          "parameters": [
            {
              "in": "path",
              "name": "workflowId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "taskRefName",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "status",
              "required": true,
              "schema": {
                "type": "string",
                "enum": [
                  "IN_PROGRESS",
                  "FAILED",
                  "FAILED_WITH_TERMINAL_ERROR",
                  "COMPLETED"
                ]
              }
            },
            {
              "in": "query",
              "name": "workerid",
              "required": false,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
              "additionalProperties": {}
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Workflow"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Update a task By Ref Name synchronously. The output data is merged if data from a previous API call already exists.",
          "tags": [
            "task-resource"
          ]
        }
      },
      "/api/token": {
        "post": {
          "operationId": "generateToken",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateTokenRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Response"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Generate JWT with the given access key",
          "tags": [
            "token-resource"
          ]
        }
      },
      "/api/token/userInfo": {
        "get": {
          "operationId": "getUserInfo",
          "parameters": [
            {
              "in": "query",
              "name": "claims",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get the user info from the token",
          "tags": [
            "token-resource"
          ]
        }
      },
      "/api/users": {
        "get": {
          "operationId": "listUsers",
          "parameters": [
            {
              "in": "query",
              "name": "apps",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ConductorUser"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get all users",
          "tags": [
            "user-resource"
          ]
        }
      },
      "/api/users/{id}": {
        "delete": {
          "operationId": "deleteUser",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Response"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Delete a user",
          "tags": [
            "user-resource"
          ]
        },
        "get": {
          "operationId": "getUser",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get a user by id",
          "tags": [
            "user-resource"
          ]
        },
        "put": {
          "operationId": "upsertUser",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertUserRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Create or update a user",
          "tags": [
            "user-resource"
          ]
        }
      },
      "/api/users/{userId}/checkPermissions": {
        "get": {
          "operationId": "checkPermissions",
          "parameters": [
            {
              "in": "path",
              "name": "userId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "type",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get the permissions this user has over workflows and tasks",
          "tags": [
            "user-resource"
          ]
        }
      },
      "/api/users/{userId}/permissions": {
        "get": {
          "operationId": "getGrantedPermissions",
          "parameters": [
            {
              "in": "path",
              "name": "userId",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get the permissions this user has over workflows and tasks",
          "tags": [
            "user-resource"
          ]
        }
      },
      "/api/version": {
        "get": {
          "operationId": "getVersion",
          "responses": {
            "200": {
              "content": {
                "text/plain": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get the server's version",
          "tags": [
            "version-resource"
          ]
        }
      },
      "/api/workflow": {
        "post": {
          "operationId": "startWorkflow",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StartWorkflowRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "text/plain": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Start a new workflow with StartWorkflowRequest, which allows task to be executed in a domain",
          "tags": [
            "workflow-resource"
          ]
        }
      },
      "/api/workflow/bulk/delete": {
        "post": {
          "operationId": "delete",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BulkResponse"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Permanently remove workflows from the system",
          "tags": [
            "workflow-bulk-resource"
          ]
        }
      },
      "/api/workflow/bulk/pause": {
        "put": {
          "operationId": "pauseWorkflow_1",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BulkResponse"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Pause the list of workflows",
          "tags": [
            "workflow-bulk-resource"
          ]
        }
      },
      "/api/workflow/bulk/restart": {
        "post": {
          "operationId": "restart_1",
          "parameters": [
            {
              "in": "query",
              "name": "useLatestDefinitions",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BulkResponse"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Restart the list of completed workflow",
          "tags": [
            "workflow-bulk-resource"
          ]
        }
      },
      "/api/workflow/bulk/resume": {
        "put": {
          "operationId": "resumeWorkflow_1",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BulkResponse"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Resume the list of workflows",
          "tags": [
            "workflow-bulk-resource"
          ]
        }
      },
      "/api/workflow/bulk/retry": {
        "post": {
          "operationId": "retry_1",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BulkResponse"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Retry the last failed task for each workflow from the list",
          "tags": [
            "workflow-bulk-resource"
          ]
        }
      },
      "/api/workflow/bulk/terminate": {
        "post": {
          "operationId": "terminate",
          "parameters": [
            {
              "in": "query",
              "name": "reason",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "triggerFailureWorkflow",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BulkResponse"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Terminate workflows execution",
          "tags": [
            "workflow-bulk-resource"
          ]
        }
      },
      "/api/workflow/correlated/batch": {
        "post": {
          "operationId": "getWorkflows_1",
          "parameters": [
            {
              "in": "query",
              "name": "includeClosed",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false
              }
            },
            {
              "in": "query",
              "name": "includeTasks",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CorrelationIdsSearchRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Workflow"
                      }
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Lists workflows for the given correlation id list and workflow name list",
          "tags": [
            "workflow-resource"
          ]
        }
      },
      "/api/workflow/decide/{workflowId}": {
        "put": {
          "operationId": "decide",
          "parameters": [
            {
              "in": "path",
              "name": "workflowId",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Starts the decision task for a workflow",
          "tags": [
            "workflow-resource"
          ]
        }
      },
      "/api/workflow/execute/{name}": {
        "get": {
          "deprecated": true,
          "operationId": "executeWorkflowAsGetAPI",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "version",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "in": "header",
              "name": "requestId",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "header",
              "name": "waitUntilTaskRef",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "header",
              "name": "waitForSeconds",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 10
              }
            },
            {
              "in": "header",
              "name": "X-Idempotency-key",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "header",
              "name": "X-on-conflict",
              "required": false,
              "schema": {
                "type": "string",
                "enum": [
                  "FAIL",
                  "RETURN_EXISTING",
                  "FAIL_ON_RUNNING"
                ]
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
              "additionalProperties": {}
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Execute a workflow synchronously with input and outputs using get api",
          "tags": [
            "workflow-resource"
          ]
        },
        "post": {
          "deprecated": true,
          "operationId": "executeWorkflowAsAPI",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "version",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "in": "header",
              "name": "requestId",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "header",
              "name": "waitUntilTaskRef",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "header",
              "name": "waitForSeconds",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 10
              }
            },
            {
              "in": "header",
              "name": "X-Idempotency-key",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "header",
              "name": "X-on-conflict",
              "required": false,
              "schema": {
                "type": "string",
                "enum": [
                  "FAIL",
                  "RETURN_EXISTING",
                  "FAIL_ON_RUNNING"
                ]
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
              "additionalProperties": {}
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
              "additionalProperties": {}
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Execute a workflow synchronously with input and outputs",
          "tags": [
            "workflow-resource"
          ]
        }
      },
      "/api/workflow/execute/{name}/{version}": {
        "post": {
          "operationId": "executeWorkflow",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "in": "query",
              "name": "requestId",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "waitUntilTaskRef",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "waitForSeconds",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 10
              }
            },
            {
              "in": "query",
              "name": "consistency",
              "required": false,
              "schema": {
                "type": "string",
                "enum": [
                  "SYNCHRONOUS",
                  "DURABLE",
                  "REGION_DURABLE"
                ],
                "default": "DURABLE"
              }
            },
            {
              "in": "query",
              "name": "returnStrategy",
              "required": false,
              "schema": {
                "type": "string",
                "enum": [
                  "TARGET_WORKFLOW",
                  "BLOCKING_WORKFLOW",
                  "BLOCKING_TASK",
                  "BLOCKING_TASK_INPUT"
                ],
                "default": "TARGET_WORKFLOW"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StartWorkflowRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SignalResponse"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Execute a workflow synchronously",
          "tags": [
            "workflow-resource"
          ]
        }
      },
      "/api/workflow/running/{name}": {
        "get": {
          "operationId": "getRunningWorkflow",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "version",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 1
              }
            },
            {
              "in": "query",
              "name": "startTime",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "in": "query",
              "name": "endTime",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Retrieve all the running workflows",
          "tags": [
            "workflow-resource"
          ]
        }
      },
      "/api/workflow/search": {
        "get": {
          "description": "Search for workflow executions based on payload and other parameters.\nThe query parameter accepts exact matches using `=` and `IN` on the following fields: `workflowId`, `correlationId`, `taskId`, `workflowType`, `taskType`, and `status`.\n\tMatches using `=` can be written as `taskType = HTTP`.\n\tMatches using `IN` are written as `status IN (SCHEDULED, IN_PROGRESS)`.\nThe 'startTime' and 'modifiedTime' field uses unix timestamps and accepts queries using `\u003C` and `\u003E`, for example `startTime \u003C 1696143600000`.\nQueries can be combined using `AND`, for example `taskType = HTTP AND status = SCHEDULED`.\n",
          "operationId": "search_1",
          "parameters": [
            {
              "in": "query",
              "name": "start",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 0
              }
            },
            {
              "in": "query",
              "name": "size",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 100
              }
            },
            {
              "in": "query",
              "name": "sort",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "freeText",
              "required": false,
              "schema": {
                "type": "string",
                "default": "*"
              }
            },
            {
              "in": "query",
              "name": "query",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "skipCache",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ScrollableSearchResultWorkflowSummary"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Search for workflow executions based on payload and other parameters",
          "tags": [
            "workflow-resource"
          ]
        }
      },
      "/api/workflow/start/{name}/{version}": {
        "post": {
          "operationId": "startWorkflowAsync",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "in": "query",
              "name": "correlationId",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "priority",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 0
              }
            },
            {
              "in": "header",
              "name": "X-Idempotency-key",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "header",
              "name": "X-on-conflict",
              "required": false,
              "schema": {
                "type": "string",
                "enum": [
                  "FAIL",
                  "RETURN_EXISTING",
                  "FAIL_ON_RUNNING"
                ]
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
              "additionalProperties": {}
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "text/plain": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Start a new workflow asynchronously. Returns the ID of the workflow instance that can be later used for tracking",
          "tags": [
            "workflow-resource"
          ]
        }
      },
      "/api/workflow/test": {
        "post": {
          "operationId": "testWorkflow",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowTestRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Workflow"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Test workflow execution using mock data",
          "tags": [
            "workflow-resource"
          ]
        }
      },
      "/api/workflow/{name}": {
        "post": {
          "operationId": "startWorkflow_1",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "version",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "in": "query",
              "name": "correlationId",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "priority",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 0
              }
            },
            {
              "in": "header",
              "name": "X-Idempotency-key",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "header",
              "name": "X-on-conflict",
              "required": false,
              "schema": {
                "type": "string",
                "enum": [
                  "FAIL",
                  "RETURN_EXISTING",
                  "FAIL_ON_RUNNING"
                ]
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
              "additionalProperties": {}
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "text/plain": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Start a new workflow. Returns the ID of the workflow instance that can be later used for tracking",
          "tags": [
            "workflow-resource"
          ]
        }
      },
      "/api/workflow/{name}/correlated": {
        "post": {
          "operationId": "getWorkflows",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "includeClosed",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false
              }
            },
            {
              "in": "query",
              "name": "includeTasks",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Workflow"
                      }
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Lists workflows for the given correlation id list",
          "tags": [
            "workflow-resource"
          ]
        }
      },
      "/api/workflow/{name}/correlated/{correlationId}": {
        "get": {
          "operationId": "getWorkflows_2",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "correlationId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "includeClosed",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false
              }
            },
            {
              "in": "query",
              "name": "includeTasks",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Workflow"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Lists workflows for the given correlation id",
          "tags": [
            "workflow-resource"
          ]
        }
      },
      "/api/workflow/{workflowId}": {
        "delete": {
          "operationId": "terminate_1",
          "parameters": [
            {
              "in": "path",
              "name": "workflowId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "reason",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "triggerFailureWorkflow",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Terminate workflow execution",
          "tags": [
            "workflow-resource"
          ]
        },
        "get": {
          "operationId": "getExecutionStatus",
          "parameters": [
            {
              "in": "path",
              "name": "workflowId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "includeTasks",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": true
              }
            },
            {
              "in": "query",
              "name": "summarize",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/Workflow"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Gets the workflow by workflow (execution) id",
          "tags": [
            "workflow-resource"
          ]
        }
      },
      "/api/workflow/{workflowId}/jump/{taskReferenceName}": {
        "post": {
          "description": "Jump workflow execution to given task.",
          "operationId": "jumpToTask",
          "parameters": [
            {
              "in": "path",
              "name": "workflowId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "taskReferenceName",
              "required": false,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
              "additionalProperties": {}
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Jump workflow execution to given task",
          "tags": [
            "workflow-resource"
          ]
        }
      },
      "/api/workflow/{workflowId}/pause": {
        "put": {
          "operationId": "pauseWorkflow",
          "parameters": [
            {
              "in": "path",
              "name": "workflowId",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Pauses the workflow",
          "tags": [
            "workflow-resource"
          ]
        }
      },
      "/api/workflow/{workflowId}/remove": {
        "delete": {
          "operationId": "delete_1",
          "parameters": [
            {
              "in": "path",
              "name": "workflowId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "archiveWorkflow",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": true
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Removes the workflow from the system",
          "tags": [
            "workflow-resource"
          ]
        }
      },
      "/api/workflow/{workflowId}/rerun": {
        "post": {
          "operationId": "rerun",
          "parameters": [
            {
              "in": "path",
              "name": "workflowId",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RerunWorkflowRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "text/plain": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Reruns the workflow from a specific task",
          "tags": [
            "workflow-resource"
          ]
        }
      },
      "/api/workflow/{workflowId}/resetcallbacks": {
        "post": {
          "operationId": "resetWorkflow",
          "parameters": [
            {
              "in": "path",
              "name": "workflowId",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No Content"
            }
          },
          "summary": "Resets callback times of all non-terminal SIMPLE tasks to 0",
          "tags": [
            "workflow-resource"
          ]
        }
      },
      "/api/workflow/{workflowId}/restart": {
        "post": {
          "operationId": "restart",
          "parameters": [
            {
              "in": "path",
              "name": "workflowId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "useLatestDefinitions",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No Content"
            }
          },
          "summary": "Restarts a completed workflow",
          "tags": [
            "workflow-resource"
          ]
        }
      },
      "/api/workflow/{workflowId}/resume": {
        "put": {
          "operationId": "resumeWorkflow",
          "parameters": [
            {
              "in": "path",
              "name": "workflowId",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Resumes the workflow",
          "tags": [
            "workflow-resource"
          ]
        }
      },
      "/api/workflow/{workflowId}/retry": {
        "post": {
          "operationId": "retry",
          "parameters": [
            {
              "in": "path",
              "name": "workflowId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "resumeSubworkflowTasks",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false
              }
            },
            {
              "in": "query",
              "name": "retryIfRetriedByParent",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": true
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No Content"
            }
          },
          "summary": "Retries the last failed task",
          "tags": [
            "workflow-resource"
          ]
        }
      },
      "/api/workflow/{workflowId}/skiptask/{taskReferenceName}": {
        "put": {
          "operationId": "skipTaskFromWorkflow",
          "parameters": [
            {
              "in": "path",
              "name": "workflowId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "taskReferenceName",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SkipTaskRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Skips a given task from a current running workflow",
          "tags": [
            "workflow-resource"
          ]
        }
      },
      "/api/workflow/{workflowId}/state": {
        "post": {
          "description": "Updates the workflow variables, tasks and triggers evaluation.",
          "operationId": "updateWorkflowAndTaskState",
          "parameters": [
            {
              "in": "path",
              "name": "workflowId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "requestId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "waitUntilTaskRef",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "waitForSeconds",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 10
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowStateUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/WorkflowRun"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Update a workflow state by updating variables or in progress task",
          "tags": [
            "workflow-resource"
          ]
        }
      },
      "/api/workflow/{workflowId}/status": {
        "get": {
          "operationId": "getWorkflowStatusSummary",
          "parameters": [
            {
              "in": "path",
              "name": "workflowId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "includeOutput",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false
              }
            },
            {
              "in": "query",
              "name": "includeVariables",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/WorkflowStatus"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Gets the workflow by workflow (execution) id",
          "tags": [
            "workflow-resource"
          ]
        }
      },
      "/api/workflow/{workflowId}/tasks": {
        "get": {
          "operationId": "getExecutionStatusTaskList",
          "parameters": [
            {
              "in": "path",
              "name": "workflowId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "start",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 0
              }
            },
            {
              "in": "query",
              "name": "count",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 15
              }
            },
            {
              "in": "query",
              "name": "status",
              "required": false,
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/TaskListSearchResultSummary"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Gets the workflow tasks by workflow (execution) id",
          "tags": [
            "workflow-resource"
          ]
        }
      },
      "/api/workflow/{workflowId}/upgrade": {
        "post": {
          "description": "Upgrade running workflow to newer version",
          "operationId": "upgradeRunningWorkflowToVersion",
          "parameters": [
            {
              "in": "path",
              "name": "workflowId",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpgradeWorkflowRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "summary": "Upgrade running workflow to newer version",
          "tags": [
            "workflow-resource"
          ]
        }
      },
      "/api/workflow/{workflowId}/variables": {
        "post": {
          "description": "Updates the workflow variables and triggers evaluation.",
          "operationId": "updateWorkflowState",
          "parameters": [
            {
              "in": "path",
              "name": "workflowId",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
              "additionalProperties": {}
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/Workflow"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Update workflow variables",
          "tags": [
            "workflow-resource"
          ]
        }
      },
      "/context.js": {
        "get": {
          "operationId": "get",
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "tags": [
            "context-controller"
          ]
        }
      },
      "/health": {
        "get": {
          "operationId": "doCheck",
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "type": "object",
              "additionalProperties": {}
                  }
                }
              },
              "description": "OK"
            }
          },
          "tags": [
            "health-check-resource"
          ]
        }
      },
      "/webhook/{id}": {
        "get": {
          "operationId": "handleWebhook_1",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "requestParams",
              "required": true,
              "schema": {
                "type": "object",
              "additionalProperties": {}
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "OK"
            }
          },
          "tags": [
            "incoming-webhook-resource"
          ]
        },
        "post": {
          "operationId": "handleWebhook",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "requestParams",
              "required": true,
              "schema": {
                "type": "object",
              "additionalProperties": {}
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "OK"
            }
          },
          "tags": [
            "incoming-webhook-resource"
          ]
        }
      }
    },
    "components": {
      "schemas": {
        "Action": {
          "type": "object",
          "properties": {
            "action": {
              "type": "string",
              "enum": [
                "start_workflow",
                "complete_task",
                "fail_task",
                "terminate_workflow",
                "update_workflow_variables"
              ]
            },
            "complete_task": {
              "$ref": "#/components/schemas/TaskDetails"
            },
            "expandInlineJSON": {
              "type": "boolean"
            },
            "fail_task": {
              "$ref": "#/components/schemas/TaskDetails"
            },
            "start_workflow": {
              "$ref": "#/components/schemas/StartWorkflowRequest"
            },
            "terminate_workflow": {
              "$ref": "#/components/schemas/TerminateWorkflow"
            },
            "update_workflow_variables": {
              "$ref": "#/components/schemas/UpdateWorkflowVariables"
            }
          }
        },
        "Any": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/Any"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "memoizedSerializedSize": {
              "type": "integer",
              "format": "int32",
              "writeOnly": true
            },
            "parserForType": {
              "$ref": "#/components/schemas/ParserAny"
            },
            "serializedSize": {
              "type": "integer",
              "format": "int32"
            },
            "typeUrl": {
              "type": "string"
            },
            "typeUrlBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            },
            "value": {
              "$ref": "#/components/schemas/ByteString"
            }
          }
        },
        "AuthorizationRequest": {
          "required": [
            "access",
            "subject",
            "target"
          ],
          "type": "object",
          "properties": {
            "access": {
              "uniqueItems": true,
              "type": "array",
              "description": "The set of access which is granted or removed",
              "items": {
                "type": "string",
                "description": "The set of access which is granted or removed",
                "enum": [
                  "CREATE",
                  "READ",
                  "EXECUTE",
                  "UPDATE",
                  "DELETE"
                ]
              }
            },
            "subject": {
              "$ref": "#/components/schemas/SubjectRef"
            },
            "target": {
              "$ref": "#/components/schemas/TargetRef"
            }
          }
        },
        "BulkResponse": {
          "type": "object",
          "properties": {
            "bulkErrorResults": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "bulkSuccessfulResults": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        },
        "ByteString": {
          "type": "object",
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "validUtf8": {
              "type": "boolean"
            }
          }
        },
        "CacheConfig": {
          "type": "object",
          "properties": {
            "key": {
              "type": "string"
            },
            "ttlInSecond": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "CircuitBreakerTransitionResponse": {
          "type": "object",
          "properties": {
            "currentState": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "previousState": {
              "type": "string"
            },
            "service": {
              "type": "string"
            },
            "transitionTimestamp": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "ConductorUser": {
          "type": "object",
          "properties": {
            "applicationUser": {
              "type": "boolean"
            },
            "encryptedId": {
              "type": "boolean"
            },
            "encryptedIdDisplayValue": {
              "type": "string"
            },
            "groups": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Group"
              }
            },
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "orkesWorkersApp": {
              "type": "boolean"
            },
            "roles": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Role"
              }
            },
            "uuid": {
              "type": "string"
            }
          }
        },
        "Config": {
          "type": "object",
          "properties": {
            "circuitBreakerConfig": {
              "$ref": "#/components/schemas/OrkesCircuitBreakerConfig"
            }
          }
        },
        "ConnectivityTestInput": {
          "required": [
            "sink"
          ],
          "type": "object",
          "properties": {
            "input": {
              "type": "object",
              "additionalProperties": {}
            },
            "sink": {
              "type": "string"
            }
          }
        },
        "ConnectivityTestResult": {
          "type": "object",
          "properties": {
            "reason": {
              "type": "string"
            },
            "successful": {
              "type": "boolean"
            },
            "workflowId": {
              "type": "string"
            }
          }
        },
        "CorrelationIdsSearchRequest": {
          "required": [
            "correlationIds",
            "workflowNames"
          ],
          "type": "object",
          "properties": {
            "correlationIds": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "workflowNames": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "CreateOrUpdateApplicationRequest": {
          "required": [
            "name"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Application's name e.g.: Payment Processors"
            }
          }
        },
        "Declaration": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/Declaration"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "fullName": {
              "type": "string"
            },
            "fullNameBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "memoizedSerializedSize": {
              "type": "integer",
              "format": "int32",
              "writeOnly": true
            },
            "number": {
              "type": "integer",
              "format": "int32"
            },
            "parserForType": {
              "$ref": "#/components/schemas/ParserDeclaration"
            },
            "repeated": {
              "type": "boolean"
            },
            "reserved": {
              "type": "boolean"
            },
            "serializedSize": {
              "type": "integer",
              "format": "int32"
            },
            "type": {
              "type": "string"
            },
            "typeBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "DeclarationOrBuilder": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/Message"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "fullName": {
              "type": "string"
            },
            "fullNameBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "number": {
              "type": "integer",
              "format": "int32"
            },
            "repeated": {
              "type": "boolean"
            },
            "reserved": {
              "type": "boolean"
            },
            "type": {
              "type": "string"
            },
            "typeBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "Descriptor": {
          "type": "object",
          "properties": {
            "containingType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "enumTypes": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EnumDescriptor"
              }
            },
            "extendable": {
              "type": "boolean"
            },
            "extensions": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FieldDescriptor"
              }
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FieldDescriptor"
              }
            },
            "file": {
              "$ref": "#/components/schemas/FileDescriptor"
            },
            "fullName": {
              "type": "string"
            },
            "index": {
              "type": "integer",
              "format": "int32"
            },
            "name": {
              "type": "string"
            },
            "nestedTypes": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Descriptor"
              }
            },
            "oneofs": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/OneofDescriptor"
              }
            },
            "options": {
              "$ref": "#/components/schemas/MessageOptions"
            },
            "proto": {
              "$ref": "#/components/schemas/DescriptorProto"
            },
            "realOneofs": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/OneofDescriptor"
              }
            }
          }
        },
        "DescriptorProto": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/DescriptorProto"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "enumTypeCount": {
              "type": "integer",
              "format": "int32"
            },
            "enumTypeList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EnumDescriptorProto"
              }
            },
            "enumTypeOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EnumDescriptorProtoOrBuilder"
              }
            },
            "extensionCount": {
              "type": "integer",
              "format": "int32"
            },
            "extensionList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FieldDescriptorProto"
              }
            },
            "extensionOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FieldDescriptorProtoOrBuilder"
              }
            },
            "extensionRangeCount": {
              "type": "integer",
              "format": "int32"
            },
            "extensionRangeList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ExtensionRange"
              }
            },
            "extensionRangeOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ExtensionRangeOrBuilder"
              }
            },
            "fieldCount": {
              "type": "integer",
              "format": "int32"
            },
            "fieldList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FieldDescriptorProto"
              }
            },
            "fieldOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FieldDescriptorProtoOrBuilder"
              }
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "memoizedSerializedSize": {
              "type": "integer",
              "format": "int32",
              "writeOnly": true
            },
            "name": {
              "type": "string"
            },
            "nameBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "nestedTypeCount": {
              "type": "integer",
              "format": "int32"
            },
            "nestedTypeList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DescriptorProto"
              }
            },
            "nestedTypeOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DescriptorProtoOrBuilder"
              }
            },
            "oneofDeclCount": {
              "type": "integer",
              "format": "int32"
            },
            "oneofDeclList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/OneofDescriptorProto"
              }
            },
            "oneofDeclOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/OneofDescriptorProtoOrBuilder"
              }
            },
            "options": {
              "$ref": "#/components/schemas/MessageOptions"
            },
            "optionsOrBuilder": {
              "$ref": "#/components/schemas/MessageOptionsOrBuilder"
            },
            "parserForType": {
              "$ref": "#/components/schemas/ParserDescriptorProto"
            },
            "reservedNameCount": {
              "type": "integer",
              "format": "int32"
            },
            "reservedNameList": {
              "type": "array",
              "properties": {
                "empty": {
                  "type": "boolean"
                },
                "first": {
                  "type": "string"
                },
                "last": {
                  "type": "string"
                }
              },
              "items": {
                "type": "string"
              }
            },
            "reservedRangeCount": {
              "type": "integer",
              "format": "int32"
            },
            "reservedRangeList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ReservedRange"
              }
            },
            "reservedRangeOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ReservedRangeOrBuilder"
              }
            },
            "serializedSize": {
              "type": "integer",
              "format": "int32"
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "DescriptorProtoOrBuilder": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/Message"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "enumTypeCount": {
              "type": "integer",
              "format": "int32"
            },
            "enumTypeList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EnumDescriptorProto"
              }
            },
            "enumTypeOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EnumDescriptorProtoOrBuilder"
              }
            },
            "extensionCount": {
              "type": "integer",
              "format": "int32"
            },
            "extensionList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FieldDescriptorProto"
              }
            },
            "extensionOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FieldDescriptorProtoOrBuilder"
              }
            },
            "extensionRangeCount": {
              "type": "integer",
              "format": "int32"
            },
            "extensionRangeList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ExtensionRange"
              }
            },
            "extensionRangeOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ExtensionRangeOrBuilder"
              }
            },
            "fieldCount": {
              "type": "integer",
              "format": "int32"
            },
            "fieldList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FieldDescriptorProto"
              }
            },
            "fieldOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FieldDescriptorProtoOrBuilder"
              }
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "name": {
              "type": "string"
            },
            "nameBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "nestedTypeCount": {
              "type": "integer",
              "format": "int32"
            },
            "nestedTypeList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DescriptorProto"
              }
            },
            "oneofDeclCount": {
              "type": "integer",
              "format": "int32"
            },
            "oneofDeclList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/OneofDescriptorProto"
              }
            },
            "oneofDeclOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/OneofDescriptorProtoOrBuilder"
              }
            },
            "options": {
              "$ref": "#/components/schemas/MessageOptions"
            },
            "optionsOrBuilder": {
              "$ref": "#/components/schemas/MessageOptionsOrBuilder"
            },
            "reservedNameCount": {
              "type": "integer",
              "format": "int32"
            },
            "reservedNameList": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "reservedRangeCount": {
              "type": "integer",
              "format": "int32"
            },
            "reservedRangeList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ReservedRange"
              }
            },
            "reservedRangeOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ReservedRangeOrBuilder"
              }
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "EditionDefault": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/EditionDefault"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "edition": {
              "type": "string",
              "enum": [
                "EDITION_UNKNOWN",
                "EDITION_PROTO2",
                "EDITION_PROTO3",
                "EDITION_2023",
                "EDITION_1_TEST_ONLY",
                "EDITION_2_TEST_ONLY",
                "EDITION_99997_TEST_ONLY",
                "EDITION_99998_TEST_ONLY",
                "EDITION_99999_TEST_ONLY"
              ]
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "memoizedSerializedSize": {
              "type": "integer",
              "format": "int32",
              "writeOnly": true
            },
            "parserForType": {
              "$ref": "#/components/schemas/ParserEditionDefault"
            },
            "serializedSize": {
              "type": "integer",
              "format": "int32"
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            },
            "value": {
              "type": "string"
            },
            "valueBytes": {
              "$ref": "#/components/schemas/ByteString"
            }
          }
        },
        "EditionDefaultOrBuilder": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/Message"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "edition": {
              "type": "string",
              "enum": [
                "EDITION_UNKNOWN",
                "EDITION_PROTO2",
                "EDITION_PROTO3",
                "EDITION_2023",
                "EDITION_1_TEST_ONLY",
                "EDITION_2_TEST_ONLY",
                "EDITION_99997_TEST_ONLY",
                "EDITION_99998_TEST_ONLY",
                "EDITION_99999_TEST_ONLY"
              ]
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            },
            "value": {
              "type": "string"
            },
            "valueBytes": {
              "$ref": "#/components/schemas/ByteString"
            }
          }
        },
        "EnumDescriptor": {
          "type": "object",
          "properties": {
            "closed": {
              "type": "boolean"
            },
            "containingType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "file": {
              "$ref": "#/components/schemas/FileDescriptor"
            },
            "fullName": {
              "type": "string"
            },
            "index": {
              "type": "integer",
              "format": "int32"
            },
            "name": {
              "type": "string"
            },
            "options": {
              "$ref": "#/components/schemas/EnumOptions"
            },
            "proto": {
              "$ref": "#/components/schemas/EnumDescriptorProto"
            },
            "values": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EnumValueDescriptor"
              }
            }
          }
        },
        "EnumDescriptorProto": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/EnumDescriptorProto"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "memoizedSerializedSize": {
              "type": "integer",
              "format": "int32",
              "writeOnly": true
            },
            "name": {
              "type": "string"
            },
            "nameBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "options": {
              "$ref": "#/components/schemas/EnumOptions"
            },
            "optionsOrBuilder": {
              "$ref": "#/components/schemas/EnumOptionsOrBuilder"
            },
            "parserForType": {
              "$ref": "#/components/schemas/ParserEnumDescriptorProto"
            },
            "reservedNameCount": {
              "type": "integer",
              "format": "int32"
            },
            "reservedNameList": {
              "type": "array",
              "properties": {
                "empty": {
                  "type": "boolean"
                },
                "first": {
                  "type": "string"
                },
                "last": {
                  "type": "string"
                }
              },
              "items": {
                "type": "string"
              }
            },
            "reservedRangeCount": {
              "type": "integer",
              "format": "int32"
            },
            "reservedRangeList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EnumReservedRange"
              }
            },
            "reservedRangeOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EnumReservedRangeOrBuilder"
              }
            },
            "serializedSize": {
              "type": "integer",
              "format": "int32"
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            },
            "valueCount": {
              "type": "integer",
              "format": "int32"
            },
            "valueList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EnumValueDescriptorProto"
              }
            },
            "valueOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EnumValueDescriptorProtoOrBuilder"
              }
            }
          }
        },
        "EnumDescriptorProtoOrBuilder": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/Message"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "name": {
              "type": "string"
            },
            "nameBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "options": {
              "$ref": "#/components/schemas/EnumOptions"
            },
            "optionsOrBuilder": {
              "$ref": "#/components/schemas/EnumOptionsOrBuilder"
            },
            "reservedNameCount": {
              "type": "integer",
              "format": "int32"
            },
            "reservedNameList": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "reservedRangeCount": {
              "type": "integer",
              "format": "int32"
            },
            "reservedRangeList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EnumReservedRange"
              }
            },
            "reservedRangeOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EnumReservedRangeOrBuilder"
              }
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            },
            "valueCount": {
              "type": "integer",
              "format": "int32"
            },
            "valueList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EnumValueDescriptorProto"
              }
            },
            "valueOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EnumValueDescriptorProtoOrBuilder"
              }
            }
          }
        },
        "EnumOptions": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "allFieldsRaw": {
              "type": "object",
              "additionalProperties": {}
            },
            "allowAlias": {
              "type": "boolean"
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/EnumOptions"
            },
            "deprecated": {
              "type": "boolean"
            },
            "deprecatedLegacyJsonFieldConflicts": {
              "type": "boolean",
              "deprecated": true
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "features": {
              "$ref": "#/components/schemas/FeatureSet"
            },
            "featuresOrBuilder": {
              "$ref": "#/components/schemas/FeatureSetOrBuilder"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "memoizedSerializedSize": {
              "type": "integer",
              "format": "int32",
              "writeOnly": true
            },
            "parserForType": {
              "$ref": "#/components/schemas/ParserEnumOptions"
            },
            "serializedSize": {
              "type": "integer",
              "format": "int32"
            },
            "uninterpretedOptionCount": {
              "type": "integer",
              "format": "int32"
            },
            "uninterpretedOptionList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UninterpretedOption"
              }
            },
            "uninterpretedOptionOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UninterpretedOptionOrBuilder"
              }
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "EnumOptionsOrBuilder": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "allowAlias": {
              "type": "boolean"
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/Message"
            },
            "deprecated": {
              "type": "boolean"
            },
            "deprecatedLegacyJsonFieldConflicts": {
              "type": "boolean",
              "deprecated": true
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "features": {
              "$ref": "#/components/schemas/FeatureSet"
            },
            "featuresOrBuilder": {
              "$ref": "#/components/schemas/FeatureSetOrBuilder"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "uninterpretedOptionCount": {
              "type": "integer",
              "format": "int32"
            },
            "uninterpretedOptionList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UninterpretedOption"
              }
            },
            "uninterpretedOptionOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UninterpretedOptionOrBuilder"
              }
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "EnumReservedRange": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/EnumReservedRange"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "end": {
              "type": "integer",
              "format": "int32"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "memoizedSerializedSize": {
              "type": "integer",
              "format": "int32",
              "writeOnly": true
            },
            "parserForType": {
              "$ref": "#/components/schemas/ParserEnumReservedRange"
            },
            "serializedSize": {
              "type": "integer",
              "format": "int32"
            },
            "start": {
              "type": "integer",
              "format": "int32"
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "EnumReservedRangeOrBuilder": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/Message"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "end": {
              "type": "integer",
              "format": "int32"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "start": {
              "type": "integer",
              "format": "int32"
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "EnumValueDescriptor": {
          "type": "object",
          "properties": {
            "file": {
              "$ref": "#/components/schemas/FileDescriptor"
            },
            "fullName": {
              "type": "string"
            },
            "index": {
              "type": "integer",
              "format": "int32"
            },
            "name": {
              "type": "string"
            },
            "number": {
              "type": "integer",
              "format": "int32"
            },
            "options": {
              "$ref": "#/components/schemas/EnumValueOptions"
            },
            "proto": {
              "$ref": "#/components/schemas/EnumValueDescriptorProto"
            },
            "type": {
              "$ref": "#/components/schemas/EnumDescriptor"
            }
          }
        },
        "EnumValueDescriptorProto": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/EnumValueDescriptorProto"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "memoizedSerializedSize": {
              "type": "integer",
              "format": "int32",
              "writeOnly": true
            },
            "name": {
              "type": "string"
            },
            "nameBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "number": {
              "type": "integer",
              "format": "int32"
            },
            "options": {
              "$ref": "#/components/schemas/EnumValueOptions"
            },
            "optionsOrBuilder": {
              "$ref": "#/components/schemas/EnumValueOptionsOrBuilder"
            },
            "parserForType": {
              "$ref": "#/components/schemas/ParserEnumValueDescriptorProto"
            },
            "serializedSize": {
              "type": "integer",
              "format": "int32"
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "EnumValueDescriptorProtoOrBuilder": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/Message"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "name": {
              "type": "string"
            },
            "nameBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "number": {
              "type": "integer",
              "format": "int32"
            },
            "options": {
              "$ref": "#/components/schemas/EnumValueOptions"
            },
            "optionsOrBuilder": {
              "$ref": "#/components/schemas/EnumValueOptionsOrBuilder"
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "EnumValueOptions": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "allFieldsRaw": {
              "type": "object",
              "additionalProperties": {}
            },
            "debugRedact": {
              "type": "boolean"
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/EnumValueOptions"
            },
            "deprecated": {
              "type": "boolean"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "features": {
              "$ref": "#/components/schemas/FeatureSet"
            },
            "featuresOrBuilder": {
              "$ref": "#/components/schemas/FeatureSetOrBuilder"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "memoizedSerializedSize": {
              "type": "integer",
              "format": "int32",
              "writeOnly": true
            },
            "parserForType": {
              "$ref": "#/components/schemas/ParserEnumValueOptions"
            },
            "serializedSize": {
              "type": "integer",
              "format": "int32"
            },
            "uninterpretedOptionCount": {
              "type": "integer",
              "format": "int32"
            },
            "uninterpretedOptionList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UninterpretedOption"
              }
            },
            "uninterpretedOptionOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UninterpretedOptionOrBuilder"
              }
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "EnumValueOptionsOrBuilder": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "debugRedact": {
              "type": "boolean"
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/Message"
            },
            "deprecated": {
              "type": "boolean"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "features": {
              "$ref": "#/components/schemas/FeatureSet"
            },
            "featuresOrBuilder": {
              "$ref": "#/components/schemas/FeatureSetOrBuilder"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "uninterpretedOptionCount": {
              "type": "integer",
              "format": "int32"
            },
            "uninterpretedOptionList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UninterpretedOption"
              }
            },
            "uninterpretedOptionOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UninterpretedOptionOrBuilder"
              }
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "EnvironmentVariable": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "tags": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Tag"
              }
            },
            "value": {
              "type": "string"
            }
          }
        },
        "EventHandler": {
          "type": "object",
          "properties": {
            "actions": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Action"
              }
            },
            "active": {
              "type": "boolean"
            },
            "condition": {
              "type": "string"
            },
            "createdBy": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "evaluatorType": {
              "type": "string"
            },
            "event": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "orgId": {
              "type": "string"
            },
            "tags": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Tag"
              }
            }
          }
        },
        "EventLog": {
          "type": "object",
          "properties": {
            "createdAt": {
              "type": "integer",
              "format": "int64"
            },
            "event": {
              "type": "string"
            },
            "eventType": {
              "type": "string",
              "enum": [
                "SEND",
                "RECEIVE"
              ]
            },
            "handlerName": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "taskId": {
              "type": "string"
            },
            "workerId": {
              "type": "string"
            }
          }
        },
        "EventMessage": {
          "type": "object",
          "properties": {
            "createdAt": {
              "type": "integer",
              "format": "int64"
            },
            "eventExecutions": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ExtendedEventExecution"
              }
            },
            "eventTarget": {
              "type": "string"
            },
            "eventType": {
              "type": "string",
              "enum": [
                "WEBHOOK",
                "MESSAGE"
              ]
            },
            "fullPayload": {
              "type": "object"
            },
            "id": {
              "type": "string"
            },
            "orgId": {
              "type": "string"
            },
            "payload": {
              "type": "string"
            },
            "status": {
              "type": "string",
              "enum": [
                "RECEIVED",
                "HANDLED",
                "REJECTED"
              ]
            },
            "statusDescription": {
              "type": "string"
            }
          }
        },
        "ExtendedConductorApplication": {
          "type": "object",
          "properties": {
            "createTime": {
              "type": "integer",
              "format": "int64"
            },
            "createdBy": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "tags": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Tag"
              }
            },
            "updateTime": {
              "type": "integer",
              "format": "int64"
            },
            "updatedBy": {
              "type": "string"
            }
          }
        },
        "ExtendedEventExecution": {
          "type": "object",
          "properties": {
            "action": {
              "type": "string",
              "enum": [
                "start_workflow",
                "complete_task",
                "fail_task",
                "terminate_workflow",
                "update_workflow_variables"
              ]
            },
            "created": {
              "type": "integer",
              "format": "int64"
            },
            "event": {
              "type": "string"
            },
            "eventHandler": {
              "$ref": "#/components/schemas/EventHandler"
            },
            "fullMessagePayload": {
              "type": "object",
              "additionalProperties": {}
            },
            "id": {
              "type": "string"
            },
            "messageId": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "orgId": {
              "type": "string"
            },
            "output": {
              "type": "object",
              "additionalProperties": {}
            },
            "payload": {
              "type": "object",
              "additionalProperties": {}
            },
            "status": {
              "type": "string",
              "enum": [
                "IN_PROGRESS",
                "COMPLETED",
                "FAILED",
                "SKIPPED"
              ]
            },
            "statusDescription": {
              "type": "string"
            }
          }
        },
        "ExtendedSecret": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "tags": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Tag"
              }
            }
          }
        },
        "ExtendedTaskDef": {
          "required": [
            "name",
            "timeoutSeconds",
            "totalTimeoutSeconds"
          ],
          "type": "object",
          "properties": {
            "backoffScaleFactor": {
              "type": "integer",
              "format": "int32"
            },
            "baseType": {
              "type": "string"
            },
            "concurrentExecLimit": {
              "type": "integer",
              "format": "int32"
            },
            "createTime": {
              "type": "integer",
              "format": "int64"
            },
            "createdBy": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "enforceSchema": {
              "type": "boolean"
            },
            "executionNameSpace": {
              "type": "string"
            },
            "inputKeys": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "inputSchema": {
              "$ref": "#/components/schemas/SchemaDef"
            },
            "inputTemplate": {
              "type": "object",
              "additionalProperties": {}
            },
            "isolationGroupId": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "outputKeys": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "outputSchema": {
              "$ref": "#/components/schemas/SchemaDef"
            },
            "overwriteTags": {
              "type": "boolean"
            },
            "ownerApp": {
              "type": "string"
            },
            "ownerEmail": {
              "type": "string"
            },
            "pollTimeoutSeconds": {
              "type": "integer",
              "format": "int32"
            },
            "rateLimitFrequencyInSeconds": {
              "type": "integer",
              "format": "int32"
            },
            "rateLimitPerFrequency": {
              "type": "integer",
              "format": "int32"
            },
            "responseTimeoutSeconds": {
              "type": "integer",
              "format": "int64"
            },
            "retryCount": {
              "type": "integer",
              "format": "int32"
            },
            "retryDelaySeconds": {
              "type": "integer",
              "format": "int32"
            },
            "retryLogic": {
              "type": "string",
              "enum": [
                "FIXED",
                "EXPONENTIAL_BACKOFF",
                "LINEAR_BACKOFF"
              ]
            },
            "tags": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Tag"
              }
            },
            "timeoutPolicy": {
              "type": "string",
              "enum": [
                "RETRY",
                "TIME_OUT_WF",
                "ALERT_ONLY"
              ]
            },
            "timeoutSeconds": {
              "type": "integer",
              "format": "int64"
            },
            "totalTimeoutSeconds": {
              "type": "integer",
              "format": "int64"
            },
            "updateTime": {
              "type": "integer",
              "format": "int64"
            },
            "updatedBy": {
              "type": "string"
            }
          }
        },
        "ExtendedWorkflowDef": {
          "required": [
            "name",
            "tasks",
            "timeoutSeconds"
          ],
          "type": "object",
          "properties": {
            "cacheConfig": {
              "$ref": "#/components/schemas/CacheConfig"
            },
            "createTime": {
              "type": "integer",
              "format": "int64"
            },
            "createdBy": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "enforceSchema": {
              "type": "boolean"
            },
            "failureWorkflow": {
              "type": "string"
            },
            "inputParameters": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "inputSchema": {
              "$ref": "#/components/schemas/SchemaDef"
            },
            "inputTemplate": {
              "type": "object",
              "additionalProperties": {}
            },
            "maskedFields": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {}
            },
            "name": {
              "type": "string"
            },
            "outputParameters": {
              "type": "object",
              "additionalProperties": {}
            },
            "outputSchema": {
              "$ref": "#/components/schemas/SchemaDef"
            },
            "overwriteTags": {
              "type": "boolean"
            },
            "ownerApp": {
              "type": "string"
            },
            "ownerEmail": {
              "type": "string"
            },
            "rateLimitConfig": {
              "$ref": "#/components/schemas/RateLimitConfig"
            },
            "restartable": {
              "type": "boolean"
            },
            "schemaVersion": {
              "type": "integer",
              "format": "int32"
            },
            "tags": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Tag"
              }
            },
            "tasks": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/WorkflowTask"
              }
            },
            "timeoutPolicy": {
              "type": "string",
              "enum": [
                "TIME_OUT_WF",
                "ALERT_ONLY"
              ]
            },
            "timeoutSeconds": {
              "type": "integer",
              "format": "int64"
            },
            "updateTime": {
              "type": "integer",
              "format": "int64"
            },
            "updatedBy": {
              "type": "string"
            },
            "variables": {
              "type": "object",
              "additionalProperties": {}
            },
            "version": {
              "type": "integer",
              "format": "int32"
            },
            "workflowStatusListenerEnabled": {
              "type": "boolean"
            },
            "workflowStatusListenerSink": {
              "type": "string"
            }
          }
        },
        "ExtensionRange": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/ExtensionRange"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "end": {
              "type": "integer",
              "format": "int32"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "memoizedSerializedSize": {
              "type": "integer",
              "format": "int32",
              "writeOnly": true
            },
            "options": {
              "$ref": "#/components/schemas/ExtensionRangeOptions"
            },
            "optionsOrBuilder": {
              "$ref": "#/components/schemas/ExtensionRangeOptionsOrBuilder"
            },
            "parserForType": {
              "$ref": "#/components/schemas/ParserExtensionRange"
            },
            "serializedSize": {
              "type": "integer",
              "format": "int32"
            },
            "start": {
              "type": "integer",
              "format": "int32"
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "ExtensionRangeOptions": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "allFieldsRaw": {
              "type": "object",
              "additionalProperties": {}
            },
            "declarationCount": {
              "type": "integer",
              "format": "int32"
            },
            "declarationList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Declaration"
              }
            },
            "declarationOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DeclarationOrBuilder"
              }
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/ExtensionRangeOptions"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "features": {
              "$ref": "#/components/schemas/FeatureSet"
            },
            "featuresOrBuilder": {
              "$ref": "#/components/schemas/FeatureSetOrBuilder"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "memoizedSerializedSize": {
              "type": "integer",
              "format": "int32",
              "writeOnly": true
            },
            "parserForType": {
              "$ref": "#/components/schemas/ParserExtensionRangeOptions"
            },
            "serializedSize": {
              "type": "integer",
              "format": "int32"
            },
            "uninterpretedOptionCount": {
              "type": "integer",
              "format": "int32"
            },
            "uninterpretedOptionList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UninterpretedOption"
              }
            },
            "uninterpretedOptionOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UninterpretedOptionOrBuilder"
              }
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            },
            "verification": {
              "type": "string",
              "enum": [
                "DECLARATION",
                "UNVERIFIED"
              ]
            }
          }
        },
        "ExtensionRangeOptionsOrBuilder": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "declarationCount": {
              "type": "integer",
              "format": "int32"
            },
            "declarationList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Declaration"
              }
            },
            "declarationOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DeclarationOrBuilder"
              }
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/Message"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "features": {
              "$ref": "#/components/schemas/FeatureSet"
            },
            "featuresOrBuilder": {
              "$ref": "#/components/schemas/FeatureSetOrBuilder"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "uninterpretedOptionCount": {
              "type": "integer",
              "format": "int32"
            },
            "uninterpretedOptionList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UninterpretedOption"
              }
            },
            "uninterpretedOptionOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UninterpretedOptionOrBuilder"
              }
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            },
            "verification": {
              "type": "string",
              "enum": [
                "DECLARATION",
                "UNVERIFIED"
              ]
            }
          }
        },
        "ExtensionRangeOrBuilder": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/Message"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "end": {
              "type": "integer",
              "format": "int32"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "options": {
              "$ref": "#/components/schemas/ExtensionRangeOptions"
            },
            "optionsOrBuilder": {
              "$ref": "#/components/schemas/ExtensionRangeOptionsOrBuilder"
            },
            "start": {
              "type": "integer",
              "format": "int32"
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "FeatureSet": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "allFieldsRaw": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/FeatureSet"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "enumType": {
              "type": "string",
              "enum": [
                "ENUM_TYPE_UNKNOWN",
                "OPEN",
                "CLOSED"
              ]
            },
            "fieldPresence": {
              "type": "string",
              "enum": [
                "FIELD_PRESENCE_UNKNOWN",
                "EXPLICIT",
                "IMPLICIT",
                "LEGACY_REQUIRED"
              ]
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "jsonFormat": {
              "type": "string",
              "enum": [
                "JSON_FORMAT_UNKNOWN",
                "ALLOW",
                "LEGACY_BEST_EFFORT"
              ]
            },
            "memoizedSerializedSize": {
              "type": "integer",
              "format": "int32",
              "writeOnly": true
            },
            "messageEncoding": {
              "type": "string",
              "enum": [
                "MESSAGE_ENCODING_UNKNOWN",
                "LENGTH_PREFIXED",
                "DELIMITED"
              ]
            },
            "parserForType": {
              "$ref": "#/components/schemas/ParserFeatureSet"
            },
            "repeatedFieldEncoding": {
              "type": "string",
              "enum": [
                "REPEATED_FIELD_ENCODING_UNKNOWN",
                "PACKED",
                "EXPANDED"
              ]
            },
            "serializedSize": {
              "type": "integer",
              "format": "int32"
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            },
            "utf8Validation": {
              "type": "string",
              "enum": [
                "UTF8_VALIDATION_UNKNOWN",
                "NONE",
                "VERIFY"
              ]
            }
          }
        },
        "FeatureSetOrBuilder": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/Message"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "enumType": {
              "type": "string",
              "enum": [
                "ENUM_TYPE_UNKNOWN",
                "OPEN",
                "CLOSED"
              ]
            },
            "fieldPresence": {
              "type": "string",
              "enum": [
                "FIELD_PRESENCE_UNKNOWN",
                "EXPLICIT",
                "IMPLICIT",
                "LEGACY_REQUIRED"
              ]
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "jsonFormat": {
              "type": "string",
              "enum": [
                "JSON_FORMAT_UNKNOWN",
                "ALLOW",
                "LEGACY_BEST_EFFORT"
              ]
            },
            "messageEncoding": {
              "type": "string",
              "enum": [
                "MESSAGE_ENCODING_UNKNOWN",
                "LENGTH_PREFIXED",
                "DELIMITED"
              ]
            },
            "repeatedFieldEncoding": {
              "type": "string",
              "enum": [
                "REPEATED_FIELD_ENCODING_UNKNOWN",
                "PACKED",
                "EXPANDED"
              ]
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            },
            "utf8Validation": {
              "type": "string",
              "enum": [
                "UTF8_VALIDATION_UNKNOWN",
                "NONE",
                "VERIFY"
              ]
            }
          }
        },
        "FieldDescriptor": {
          "type": "object",
          "properties": {
            "containingOneof": {
              "$ref": "#/components/schemas/OneofDescriptor"
            },
            "containingType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "defaultValue": {
              "type": "object"
            },
            "enumType": {
              "$ref": "#/components/schemas/EnumDescriptor"
            },
            "extension": {
              "type": "boolean"
            },
            "extensionScope": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "file": {
              "$ref": "#/components/schemas/FileDescriptor"
            },
            "fullName": {
              "type": "string"
            },
            "index": {
              "type": "integer",
              "format": "int32"
            },
            "javaType": {
              "type": "string",
              "enum": [
                "INT",
                "LONG",
                "FLOAT",
                "DOUBLE",
                "BOOLEAN",
                "STRING",
                "BYTE_STRING",
                "ENUM",
                "MESSAGE"
              ]
            },
            "jsonName": {
              "type": "string"
            },
            "liteJavaType": {
              "type": "string",
              "enum": [
                "INT",
                "LONG",
                "FLOAT",
                "DOUBLE",
                "BOOLEAN",
                "STRING",
                "BYTE_STRING",
                "ENUM",
                "MESSAGE"
              ]
            },
            "liteType": {
              "type": "string",
              "enum": [
                "DOUBLE",
                "FLOAT",
                "INT64",
                "UINT64",
                "INT32",
                "FIXED64",
                "FIXED32",
                "BOOL",
                "STRING",
                "GROUP",
                "MESSAGE",
                "BYTES",
                "UINT32",
                "ENUM",
                "SFIXED32",
                "SFIXED64",
                "SINT32",
                "SINT64"
              ]
            },
            "mapField": {
              "type": "boolean"
            },
            "messageType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "name": {
              "type": "string"
            },
            "number": {
              "type": "integer",
              "format": "int32"
            },
            "optional": {
              "type": "boolean"
            },
            "options": {
              "$ref": "#/components/schemas/FieldOptions"
            },
            "packable": {
              "type": "boolean"
            },
            "packed": {
              "type": "boolean"
            },
            "proto": {
              "$ref": "#/components/schemas/FieldDescriptorProto"
            },
            "realContainingOneof": {
              "$ref": "#/components/schemas/OneofDescriptor"
            },
            "repeated": {
              "type": "boolean"
            },
            "required": {
              "type": "boolean"
            },
            "type": {
              "type": "string",
              "enum": [
                "DOUBLE",
                "FLOAT",
                "INT64",
                "UINT64",
                "INT32",
                "FIXED64",
                "FIXED32",
                "BOOL",
                "STRING",
                "GROUP",
                "MESSAGE",
                "BYTES",
                "UINT32",
                "ENUM",
                "SFIXED32",
                "SFIXED64",
                "SINT32",
                "SINT64"
              ]
            }
          }
        },
        "FieldDescriptorProto": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/FieldDescriptorProto"
            },
            "defaultValue": {
              "type": "string"
            },
            "defaultValueBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "extendee": {
              "type": "string"
            },
            "extendeeBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "jsonName": {
              "type": "string"
            },
            "jsonNameBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "label": {
              "type": "string",
              "enum": [
                "LABEL_OPTIONAL",
                "LABEL_REPEATED",
                "LABEL_REQUIRED"
              ]
            },
            "memoizedSerializedSize": {
              "type": "integer",
              "format": "int32",
              "writeOnly": true
            },
            "name": {
              "type": "string"
            },
            "nameBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "number": {
              "type": "integer",
              "format": "int32"
            },
            "oneofIndex": {
              "type": "integer",
              "format": "int32"
            },
            "options": {
              "$ref": "#/components/schemas/FieldOptions"
            },
            "optionsOrBuilder": {
              "$ref": "#/components/schemas/FieldOptionsOrBuilder"
            },
            "parserForType": {
              "$ref": "#/components/schemas/ParserFieldDescriptorProto"
            },
            "proto3Optional": {
              "type": "boolean"
            },
            "serializedSize": {
              "type": "integer",
              "format": "int32"
            },
            "type": {
              "type": "string",
              "enum": [
                "TYPE_DOUBLE",
                "TYPE_FLOAT",
                "TYPE_INT64",
                "TYPE_UINT64",
                "TYPE_INT32",
                "TYPE_FIXED64",
                "TYPE_FIXED32",
                "TYPE_BOOL",
                "TYPE_STRING",
                "TYPE_GROUP",
                "TYPE_MESSAGE",
                "TYPE_BYTES",
                "TYPE_UINT32",
                "TYPE_ENUM",
                "TYPE_SFIXED32",
                "TYPE_SFIXED64",
                "TYPE_SINT32",
                "TYPE_SINT64"
              ]
            },
            "typeName": {
              "type": "string"
            },
            "typeNameBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "FieldDescriptorProtoOrBuilder": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/Message"
            },
            "defaultValue": {
              "type": "string"
            },
            "defaultValueBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "extendee": {
              "type": "string"
            },
            "extendeeBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "jsonName": {
              "type": "string"
            },
            "jsonNameBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "label": {
              "type": "string",
              "enum": [
                "LABEL_OPTIONAL",
                "LABEL_REPEATED",
                "LABEL_REQUIRED"
              ]
            },
            "name": {
              "type": "string"
            },
            "nameBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "number": {
              "type": "integer",
              "format": "int32"
            },
            "oneofIndex": {
              "type": "integer",
              "format": "int32"
            },
            "options": {
              "$ref": "#/components/schemas/FieldOptions"
            },
            "optionsOrBuilder": {
              "$ref": "#/components/schemas/FieldOptionsOrBuilder"
            },
            "proto3Optional": {
              "type": "boolean"
            },
            "type": {
              "type": "string",
              "enum": [
                "TYPE_DOUBLE",
                "TYPE_FLOAT",
                "TYPE_INT64",
                "TYPE_UINT64",
                "TYPE_INT32",
                "TYPE_FIXED64",
                "TYPE_FIXED32",
                "TYPE_BOOL",
                "TYPE_STRING",
                "TYPE_GROUP",
                "TYPE_MESSAGE",
                "TYPE_BYTES",
                "TYPE_UINT32",
                "TYPE_ENUM",
                "TYPE_SFIXED32",
                "TYPE_SFIXED64",
                "TYPE_SINT32",
                "TYPE_SINT64"
              ]
            },
            "typeName": {
              "type": "string"
            },
            "typeNameBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "FieldOptions": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "allFieldsRaw": {
              "type": "object",
              "additionalProperties": {}
            },
            "ctype": {
              "type": "string",
              "enum": [
                "STRING",
                "CORD",
                "STRING_PIECE"
              ]
            },
            "debugRedact": {
              "type": "boolean"
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/FieldOptions"
            },
            "deprecated": {
              "type": "boolean"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "editionDefaultsCount": {
              "type": "integer",
              "format": "int32"
            },
            "editionDefaultsList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EditionDefault"
              }
            },
            "editionDefaultsOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EditionDefaultOrBuilder"
              }
            },
            "features": {
              "$ref": "#/components/schemas/FeatureSet"
            },
            "featuresOrBuilder": {
              "$ref": "#/components/schemas/FeatureSetOrBuilder"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "jstype": {
              "type": "string",
              "enum": [
                "JS_NORMAL",
                "JS_STRING",
                "JS_NUMBER"
              ]
            },
            "lazy": {
              "type": "boolean"
            },
            "memoizedSerializedSize": {
              "type": "integer",
              "format": "int32",
              "writeOnly": true
            },
            "packed": {
              "type": "boolean"
            },
            "parserForType": {
              "$ref": "#/components/schemas/ParserFieldOptions"
            },
            "retention": {
              "type": "string",
              "enum": [
                "RETENTION_UNKNOWN",
                "RETENTION_RUNTIME",
                "RETENTION_SOURCE"
              ]
            },
            "serializedSize": {
              "type": "integer",
              "format": "int32"
            },
            "targetsCount": {
              "type": "integer",
              "format": "int32"
            },
            "targetsList": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "TARGET_TYPE_UNKNOWN",
                  "TARGET_TYPE_FILE",
                  "TARGET_TYPE_EXTENSION_RANGE",
                  "TARGET_TYPE_MESSAGE",
                  "TARGET_TYPE_FIELD",
                  "TARGET_TYPE_ONEOF",
                  "TARGET_TYPE_ENUM",
                  "TARGET_TYPE_ENUM_ENTRY",
                  "TARGET_TYPE_SERVICE",
                  "TARGET_TYPE_METHOD"
                ]
              }
            },
            "uninterpretedOptionCount": {
              "type": "integer",
              "format": "int32"
            },
            "uninterpretedOptionList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UninterpretedOption"
              }
            },
            "uninterpretedOptionOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UninterpretedOptionOrBuilder"
              }
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            },
            "unverifiedLazy": {
              "type": "boolean"
            },
            "weak": {
              "type": "boolean"
            }
          }
        },
        "FieldOptionsOrBuilder": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "ctype": {
              "type": "string",
              "enum": [
                "STRING",
                "CORD",
                "STRING_PIECE"
              ]
            },
            "debugRedact": {
              "type": "boolean"
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/Message"
            },
            "deprecated": {
              "type": "boolean"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "editionDefaultsCount": {
              "type": "integer",
              "format": "int32"
            },
            "editionDefaultsList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EditionDefault"
              }
            },
            "editionDefaultsOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EditionDefaultOrBuilder"
              }
            },
            "features": {
              "$ref": "#/components/schemas/FeatureSet"
            },
            "featuresOrBuilder": {
              "$ref": "#/components/schemas/FeatureSetOrBuilder"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "jstype": {
              "type": "string",
              "enum": [
                "JS_NORMAL",
                "JS_STRING",
                "JS_NUMBER"
              ]
            },
            "lazy": {
              "type": "boolean"
            },
            "packed": {
              "type": "boolean"
            },
            "retention": {
              "type": "string",
              "enum": [
                "RETENTION_UNKNOWN",
                "RETENTION_RUNTIME",
                "RETENTION_SOURCE"
              ]
            },
            "targetsCount": {
              "type": "integer",
              "format": "int32"
            },
            "targetsList": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "TARGET_TYPE_UNKNOWN",
                  "TARGET_TYPE_FILE",
                  "TARGET_TYPE_EXTENSION_RANGE",
                  "TARGET_TYPE_MESSAGE",
                  "TARGET_TYPE_FIELD",
                  "TARGET_TYPE_ONEOF",
                  "TARGET_TYPE_ENUM",
                  "TARGET_TYPE_ENUM_ENTRY",
                  "TARGET_TYPE_SERVICE",
                  "TARGET_TYPE_METHOD"
                ]
              }
            },
            "uninterpretedOptionCount": {
              "type": "integer",
              "format": "int32"
            },
            "uninterpretedOptionList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UninterpretedOption"
              }
            },
            "uninterpretedOptionOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UninterpretedOptionOrBuilder"
              }
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            },
            "unverifiedLazy": {
              "type": "boolean"
            },
            "weak": {
              "type": "boolean"
            }
          }
        },
        "FileDescriptor": {
          "type": "object",
          "properties": {
            "dependencies": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FileDescriptor"
              }
            },
            "edition": {
              "type": "string",
              "enum": [
                "EDITION_UNKNOWN",
                "EDITION_PROTO2",
                "EDITION_PROTO3",
                "EDITION_2023",
                "EDITION_1_TEST_ONLY",
                "EDITION_2_TEST_ONLY",
                "EDITION_99997_TEST_ONLY",
                "EDITION_99998_TEST_ONLY",
                "EDITION_99999_TEST_ONLY"
              ]
            },
            "editionName": {
              "type": "string"
            },
            "enumTypes": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EnumDescriptor"
              }
            },
            "extensions": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FieldDescriptor"
              }
            },
            "file": {
              "$ref": "#/components/schemas/FileDescriptor"
            },
            "fullName": {
              "type": "string"
            },
            "messageTypes": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Descriptor"
              }
            },
            "name": {
              "type": "string"
            },
            "options": {
              "$ref": "#/components/schemas/FileOptions"
            },
            "package": {
              "type": "string"
            },
            "proto": {
              "$ref": "#/components/schemas/FileDescriptorProto"
            },
            "publicDependencies": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FileDescriptor"
              }
            },
            "services": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ServiceDescriptor"
              }
            },
            "syntax": {
              "type": "string",
              "deprecated": true,
              "enum": [
                "UNKNOWN",
                "PROTO2",
                "PROTO3",
                "EDITIONS"
              ]
            }
          }
        },
        "FileDescriptorProto": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/FileDescriptorProto"
            },
            "dependencyCount": {
              "type": "integer",
              "format": "int32"
            },
            "dependencyList": {
              "type": "array",
              "properties": {
                "empty": {
                  "type": "boolean"
                },
                "first": {
                  "type": "string"
                },
                "last": {
                  "type": "string"
                }
              },
              "items": {
                "type": "string"
              }
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "edition": {
              "type": "string",
              "enum": [
                "EDITION_UNKNOWN",
                "EDITION_PROTO2",
                "EDITION_PROTO3",
                "EDITION_2023",
                "EDITION_1_TEST_ONLY",
                "EDITION_2_TEST_ONLY",
                "EDITION_99997_TEST_ONLY",
                "EDITION_99998_TEST_ONLY",
                "EDITION_99999_TEST_ONLY"
              ]
            },
            "enumTypeCount": {
              "type": "integer",
              "format": "int32"
            },
            "enumTypeList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EnumDescriptorProto"
              }
            },
            "enumTypeOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EnumDescriptorProtoOrBuilder"
              }
            },
            "extensionCount": {
              "type": "integer",
              "format": "int32"
            },
            "extensionList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FieldDescriptorProto"
              }
            },
            "extensionOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FieldDescriptorProtoOrBuilder"
              }
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "memoizedSerializedSize": {
              "type": "integer",
              "format": "int32",
              "writeOnly": true
            },
            "messageTypeCount": {
              "type": "integer",
              "format": "int32"
            },
            "messageTypeList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DescriptorProto"
              }
            },
            "messageTypeOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DescriptorProtoOrBuilder"
              }
            },
            "name": {
              "type": "string"
            },
            "nameBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "options": {
              "$ref": "#/components/schemas/FileOptions"
            },
            "optionsOrBuilder": {
              "$ref": "#/components/schemas/FileOptionsOrBuilder"
            },
            "package": {
              "type": "string"
            },
            "packageBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "parserForType": {
              "$ref": "#/components/schemas/ParserFileDescriptorProto"
            },
            "publicDependencyCount": {
              "type": "integer",
              "format": "int32"
            },
            "publicDependencyList": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "serializedSize": {
              "type": "integer",
              "format": "int32"
            },
            "serviceCount": {
              "type": "integer",
              "format": "int32"
            },
            "serviceList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ServiceDescriptorProto"
              }
            },
            "serviceOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ServiceDescriptorProtoOrBuilder"
              }
            },
            "sourceCodeInfo": {
              "$ref": "#/components/schemas/SourceCodeInfo"
            },
            "sourceCodeInfoOrBuilder": {
              "$ref": "#/components/schemas/SourceCodeInfoOrBuilder"
            },
            "syntax": {
              "type": "string"
            },
            "syntaxBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            },
            "weakDependencyCount": {
              "type": "integer",
              "format": "int32"
            },
            "weakDependencyList": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "FileOptions": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "allFieldsRaw": {
              "type": "object",
              "additionalProperties": {}
            },
            "ccEnableArenas": {
              "type": "boolean"
            },
            "ccGenericServices": {
              "type": "boolean"
            },
            "csharpNamespace": {
              "type": "string"
            },
            "csharpNamespaceBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/FileOptions"
            },
            "deprecated": {
              "type": "boolean"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "features": {
              "$ref": "#/components/schemas/FeatureSet"
            },
            "featuresOrBuilder": {
              "$ref": "#/components/schemas/FeatureSetOrBuilder"
            },
            "goPackage": {
              "type": "string"
            },
            "goPackageBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "javaGenerateEqualsAndHash": {
              "type": "boolean",
              "deprecated": true
            },
            "javaGenericServices": {
              "type": "boolean"
            },
            "javaMultipleFiles": {
              "type": "boolean"
            },
            "javaOuterClassname": {
              "type": "string"
            },
            "javaOuterClassnameBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "javaPackage": {
              "type": "string"
            },
            "javaPackageBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "javaStringCheckUtf8": {
              "type": "boolean"
            },
            "memoizedSerializedSize": {
              "type": "integer",
              "format": "int32",
              "writeOnly": true
            },
            "objcClassPrefix": {
              "type": "string"
            },
            "objcClassPrefixBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "optimizeFor": {
              "type": "string",
              "enum": [
                "SPEED",
                "CODE_SIZE",
                "LITE_RUNTIME"
              ]
            },
            "parserForType": {
              "$ref": "#/components/schemas/ParserFileOptions"
            },
            "phpClassPrefix": {
              "type": "string"
            },
            "phpClassPrefixBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "phpGenericServices": {
              "type": "boolean"
            },
            "phpMetadataNamespace": {
              "type": "string"
            },
            "phpMetadataNamespaceBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "phpNamespace": {
              "type": "string"
            },
            "phpNamespaceBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "pyGenericServices": {
              "type": "boolean"
            },
            "rubyPackage": {
              "type": "string"
            },
            "rubyPackageBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "serializedSize": {
              "type": "integer",
              "format": "int32"
            },
            "swiftPrefix": {
              "type": "string"
            },
            "swiftPrefixBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "uninterpretedOptionCount": {
              "type": "integer",
              "format": "int32"
            },
            "uninterpretedOptionList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UninterpretedOption"
              }
            },
            "uninterpretedOptionOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UninterpretedOptionOrBuilder"
              }
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "FileOptionsOrBuilder": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "ccEnableArenas": {
              "type": "boolean"
            },
            "ccGenericServices": {
              "type": "boolean"
            },
            "csharpNamespace": {
              "type": "string"
            },
            "csharpNamespaceBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/Message"
            },
            "deprecated": {
              "type": "boolean"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "features": {
              "$ref": "#/components/schemas/FeatureSet"
            },
            "featuresOrBuilder": {
              "$ref": "#/components/schemas/FeatureSetOrBuilder"
            },
            "goPackage": {
              "type": "string"
            },
            "goPackageBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "javaGenerateEqualsAndHash": {
              "type": "boolean",
              "deprecated": true
            },
            "javaGenericServices": {
              "type": "boolean"
            },
            "javaMultipleFiles": {
              "type": "boolean"
            },
            "javaOuterClassname": {
              "type": "string"
            },
            "javaOuterClassnameBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "javaPackage": {
              "type": "string"
            },
            "javaPackageBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "javaStringCheckUtf8": {
              "type": "boolean"
            },
            "objcClassPrefix": {
              "type": "string"
            },
            "objcClassPrefixBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "optimizeFor": {
              "type": "string",
              "enum": [
                "SPEED",
                "CODE_SIZE",
                "LITE_RUNTIME"
              ]
            },
            "phpClassPrefix": {
              "type": "string"
            },
            "phpClassPrefixBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "phpGenericServices": {
              "type": "boolean"
            },
            "phpMetadataNamespace": {
              "type": "string"
            },
            "phpMetadataNamespaceBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "phpNamespace": {
              "type": "string"
            },
            "phpNamespaceBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "pyGenericServices": {
              "type": "boolean"
            },
            "rubyPackage": {
              "type": "string"
            },
            "rubyPackageBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "swiftPrefix": {
              "type": "string"
            },
            "swiftPrefixBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "uninterpretedOptionCount": {
              "type": "integer",
              "format": "int32"
            },
            "uninterpretedOptionList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UninterpretedOption"
              }
            },
            "uninterpretedOptionOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UninterpretedOptionOrBuilder"
              }
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "GenerateTokenRequest": {
          "required": [
            "keyId",
            "keySecret"
          ],
          "type": "object",
          "properties": {
            "expiration": {
              "type": "integer",
              "format": "int64"
            },
            "keyId": {
              "type": "string"
            },
            "keySecret": {
              "type": "string"
            }
          }
        },
        "GrantedAccess": {
          "type": "object",
          "properties": {
            "access": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "CREATE",
                  "READ",
                  "EXECUTE",
                  "UPDATE",
                  "DELETE"
                ]
              }
            },
            "tag": {
              "type": "string"
            },
            "target": {
              "$ref": "#/components/schemas/TargetRef"
            }
          }
        },
        "GrantedAccessResponse": {
          "type": "object",
          "properties": {
            "grantedAccess": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/GrantedAccess"
              }
            }
          }
        },
        "Group": {
          "type": "object",
          "properties": {
            "defaultAccess": {
              "type": "object",
              "additionalProperties": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "CREATE",
                    "READ",
                    "EXECUTE",
                    "UPDATE",
                    "DELETE"
                  ]
                }
              }
            },
            "description": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "roles": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Role"
              }
            }
          }
        },
        "HandledEventResponse": {
          "type": "object",
          "properties": {
            "active": {
              "type": "boolean"
            },
            "event": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "numberOfActions": {
              "type": "integer",
              "format": "int64"
            },
            "numberOfMessages": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "HumanTaskAssignment": {
          "type": "object",
          "properties": {
            "assignee": {
              "$ref": "#/components/schemas/HumanTaskUser"
            },
            "slaMinutes": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "HumanTaskDefinition": {
          "type": "object",
          "properties": {
            "assignmentCompletionStrategy": {
              "type": "string",
              "enum": [
                "LEAVE_OPEN",
                "TERMINATE"
              ]
            },
            "assignments": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/HumanTaskAssignment"
              }
            },
            "displayName": {
              "type": "string"
            },
            "fullTemplate": {
              "$ref": "#/components/schemas/HumanTaskTemplate"
            },
            "taskTriggers": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/HumanTaskTrigger"
              }
            },
            "userFormTemplate": {
              "$ref": "#/components/schemas/UserFormTemplate"
            }
          }
        },
        "HumanTaskEntry": {
          "type": "object",
          "properties": {
            "assignee": {
              "$ref": "#/components/schemas/HumanTaskUser"
            },
            "claimant": {
              "$ref": "#/components/schemas/HumanTaskUser"
            },
            "createdBy": {
              "type": "string"
            },
            "createdOn": {
              "type": "integer",
              "format": "int64"
            },
            "definitionName": {
              "type": "string"
            },
            "displayName": {
              "type": "string"
            },
            "humanTaskDef": {
              "$ref": "#/components/schemas/HumanTaskDefinition"
            },
            "input": {
              "type": "object",
              "additionalProperties": {}
            },
            "output": {
              "type": "object",
              "additionalProperties": {}
            },
            "ownerApp": {
              "type": "string"
            },
            "state": {
              "type": "string",
              "enum": [
                "PENDING",
                "ASSIGNED",
                "IN_PROGRESS",
                "COMPLETED",
                "TIMED_OUT",
                "DELETED"
              ]
            },
            "taskId": {
              "type": "string"
            },
            "taskRefName": {
              "type": "string"
            },
            "updatedBy": {
              "type": "string"
            },
            "updatedOn": {
              "type": "integer",
              "format": "int64"
            },
            "workflowId": {
              "type": "string"
            },
            "workflowName": {
              "type": "string"
            }
          }
        },
        "HumanTaskSearch": {
          "type": "object",
          "properties": {
            "assignees": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/HumanTaskUser"
              }
            },
            "claimants": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/HumanTaskUser"
              }
            },
            "definitionNames": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "displayNames": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "fullTextQuery": {
              "type": "string"
            },
            "searchType": {
              "type": "string",
              "enum": [
                "ADMIN",
                "INBOX"
              ]
            },
            "size": {
              "type": "integer",
              "format": "int32"
            },
            "start": {
              "type": "integer",
              "format": "int32"
            },
            "states": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "PENDING",
                  "ASSIGNED",
                  "IN_PROGRESS",
                  "COMPLETED",
                  "TIMED_OUT",
                  "DELETED"
                ]
              }
            },
            "taskInputQuery": {
              "type": "string"
            },
            "taskOutputQuery": {
              "type": "string"
            },
            "taskRefNames": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "updateEndTime": {
              "type": "integer",
              "format": "int64"
            },
            "updateStartTime": {
              "type": "integer",
              "format": "int64"
            },
            "workflowIds": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "workflowNames": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "HumanTaskSearchResult": {
          "type": "object",
          "properties": {
            "hits": {
              "type": "integer",
              "format": "int32"
            },
            "pageSizeLimit": {
              "type": "integer",
              "format": "int32"
            },
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/HumanTaskEntry"
              }
            },
            "start": {
              "type": "integer",
              "format": "int32"
            },
            "totalHits": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "HumanTaskTemplate": {
          "required": [
            "jsonSchema",
            "name",
            "templateUI",
            "version"
          ],
          "type": "object",
          "properties": {
            "createTime": {
              "type": "integer",
              "format": "int64"
            },
            "createdBy": {
              "type": "string"
            },
            "jsonSchema": {
              "type": "object",
              "additionalProperties": {}
            },
            "name": {
              "type": "string"
            },
            "ownerApp": {
              "type": "string"
            },
            "tags": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Tag"
              }
            },
            "templateUI": {
              "type": "object",
              "additionalProperties": {}
            },
            "updateTime": {
              "type": "integer",
              "format": "int64"
            },
            "updatedBy": {
              "type": "string"
            },
            "version": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "HumanTaskTrigger": {
          "type": "object",
          "properties": {
            "startWorkflowRequest": {
              "$ref": "#/components/schemas/StartWorkflowRequest"
            },
            "triggerType": {
              "type": "string",
              "enum": [
                "ASSIGNEE_CHANGED",
                "CLAIMANT_CHANGED",
                "PENDING",
                "IN_PROGRESS",
                "ASSIGNED",
                "COMPLETED",
                "TIMED_OUT"
              ]
            }
          }
        },
        "HumanTaskUser": {
          "type": "object",
          "properties": {
            "user": {
              "type": "string"
            },
            "userType": {
              "type": "string",
              "enum": [
                "EXTERNAL_USER",
                "EXTERNAL_GROUP",
                "CONDUCTOR_USER",
                "CONDUCTOR_GROUP"
              ]
            }
          }
        },
        "IncomingBpmnFile": {
          "required": [
            "fileContent",
            "fileName"
          ],
          "type": "object",
          "properties": {
            "fileContent": {
              "type": "string"
            },
            "fileName": {
              "type": "string"
            }
          }
        },
        "Integration": {
          "type": "object",
          "properties": {
            "apis": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/IntegrationApi"
              }
            },
            "category": {
              "type": "string",
              "enum": [
                "API",
                "AI_MODEL",
                "VECTOR_DB",
                "RELATIONAL_DB",
                "MESSAGE_BROKER",
                "GIT",
                "EMAIL",
                "MCP"
              ]
            },
            "configuration": {
              "type": "object",
              "additionalProperties": {}
            },
            "createTime": {
              "type": "integer",
              "format": "int64"
            },
            "createdBy": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "enabled": {
              "type": "boolean"
            },
            "modelsCount": {
              "type": "integer",
              "format": "int64"
            },
            "name": {
              "type": "string"
            },
            "ownerApp": {
              "type": "string"
            },
            "tags": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Tag"
              }
            },
            "type": {
              "type": "string"
            },
            "updateTime": {
              "type": "integer",
              "format": "int64"
            },
            "updatedBy": {
              "type": "string"
            }
          }
        },
        "IntegrationApi": {
          "type": "object",
          "properties": {
            "api": {
              "type": "string"
            },
            "configuration": {
              "type": "object",
              "additionalProperties": {}
            },
            "createTime": {
              "type": "integer",
              "format": "int64"
            },
            "createdBy": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "enabled": {
              "type": "boolean"
            },
            "integrationName": {
              "type": "string"
            },
            "ownerApp": {
              "type": "string"
            },
            "tags": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Tag"
              }
            },
            "updateTime": {
              "type": "integer",
              "format": "int64"
            },
            "updatedBy": {
              "type": "string"
            }
          }
        },
        "IntegrationApiUpdate": {
          "type": "object",
          "properties": {
            "configuration": {
              "type": "object",
              "additionalProperties": {}
            },
            "description": {
              "type": "string"
            },
            "enabled": {
              "type": "boolean"
            }
          }
        },
        "IntegrationDef": {
          "type": "object",
          "properties": {
            "apis": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/IntegrationDefApi"
              }
            },
            "category": {
              "type": "string",
              "enum": [
                "API",
                "AI_MODEL",
                "VECTOR_DB",
                "RELATIONAL_DB",
                "MESSAGE_BROKER",
                "GIT",
                "EMAIL",
                "MCP"
              ]
            },
            "categoryLabel": {
              "type": "string"
            },
            "configuration": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/IntegrationDefFormField"
              }
            },
            "description": {
              "type": "string"
            },
            "enabled": {
              "type": "boolean"
            },
            "iconName": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "tags": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "type": {
              "type": "string"
            }
          }
        },
        "IntegrationDefApi": {
          "type": "object",
          "properties": {
            "api": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "inputSchema": {
              "$ref": "#/components/schemas/SchemaDef"
            },
            "integrationType": {
              "type": "string"
            },
            "outputSchema": {
              "$ref": "#/components/schemas/SchemaDef"
            }
          }
        },
        "IntegrationDefFormField": {
          "type": "object",
          "properties": {
            "defaultValue": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "fieldName": {
              "type": "string",
              "enum": [
                "api_key",
                "user",
                "endpoint",
                "authUrl",
                "environment",
                "projectName",
                "indexName",
                "publisher",
                "password",
                "namespace",
                "batchSize",
                "batchWaitTime",
                "visibilityTimeout",
                "connectionType",
                "connectionPoolSize",
                "consumer",
                "stream",
                "batchPollConsumersCount",
                "consumer_type",
                "region",
                "awsAccountId",
                "externalId",
                "roleArn",
                "protocol",
                "mechanism",
                "port",
                "schemaRegistryUrl",
                "schemaRegistryApiKey",
                "schemaRegistryApiSecret",
                "authenticationType",
                "truststoreAuthenticationType",
                "tls",
                "cipherSuite",
                "pubSubMethod",
                "keyStorePassword",
                "keyStoreLocation",
                "schemaRegistryAuthType",
                "valueSubjectNameStrategy",
                "datasourceURL",
                "jdbcDriver",
                "subscription",
                "serviceAccountCredentials",
                "file",
                "tlsFile",
                "queueManager",
                "groupId",
                "channel",
                "dimensions",
                "distance_metric",
                "indexing_method",
                "inverted_list_count",
                "pullPeriod",
                "pullBatchWaitMillis",
                "completionsPath",
                "betaVersion",
                "version"
              ]
            },
            "fieldType": {
              "type": "string",
              "enum": [
                "DROPDOWN",
                "TEXT",
                "PASSWORD",
                "FILE"
              ]
            },
            "label": {
              "type": "string"
            },
            "optional": {
              "type": "boolean"
            },
            "value": {
              "type": "string"
            },
            "valueOptions": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Option"
              }
            }
          }
        },
        "IntegrationUpdate": {
          "type": "object",
          "properties": {
            "category": {
              "type": "string",
              "enum": [
                "API",
                "AI_MODEL",
                "VECTOR_DB",
                "RELATIONAL_DB",
                "MESSAGE_BROKER",
                "GIT",
                "EMAIL",
                "MCP"
              ]
            },
            "configuration": {
              "type": "object",
              "additionalProperties": {}
            },
            "description": {
              "type": "string"
            },
            "enabled": {
              "type": "boolean"
            },
            "type": {
              "type": "string"
            }
          }
        },
        "Location": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/Location"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "leadingComments": {
              "type": "string"
            },
            "leadingCommentsBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "leadingDetachedCommentsCount": {
              "type": "integer",
              "format": "int32"
            },
            "leadingDetachedCommentsList": {
              "type": "array",
              "properties": {
                "empty": {
                  "type": "boolean"
                },
                "first": {
                  "type": "string"
                },
                "last": {
                  "type": "string"
                }
              },
              "items": {
                "type": "string"
              }
            },
            "memoizedSerializedSize": {
              "type": "integer",
              "format": "int32",
              "writeOnly": true
            },
            "parserForType": {
              "$ref": "#/components/schemas/ParserLocation"
            },
            "pathCount": {
              "type": "integer",
              "format": "int32"
            },
            "pathList": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "serializedSize": {
              "type": "integer",
              "format": "int32"
            },
            "spanCount": {
              "type": "integer",
              "format": "int32"
            },
            "spanList": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "trailingComments": {
              "type": "string"
            },
            "trailingCommentsBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "LocationOrBuilder": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/Message"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "leadingComments": {
              "type": "string"
            },
            "leadingCommentsBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "leadingDetachedCommentsCount": {
              "type": "integer",
              "format": "int32"
            },
            "leadingDetachedCommentsList": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "pathCount": {
              "type": "integer",
              "format": "int32"
            },
            "pathList": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "spanCount": {
              "type": "integer",
              "format": "int32"
            },
            "spanList": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "trailingComments": {
              "type": "string"
            },
            "trailingCommentsBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "Message": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/MessageLite"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "parserForType": {
              "$ref": "#/components/schemas/ParserMessage"
            },
            "serializedSize": {
              "type": "integer",
              "format": "int32"
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "MessageLite": {
          "type": "object",
          "properties": {
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/MessageLite"
            },
            "initialized": {
              "type": "boolean"
            },
            "parserForType": {
              "$ref": "#/components/schemas/ParserMessageLite"
            },
            "serializedSize": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "MessageOptions": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "allFieldsRaw": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/MessageOptions"
            },
            "deprecated": {
              "type": "boolean"
            },
            "deprecatedLegacyJsonFieldConflicts": {
              "type": "boolean",
              "deprecated": true
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "features": {
              "$ref": "#/components/schemas/FeatureSet"
            },
            "featuresOrBuilder": {
              "$ref": "#/components/schemas/FeatureSetOrBuilder"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "mapEntry": {
              "type": "boolean"
            },
            "memoizedSerializedSize": {
              "type": "integer",
              "format": "int32",
              "writeOnly": true
            },
            "messageSetWireFormat": {
              "type": "boolean"
            },
            "noStandardDescriptorAccessor": {
              "type": "boolean"
            },
            "parserForType": {
              "$ref": "#/components/schemas/ParserMessageOptions"
            },
            "serializedSize": {
              "type": "integer",
              "format": "int32"
            },
            "uninterpretedOptionCount": {
              "type": "integer",
              "format": "int32"
            },
            "uninterpretedOptionList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UninterpretedOption"
              }
            },
            "uninterpretedOptionOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UninterpretedOptionOrBuilder"
              }
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "MessageOptionsOrBuilder": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/Message"
            },
            "deprecated": {
              "type": "boolean"
            },
            "deprecatedLegacyJsonFieldConflicts": {
              "type": "boolean",
              "deprecated": true
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "features": {
              "$ref": "#/components/schemas/FeatureSet"
            },
            "featuresOrBuilder": {
              "$ref": "#/components/schemas/FeatureSetOrBuilder"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "mapEntry": {
              "type": "boolean"
            },
            "messageSetWireFormat": {
              "type": "boolean"
            },
            "noStandardDescriptorAccessor": {
              "type": "boolean"
            },
            "uninterpretedOptionCount": {
              "type": "integer",
              "format": "int32"
            },
            "uninterpretedOptionList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UninterpretedOption"
              }
            },
            "uninterpretedOptionOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UninterpretedOptionOrBuilder"
              }
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "MessageTemplate": {
          "type": "object",
          "properties": {
            "createTime": {
              "type": "integer",
              "format": "int64"
            },
            "createdBy": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "integrations": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "name": {
              "type": "string"
            },
            "ownerApp": {
              "type": "string"
            },
            "tags": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Tag"
              }
            },
            "template": {
              "type": "string"
            },
            "updateTime": {
              "type": "integer",
              "format": "int64"
            },
            "updatedBy": {
              "type": "string"
            },
            "variables": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "version": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "MethodDescriptor": {
          "type": "object",
          "properties": {
            "clientStreaming": {
              "type": "boolean"
            },
            "file": {
              "$ref": "#/components/schemas/FileDescriptor"
            },
            "fullName": {
              "type": "string"
            },
            "index": {
              "type": "integer",
              "format": "int32"
            },
            "inputType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "name": {
              "type": "string"
            },
            "options": {
              "$ref": "#/components/schemas/MethodOptions"
            },
            "outputType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "proto": {
              "$ref": "#/components/schemas/MethodDescriptorProto"
            },
            "serverStreaming": {
              "type": "boolean"
            },
            "service": {
              "$ref": "#/components/schemas/ServiceDescriptor"
            }
          }
        },
        "MethodDescriptorProto": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "clientStreaming": {
              "type": "boolean"
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/MethodDescriptorProto"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "inputType": {
              "type": "string"
            },
            "inputTypeBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "memoizedSerializedSize": {
              "type": "integer",
              "format": "int32",
              "writeOnly": true
            },
            "name": {
              "type": "string"
            },
            "nameBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "options": {
              "$ref": "#/components/schemas/MethodOptions"
            },
            "optionsOrBuilder": {
              "$ref": "#/components/schemas/MethodOptionsOrBuilder"
            },
            "outputType": {
              "type": "string"
            },
            "outputTypeBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "parserForType": {
              "$ref": "#/components/schemas/ParserMethodDescriptorProto"
            },
            "serializedSize": {
              "type": "integer",
              "format": "int32"
            },
            "serverStreaming": {
              "type": "boolean"
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "MethodDescriptorProtoOrBuilder": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "clientStreaming": {
              "type": "boolean"
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/Message"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "inputType": {
              "type": "string"
            },
            "inputTypeBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "name": {
              "type": "string"
            },
            "nameBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "options": {
              "$ref": "#/components/schemas/MethodOptions"
            },
            "optionsOrBuilder": {
              "$ref": "#/components/schemas/MethodOptionsOrBuilder"
            },
            "outputType": {
              "type": "string"
            },
            "outputTypeBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "serverStreaming": {
              "type": "boolean"
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "MethodOptions": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "allFieldsRaw": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/MethodOptions"
            },
            "deprecated": {
              "type": "boolean"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "features": {
              "$ref": "#/components/schemas/FeatureSet"
            },
            "featuresOrBuilder": {
              "$ref": "#/components/schemas/FeatureSetOrBuilder"
            },
            "idempotencyLevel": {
              "type": "string",
              "enum": [
                "IDEMPOTENCY_UNKNOWN",
                "NO_SIDE_EFFECTS",
                "IDEMPOTENT"
              ]
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "memoizedSerializedSize": {
              "type": "integer",
              "format": "int32",
              "writeOnly": true
            },
            "parserForType": {
              "$ref": "#/components/schemas/ParserMethodOptions"
            },
            "serializedSize": {
              "type": "integer",
              "format": "int32"
            },
            "uninterpretedOptionCount": {
              "type": "integer",
              "format": "int32"
            },
            "uninterpretedOptionList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UninterpretedOption"
              }
            },
            "uninterpretedOptionOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UninterpretedOptionOrBuilder"
              }
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "MethodOptionsOrBuilder": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/Message"
            },
            "deprecated": {
              "type": "boolean"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "features": {
              "$ref": "#/components/schemas/FeatureSet"
            },
            "featuresOrBuilder": {
              "$ref": "#/components/schemas/FeatureSetOrBuilder"
            },
            "idempotencyLevel": {
              "type": "string",
              "enum": [
                "IDEMPOTENCY_UNKNOWN",
                "NO_SIDE_EFFECTS",
                "IDEMPOTENT"
              ]
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "uninterpretedOptionCount": {
              "type": "integer",
              "format": "int32"
            },
            "uninterpretedOptionList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UninterpretedOption"
              }
            },
            "uninterpretedOptionOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UninterpretedOptionOrBuilder"
              }
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "NamePart": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/NamePart"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "isExtension": {
              "type": "boolean"
            },
            "memoizedSerializedSize": {
              "type": "integer",
              "format": "int32",
              "writeOnly": true
            },
            "namePart": {
              "type": "string"
            },
            "namePartBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "parserForType": {
              "$ref": "#/components/schemas/ParserNamePart"
            },
            "serializedSize": {
              "type": "integer",
              "format": "int32"
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "NamePartOrBuilder": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/Message"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "isExtension": {
              "type": "boolean"
            },
            "namePart": {
              "type": "string"
            },
            "namePartBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "OneofDescriptor": {
          "type": "object",
          "properties": {
            "containingType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "fieldCount": {
              "type": "integer",
              "format": "int32"
            },
            "file": {
              "$ref": "#/components/schemas/FileDescriptor"
            },
            "fullName": {
              "type": "string"
            },
            "index": {
              "type": "integer",
              "format": "int32"
            },
            "name": {
              "type": "string"
            },
            "options": {
              "$ref": "#/components/schemas/OneofOptions"
            },
            "proto": {
              "$ref": "#/components/schemas/OneofDescriptorProto"
            },
            "synthetic": {
              "type": "boolean",
              "deprecated": true
            }
          }
        },
        "OneofDescriptorProto": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/OneofDescriptorProto"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "memoizedSerializedSize": {
              "type": "integer",
              "format": "int32",
              "writeOnly": true
            },
            "name": {
              "type": "string"
            },
            "nameBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "options": {
              "$ref": "#/components/schemas/OneofOptions"
            },
            "optionsOrBuilder": {
              "$ref": "#/components/schemas/OneofOptionsOrBuilder"
            },
            "parserForType": {
              "$ref": "#/components/schemas/ParserOneofDescriptorProto"
            },
            "serializedSize": {
              "type": "integer",
              "format": "int32"
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "OneofDescriptorProtoOrBuilder": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/Message"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "name": {
              "type": "string"
            },
            "nameBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "options": {
              "$ref": "#/components/schemas/OneofOptions"
            },
            "optionsOrBuilder": {
              "$ref": "#/components/schemas/OneofOptionsOrBuilder"
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "OneofOptions": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "allFieldsRaw": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/OneofOptions"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "features": {
              "$ref": "#/components/schemas/FeatureSet"
            },
            "featuresOrBuilder": {
              "$ref": "#/components/schemas/FeatureSetOrBuilder"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "memoizedSerializedSize": {
              "type": "integer",
              "format": "int32",
              "writeOnly": true
            },
            "parserForType": {
              "$ref": "#/components/schemas/ParserOneofOptions"
            },
            "serializedSize": {
              "type": "integer",
              "format": "int32"
            },
            "uninterpretedOptionCount": {
              "type": "integer",
              "format": "int32"
            },
            "uninterpretedOptionList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UninterpretedOption"
              }
            },
            "uninterpretedOptionOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UninterpretedOptionOrBuilder"
              }
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "OneofOptionsOrBuilder": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/Message"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "features": {
              "$ref": "#/components/schemas/FeatureSet"
            },
            "featuresOrBuilder": {
              "$ref": "#/components/schemas/FeatureSetOrBuilder"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "uninterpretedOptionCount": {
              "type": "integer",
              "format": "int32"
            },
            "uninterpretedOptionList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UninterpretedOption"
              }
            },
            "uninterpretedOptionOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UninterpretedOptionOrBuilder"
              }
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "Option": {
          "type": "object",
          "properties": {
            "label": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          }
        },
        "OrkesCircuitBreakerConfig": {
          "type": "object",
          "properties": {
            "automaticTransitionFromOpenToHalfOpenEnabled": {
              "type": "boolean"
            },
            "failureRateThreshold": {
              "type": "number",
              "format": "float"
            },
            "maxWaitDurationInHalfOpenState": {
              "type": "integer",
              "format": "int64"
            },
            "minimumNumberOfCalls": {
              "type": "integer",
              "format": "int32"
            },
            "permittedNumberOfCallsInHalfOpenState": {
              "type": "integer",
              "format": "int32"
            },
            "slidingWindowSize": {
              "type": "integer",
              "format": "int32"
            },
            "slowCallDurationThreshold": {
              "type": "integer",
              "format": "int64"
            },
            "slowCallRateThreshold": {
              "type": "number",
              "format": "float"
            },
            "waitDurationInOpenState": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "Parser": {
          "type": "object"
        },
        "ParserAny": {
          "type": "object"
        },
        "ParserDeclaration": {
          "type": "object"
        },
        "ParserDescriptorProto": {
          "type": "object"
        },
        "ParserEditionDefault": {
          "type": "object"
        },
        "ParserEnumDescriptorProto": {
          "type": "object"
        },
        "ParserEnumOptions": {
          "type": "object"
        },
        "ParserEnumReservedRange": {
          "type": "object"
        },
        "ParserEnumValueDescriptorProto": {
          "type": "object"
        },
        "ParserEnumValueOptions": {
          "type": "object"
        },
        "ParserExtensionRange": {
          "type": "object"
        },
        "ParserExtensionRangeOptions": {
          "type": "object"
        },
        "ParserFeatureSet": {
          "type": "object"
        },
        "ParserFieldDescriptorProto": {
          "type": "object"
        },
        "ParserFieldOptions": {
          "type": "object"
        },
        "ParserFileDescriptorProto": {
          "type": "object"
        },
        "ParserFileOptions": {
          "type": "object"
        },
        "ParserLocation": {
          "type": "object"
        },
        "ParserMessage": {
          "type": "object"
        },
        "ParserMessageLite": {
          "type": "object"
        },
        "ParserMessageOptions": {
          "type": "object"
        },
        "ParserMethodDescriptorProto": {
          "type": "object"
        },
        "ParserMethodOptions": {
          "type": "object"
        },
        "ParserNamePart": {
          "type": "object"
        },
        "ParserOneofDescriptorProto": {
          "type": "object"
        },
        "ParserOneofOptions": {
          "type": "object"
        },
        "ParserReservedRange": {
          "type": "object"
        },
        "ParserServiceDescriptorProto": {
          "type": "object"
        },
        "ParserServiceOptions": {
          "type": "object"
        },
        "ParserSourceCodeInfo": {
          "type": "object"
        },
        "ParserUninterpretedOption": {
          "type": "object"
        },
        "Permission": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            }
          }
        },
        "PollData": {
          "type": "object",
          "properties": {
            "domain": {
              "type": "string"
            },
            "lastPollTime": {
              "type": "integer",
              "format": "int64"
            },
            "queueName": {
              "type": "string"
            },
            "workerId": {
              "type": "string"
            }
          }
        },
        "PromptTemplateTestRequest": {
          "type": "object",
          "properties": {
            "llmProvider": {
              "type": "string"
            },
            "model": {
              "type": "string"
            },
            "prompt": {
              "type": "string"
            },
            "promptVariables": {
              "type": "object",
              "additionalProperties": {}
            },
            "stopWords": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "temperature": {
              "type": "number",
              "format": "double"
            },
            "topP": {
              "type": "number",
              "format": "double"
            }
          }
        },
        "ProtoRegistryEntry": {
          "type": "object",
          "properties": {
            "data": {
              "type": "string",
              "format": "byte"
            },
            "filename": {
              "type": "string"
            },
            "serviceName": {
              "type": "string"
            }
          }
        },
        "RateLimitConfig": {
          "type": "object",
          "properties": {
            "concurrentExecLimit": {
              "type": "integer",
              "format": "int32"
            },
            "rateLimitKey": {
              "type": "string"
            }
          }
        },
        "RequestParam": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "required": {
              "type": "boolean"
            },
            "schema": {
              "$ref": "#/components/schemas/Schema"
            },
            "type": {
              "type": "string"
            }
          }
        },
        "RerunWorkflowRequest": {
          "type": "object",
          "properties": {
            "correlationId": {
              "type": "string"
            },
            "reRunFromTaskId": {
              "type": "string"
            },
            "reRunFromWorkflowId": {
              "type": "string"
            },
            "taskInput": {
              "type": "object",
              "additionalProperties": {}
            },
            "workflowInput": {
              "type": "object",
              "additionalProperties": {}
            }
          }
        },
        "ReservedRange": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/ReservedRange"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "end": {
              "type": "integer",
              "format": "int32"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "memoizedSerializedSize": {
              "type": "integer",
              "format": "int32",
              "writeOnly": true
            },
            "parserForType": {
              "$ref": "#/components/schemas/ParserReservedRange"
            },
            "serializedSize": {
              "type": "integer",
              "format": "int32"
            },
            "start": {
              "type": "integer",
              "format": "int32"
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "ReservedRangeOrBuilder": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/Message"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "end": {
              "type": "integer",
              "format": "int32"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "start": {
              "type": "integer",
              "format": "int32"
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "Response": {
          "type": "object"
        },
        "Role": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "permissions": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Permission"
              }
            }
          }
        },
        "SaveScheduleRequest": {
          "required": [
            "cronExpression",
            "name",
            "startWorkflowRequest"
          ],
          "type": "object",
          "properties": {
            "createdBy": {
              "type": "string"
            },
            "cronExpression": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "paused": {
              "type": "boolean"
            },
            "runCatchupScheduleInstances": {
              "type": "boolean"
            },
            "scheduleEndTime": {
              "type": "integer",
              "format": "int64"
            },
            "scheduleStartTime": {
              "type": "integer",
              "format": "int64"
            },
            "startWorkflowRequest": {
              "$ref": "#/components/schemas/StartWorkflowRequest"
            },
            "updatedBy": {
              "type": "string"
            },
            "zoneId": {
              "type": "string"
            }
          }
        },
        "Schema": {
          "type": "object",
          "properties": {
            "defaultValue": {
              "type": "object"
            },
            "format": {
              "type": "string"
            },
            "type": {
              "type": "string"
            }
          }
        },
        "SchemaDef": {
          "required": [
            "name",
            "type",
            "version"
          ],
          "type": "object",
          "properties": {
            "createTime": {
              "type": "integer",
              "format": "int64"
            },
            "createdBy": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": {}
            },
            "externalRef": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "ownerApp": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "JSON",
                "AVRO",
                "PROTOBUF"
              ]
            },
            "updateTime": {
              "type": "integer",
              "format": "int64"
            },
            "updatedBy": {
              "type": "string"
            },
            "version": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "ScrollableSearchResultWorkflowSummary": {
          "type": "object",
          "properties": {
            "queryId": {
              "type": "string"
            },
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/WorkflowSummary"
              }
            },
            "totalHits": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "SearchResultHandledEventResponse": {
          "type": "object",
          "properties": {
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/HandledEventResponse"
              }
            },
            "totalHits": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "SearchResultTaskSummary": {
          "type": "object",
          "properties": {
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TaskSummary"
              }
            },
            "totalHits": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "SearchResultWorkflowScheduleExecutionModel": {
          "type": "object",
          "properties": {
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/WorkflowScheduleExecutionModel"
              }
            },
            "totalHits": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "ServiceDescriptor": {
          "type": "object",
          "properties": {
            "file": {
              "$ref": "#/components/schemas/FileDescriptor"
            },
            "fullName": {
              "type": "string"
            },
            "index": {
              "type": "integer",
              "format": "int32"
            },
            "methods": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MethodDescriptor"
              }
            },
            "name": {
              "type": "string"
            },
            "options": {
              "$ref": "#/components/schemas/ServiceOptions"
            },
            "proto": {
              "$ref": "#/components/schemas/ServiceDescriptorProto"
            }
          }
        },
        "ServiceDescriptorProto": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/ServiceDescriptorProto"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "memoizedSerializedSize": {
              "type": "integer",
              "format": "int32",
              "writeOnly": true
            },
            "methodCount": {
              "type": "integer",
              "format": "int32"
            },
            "methodList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MethodDescriptorProto"
              }
            },
            "methodOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MethodDescriptorProtoOrBuilder"
              }
            },
            "name": {
              "type": "string"
            },
            "nameBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "options": {
              "$ref": "#/components/schemas/ServiceOptions"
            },
            "optionsOrBuilder": {
              "$ref": "#/components/schemas/ServiceOptionsOrBuilder"
            },
            "parserForType": {
              "$ref": "#/components/schemas/ParserServiceDescriptorProto"
            },
            "serializedSize": {
              "type": "integer",
              "format": "int32"
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "ServiceDescriptorProtoOrBuilder": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/Message"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "methodCount": {
              "type": "integer",
              "format": "int32"
            },
            "methodList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MethodDescriptorProto"
              }
            },
            "methodOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MethodDescriptorProtoOrBuilder"
              }
            },
            "name": {
              "type": "string"
            },
            "nameBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "options": {
              "$ref": "#/components/schemas/ServiceOptions"
            },
            "optionsOrBuilder": {
              "$ref": "#/components/schemas/ServiceOptionsOrBuilder"
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "ServiceMethod": {
          "type": "object",
          "properties": {
            "exampleInput": {
              "type": "object",
              "additionalProperties": {}
            },
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "inputType": {
              "type": "string"
            },
            "methodName": {
              "type": "string"
            },
            "methodType": {
              "type": "string"
            },
            "operationName": {
              "type": "string"
            },
            "outputType": {
              "type": "string"
            },
            "requestParams": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RequestParam"
              }
            }
          }
        },
        "ServiceOptions": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "allFieldsRaw": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/ServiceOptions"
            },
            "deprecated": {
              "type": "boolean"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "features": {
              "$ref": "#/components/schemas/FeatureSet"
            },
            "featuresOrBuilder": {
              "$ref": "#/components/schemas/FeatureSetOrBuilder"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "memoizedSerializedSize": {
              "type": "integer",
              "format": "int32",
              "writeOnly": true
            },
            "parserForType": {
              "$ref": "#/components/schemas/ParserServiceOptions"
            },
            "serializedSize": {
              "type": "integer",
              "format": "int32"
            },
            "uninterpretedOptionCount": {
              "type": "integer",
              "format": "int32"
            },
            "uninterpretedOptionList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UninterpretedOption"
              }
            },
            "uninterpretedOptionOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UninterpretedOptionOrBuilder"
              }
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "ServiceOptionsOrBuilder": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/Message"
            },
            "deprecated": {
              "type": "boolean"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "features": {
              "$ref": "#/components/schemas/FeatureSet"
            },
            "featuresOrBuilder": {
              "$ref": "#/components/schemas/FeatureSetOrBuilder"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "uninterpretedOptionCount": {
              "type": "integer",
              "format": "int32"
            },
            "uninterpretedOptionList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UninterpretedOption"
              }
            },
            "uninterpretedOptionOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UninterpretedOptionOrBuilder"
              }
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "ServiceRegistry": {
          "type": "object",
          "properties": {
            "circuitBreakerEnabled": {
              "type": "boolean"
            },
            "config": {
              "$ref": "#/components/schemas/Config"
            },
            "methods": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ServiceMethod"
              }
            },
            "name": {
              "type": "string"
            },
            "requestParams": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RequestParam"
              }
            },
            "serviceURI": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "HTTP",
                "gRPC",
                "MCP_REMOTE"
              ]
            }
          }
        },
        "SignalResponse": {
          "type": "object",
          "properties": {
            "correlationId": {
              "type": "string"
            },
            "input": {
              "type": "object",
              "additionalProperties": {}
            },
            "output": {
              "type": "object",
              "additionalProperties": {}
            },
            "requestId": {
              "type": "string"
            },
            "responseType": {
              "type": "string",
              "enum": [
                "TARGET_WORKFLOW",
                "BLOCKING_WORKFLOW",
                "BLOCKING_TASK",
                "BLOCKING_TASK_INPUT"
              ]
            },
            "targetWorkflowId": {
              "type": "string"
            },
            "targetWorkflowStatus": {
              "type": "string"
            },
            "workflowId": {
              "type": "string"
            }
          }
        },
        "SkipTaskRequest": {
          "type": "object",
          "properties": {
            "taskInput": {
              "type": "object",
              "additionalProperties": {}
            },
            "taskOutput": {
              "type": "object",
              "additionalProperties": {}
            }
          }
        },
        "SourceCodeInfo": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/SourceCodeInfo"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "locationCount": {
              "type": "integer",
              "format": "int32"
            },
            "locationList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Location"
              }
            },
            "locationOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LocationOrBuilder"
              }
            },
            "memoizedSerializedSize": {
              "type": "integer",
              "format": "int32",
              "writeOnly": true
            },
            "parserForType": {
              "$ref": "#/components/schemas/ParserSourceCodeInfo"
            },
            "serializedSize": {
              "type": "integer",
              "format": "int32"
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "SourceCodeInfoOrBuilder": {
          "type": "object",
          "properties": {
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/Message"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "locationCount": {
              "type": "integer",
              "format": "int32"
            },
            "locationList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Location"
              }
            },
            "locationOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LocationOrBuilder"
              }
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "StartWorkflowRequest": {
          "required": [
            "name"
          ],
          "type": "object",
          "properties": {
            "correlationId": {
              "type": "string"
            },
            "createdBy": {
              "type": "string"
            },
            "externalInputPayloadStoragePath": {
              "type": "string"
            },
            "idempotencyKey": {
              "type": "string"
            },
            "idempotencyStrategy": {
              "type": "string",
              "enum": [
                "FAIL",
                "RETURN_EXISTING",
                "FAIL_ON_RUNNING"
              ]
            },
            "input": {
              "type": "object",
              "additionalProperties": {}
            },
            "name": {
              "type": "string"
            },
            "priority": {
              "type": "integer",
              "format": "int32"
            },
            "taskToDomain": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "version": {
              "type": "integer",
              "format": "int32"
            },
            "workflowDef": {
              "$ref": "#/components/schemas/WorkflowDef"
            }
          }
        },
        "StateChangeEvent": {
          "required": [
            "type"
          ],
          "type": "object",
          "properties": {
            "payload": {
              "type": "object",
              "additionalProperties": {}
            },
            "type": {
              "type": "string"
            }
          }
        },
        "SubWorkflowParams": {
          "type": "object",
          "properties": {
            "idempotencyKey": {
              "type": "string"
            },
            "idempotencyStrategy": {
              "type": "string",
              "enum": [
                "FAIL",
                "RETURN_EXISTING",
                "FAIL_ON_RUNNING"
              ]
            },
            "name": {
              "type": "string"
            },
            "priority": {
              "type": "object"
            },
            "taskToDomain": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "version": {
              "type": "integer",
              "format": "int32"
            },
            "workflowDefinition": {
              "type": "object"
            }
          }
        },
        "SubjectRef": {
          "required": [
            "id"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "description": "User, role or group",
              "enum": [
                "USER",
                "ROLE",
                "GROUP"
              ]
            }
          },
          "description": "User, group or role which is granted/removed access"
        },
        "Tag": {
          "type": "object",
          "properties": {
            "key": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "deprecated": true
            },
            "value": {
              "type": "string"
            }
          }
        },
        "TargetRef": {
          "required": [
            "id",
            "type"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "enum": [
                "Identifier of the target e.g. `name` in case it's a WORKFLOW_DEF"
              ]
            },
            "type": {
              "type": "string",
              "enum": [
                "WORKFLOW",
                "WORKFLOW_DEF",
                "WORKFLOW_SCHEDULE",
                "EVENT_HANDLER",
                "TASK_DEF",
                "TASK_REF_NAME",
                "TASK_ID",
                "APPLICATION",
                "USER",
                "SECRET_NAME",
                "ENV_VARIABLE",
                "TAG",
                "DOMAIN",
                "INTEGRATION_PROVIDER",
                "INTEGRATION",
                "PROMPT",
                "USER_FORM_TEMPLATE",
                "SCHEMA",
                "CLUSTER_CONFIG",
                "WEBHOOK"
              ]
            }
          },
          "description": "The object over which access is being granted or removed"
        },
        "Task": {
          "type": "object",
          "properties": {
            "callbackAfterSeconds": {
              "type": "integer",
              "format": "int64"
            },
            "callbackFromWorker": {
              "type": "boolean"
            },
            "correlationId": {
              "type": "string"
            },
            "domain": {
              "type": "string"
            },
            "endTime": {
              "type": "integer",
              "format": "int64"
            },
            "executed": {
              "type": "boolean"
            },
            "executionNameSpace": {
              "type": "string"
            },
            "externalInputPayloadStoragePath": {
              "type": "string"
            },
            "externalOutputPayloadStoragePath": {
              "type": "string"
            },
            "firstStartTime": {
              "type": "integer",
              "format": "int64"
            },
            "inputData": {
              "type": "object",
              "additionalProperties": {}
            },
            "isolationGroupId": {
              "type": "string"
            },
            "iteration": {
              "type": "integer",
              "format": "int32"
            },
            "loopOverTask": {
              "type": "boolean"
            },
            "outputData": {
              "type": "object",
              "additionalProperties": {}
            },
            "parentTaskId": {
              "type": "string"
            },
            "pollCount": {
              "type": "integer",
              "format": "int32"
            },
            "queueWaitTime": {
              "type": "integer",
              "format": "int64"
            },
            "rateLimitFrequencyInSeconds": {
              "type": "integer",
              "format": "int32"
            },
            "rateLimitPerFrequency": {
              "type": "integer",
              "format": "int32"
            },
            "reasonForIncompletion": {
              "type": "string"
            },
            "referenceTaskName": {
              "type": "string"
            },
            "responseTimeoutSeconds": {
              "type": "integer",
              "format": "int64"
            },
            "retried": {
              "type": "boolean"
            },
            "retriedTaskId": {
              "type": "string"
            },
            "retryCount": {
              "type": "integer",
              "format": "int32"
            },
            "scheduledTime": {
              "type": "integer",
              "format": "int64"
            },
            "seq": {
              "type": "integer",
              "format": "int32"
            },
            "startDelayInSeconds": {
              "type": "integer",
              "format": "int32"
            },
            "startTime": {
              "type": "integer",
              "format": "int64"
            },
            "status": {
              "type": "string",
              "enum": [
                "IN_PROGRESS",
                "CANCELED",
                "FAILED",
                "FAILED_WITH_TERMINAL_ERROR",
                "COMPLETED",
                "COMPLETED_WITH_ERRORS",
                "SCHEDULED",
                "TIMED_OUT",
                "SKIPPED"
              ]
            },
            "subWorkflowId": {
              "type": "string"
            },
            "subworkflowChanged": {
              "type": "boolean"
            },
            "taskDefName": {
              "type": "string"
            },
            "taskDefinition": {
              "$ref": "#/components/schemas/TaskDef"
            },
            "taskId": {
              "type": "string"
            },
            "taskType": {
              "type": "string"
            },
            "updateTime": {
              "type": "integer",
              "format": "int64"
            },
            "workerId": {
              "type": "string"
            },
            "workflowInstanceId": {
              "type": "string"
            },
            "workflowPriority": {
              "type": "integer",
              "format": "int32"
            },
            "workflowTask": {
              "$ref": "#/components/schemas/WorkflowTask"
            },
            "workflowType": {
              "type": "string"
            }
          }
        },
        "TaskDef": {
          "required": [
            "name",
            "timeoutSeconds",
            "totalTimeoutSeconds"
          ],
          "type": "object",
          "properties": {
            "backoffScaleFactor": {
              "type": "integer",
              "format": "int32"
            },
            "baseType": {
              "type": "string"
            },
            "concurrentExecLimit": {
              "type": "integer",
              "format": "int32"
            },
            "createTime": {
              "type": "integer",
              "format": "int64"
            },
            "createdBy": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "enforceSchema": {
              "type": "boolean"
            },
            "executionNameSpace": {
              "type": "string"
            },
            "inputKeys": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "inputSchema": {
              "$ref": "#/components/schemas/SchemaDef"
            },
            "inputTemplate": {
              "type": "object",
              "additionalProperties": {}
            },
            "isolationGroupId": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "outputKeys": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "outputSchema": {
              "$ref": "#/components/schemas/SchemaDef"
            },
            "ownerApp": {
              "type": "string"
            },
            "ownerEmail": {
              "type": "string"
            },
            "pollTimeoutSeconds": {
              "type": "integer",
              "format": "int32"
            },
            "rateLimitFrequencyInSeconds": {
              "type": "integer",
              "format": "int32"
            },
            "rateLimitPerFrequency": {
              "type": "integer",
              "format": "int32"
            },
            "responseTimeoutSeconds": {
              "type": "integer",
              "format": "int64"
            },
            "retryCount": {
              "type": "integer",
              "format": "int32"
            },
            "retryDelaySeconds": {
              "type": "integer",
              "format": "int32"
            },
            "retryLogic": {
              "type": "string",
              "enum": [
                "FIXED",
                "EXPONENTIAL_BACKOFF",
                "LINEAR_BACKOFF"
              ]
            },
            "timeoutPolicy": {
              "type": "string",
              "enum": [
                "RETRY",
                "TIME_OUT_WF",
                "ALERT_ONLY"
              ]
            },
            "timeoutSeconds": {
              "type": "integer",
              "format": "int64"
            },
            "totalTimeoutSeconds": {
              "type": "integer",
              "format": "int64"
            },
            "updateTime": {
              "type": "integer",
              "format": "int64"
            },
            "updatedBy": {
              "type": "string"
            }
          }
        },
        "TaskDetails": {
          "type": "object",
          "properties": {
            "output": {
              "type": "object",
              "additionalProperties": {}
            },
            "outputMessage": {
              "$ref": "#/components/schemas/Any"
            },
            "taskId": {
              "type": "string"
            },
            "taskRefName": {
              "type": "string"
            },
            "workflowId": {
              "type": "string"
            }
          }
        },
        "TaskExecLog": {
          "type": "object",
          "properties": {
            "createdTime": {
              "type": "integer",
              "format": "int64"
            },
            "log": {
              "type": "string"
            },
            "taskId": {
              "type": "string"
            }
          }
        },
        "TaskListSearchResultSummary": {
          "type": "object",
          "properties": {
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Task"
              }
            },
            "summary": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int64"
              }
            },
            "totalHits": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "TaskMock": {
          "type": "object",
          "properties": {
            "executionTime": {
              "type": "integer",
              "format": "int64"
            },
            "output": {
              "type": "object",
              "additionalProperties": {}
            },
            "queueWaitTime": {
              "type": "integer",
              "format": "int64"
            },
            "status": {
              "type": "string",
              "enum": [
                "IN_PROGRESS",
                "FAILED",
                "FAILED_WITH_TERMINAL_ERROR",
                "COMPLETED"
              ]
            }
          }
        },
        "TaskResult": {
          "required": [
            "taskId",
            "workflowInstanceId"
          ],
          "type": "object",
          "properties": {
            "callbackAfterSeconds": {
              "type": "integer",
              "format": "int64"
            },
            "extendLease": {
              "type": "boolean"
            },
            "externalOutputPayloadStoragePath": {
              "type": "string"
            },
            "logs": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TaskExecLog"
              }
            },
            "outputData": {
              "type": "object",
              "additionalProperties": {}
            },
            "reasonForIncompletion": {
              "type": "string"
            },
            "status": {
              "type": "string",
              "enum": [
                "IN_PROGRESS",
                "FAILED",
                "FAILED_WITH_TERMINAL_ERROR",
                "COMPLETED"
              ]
            },
            "subWorkflowId": {
              "type": "string"
            },
            "taskId": {
              "type": "string"
            },
            "workerId": {
              "type": "string"
            },
            "workflowInstanceId": {
              "type": "string"
            }
          }
        },
        "TaskSummary": {
          "type": "object",
          "properties": {
            "correlationId": {
              "type": "string"
            },
            "endTime": {
              "type": "string"
            },
            "executionTime": {
              "type": "integer",
              "format": "int64"
            },
            "externalInputPayloadStoragePath": {
              "type": "string"
            },
            "externalOutputPayloadStoragePath": {
              "type": "string"
            },
            "input": {
              "type": "string"
            },
            "output": {
              "type": "string"
            },
            "queueWaitTime": {
              "type": "integer",
              "format": "int64"
            },
            "reasonForIncompletion": {
              "type": "string"
            },
            "scheduledTime": {
              "type": "string"
            },
            "startTime": {
              "type": "string"
            },
            "status": {
              "type": "string",
              "enum": [
                "IN_PROGRESS",
                "CANCELED",
                "FAILED",
                "FAILED_WITH_TERMINAL_ERROR",
                "COMPLETED",
                "COMPLETED_WITH_ERRORS",
                "SCHEDULED",
                "TIMED_OUT",
                "SKIPPED"
              ]
            },
            "taskDefName": {
              "type": "string"
            },
            "taskId": {
              "type": "string"
            },
            "taskReferenceName": {
              "type": "string"
            },
            "taskType": {
              "type": "string"
            },
            "updateTime": {
              "type": "string"
            },
            "workflowId": {
              "type": "string"
            },
            "workflowPriority": {
              "type": "integer",
              "format": "int32"
            },
            "workflowType": {
              "type": "string"
            }
          }
        },
        "TerminateWorkflow": {
          "type": "object",
          "properties": {
            "terminationReason": {
              "type": "string"
            },
            "workflowId": {
              "type": "string"
            }
          }
        },
        "TokenLimit": {
          "type": "object",
          "properties": {
            "api": {
              "type": "string"
            },
            "createTime": {
              "type": "integer",
              "format": "int64"
            },
            "createdBy": {
              "type": "string"
            },
            "integrationName": {
              "type": "string"
            },
            "maxTokens": {
              "type": "integer",
              "format": "int64"
            },
            "ownerApp": {
              "type": "string"
            },
            "tokenLimitPeriod": {
              "type": "string",
              "enum": [
                "DAY",
                "MONTH"
              ]
            },
            "updateTime": {
              "type": "integer",
              "format": "int64"
            },
            "updatedBy": {
              "type": "string"
            }
          }
        },
        "TokenUsageLog": {
          "type": "object",
          "properties": {
            "api": {
              "type": "string"
            },
            "completionTokens": {
              "type": "integer",
              "format": "int32"
            },
            "integrationName": {
              "type": "string"
            },
            "periodStart": {
              "type": "integer",
              "format": "int64"
            },
            "promptTokens": {
              "type": "integer",
              "format": "int32"
            },
            "totalTokens": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "UninterpretedOption": {
          "type": "object",
          "properties": {
            "aggregateValue": {
              "type": "string"
            },
            "aggregateValueBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/UninterpretedOption"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "doubleValue": {
              "type": "number",
              "format": "double"
            },
            "identifierValue": {
              "type": "string"
            },
            "identifierValueBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "memoizedSerializedSize": {
              "type": "integer",
              "format": "int32",
              "writeOnly": true
            },
            "nameCount": {
              "type": "integer",
              "format": "int32"
            },
            "nameList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/NamePart"
              }
            },
            "nameOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/NamePartOrBuilder"
              }
            },
            "negativeIntValue": {
              "type": "integer",
              "format": "int64"
            },
            "parserForType": {
              "$ref": "#/components/schemas/ParserUninterpretedOption"
            },
            "positiveIntValue": {
              "type": "integer",
              "format": "int64"
            },
            "serializedSize": {
              "type": "integer",
              "format": "int32"
            },
            "stringValue": {
              "$ref": "#/components/schemas/ByteString"
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "UninterpretedOptionOrBuilder": {
          "type": "object",
          "properties": {
            "aggregateValue": {
              "type": "string"
            },
            "aggregateValueBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "allFields": {
              "type": "object",
              "additionalProperties": {}
            },
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/Message"
            },
            "descriptorForType": {
              "$ref": "#/components/schemas/Descriptor"
            },
            "doubleValue": {
              "type": "number",
              "format": "double"
            },
            "identifierValue": {
              "type": "string"
            },
            "identifierValueBytes": {
              "$ref": "#/components/schemas/ByteString"
            },
            "initializationErrorString": {
              "type": "string"
            },
            "initialized": {
              "type": "boolean"
            },
            "nameCount": {
              "type": "integer",
              "format": "int32"
            },
            "nameList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/NamePart"
              }
            },
            "nameOrBuilderList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/NamePartOrBuilder"
              }
            },
            "negativeIntValue": {
              "type": "integer",
              "format": "int64"
            },
            "positiveIntValue": {
              "type": "integer",
              "format": "int64"
            },
            "stringValue": {
              "$ref": "#/components/schemas/ByteString"
            },
            "unknownFields": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            }
          }
        },
        "UnknownFieldSet": {
          "type": "object",
          "properties": {
            "defaultInstanceForType": {
              "$ref": "#/components/schemas/UnknownFieldSet"
            },
            "initialized": {
              "type": "boolean"
            },
            "parserForType": {
              "$ref": "#/components/schemas/Parser"
            },
            "serializedSize": {
              "type": "integer",
              "format": "int32"
            },
            "serializedSizeAsMessageSet": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "UpdateWorkflowVariables": {
          "type": "object",
          "properties": {
            "appendArray": {
              "type": "boolean"
            },
            "variables": {
              "type": "object",
              "additionalProperties": {}
            },
            "workflowId": {
              "type": "string"
            }
          }
        },
        "UpgradeWorkflowRequest": {
          "required": [
            "name"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "taskOutput": {
              "type": "object",
              "additionalProperties": {}
            },
            "version": {
              "type": "integer",
              "format": "int32"
            },
            "workflowInput": {
              "type": "object",
              "additionalProperties": {}
            }
          }
        },
        "UpsertGroupRequest": {
          "required": [
            "description"
          ],
          "type": "object",
          "properties": {
            "defaultAccess": {
              "type": "object",
              "additionalProperties": {
                "uniqueItems": true,
                "type": "array",
                "description": "a default Map\u003CTargetType, Set\u003CAccess\u003E to share permissions, allowed target types: WORKFLOW_DEF, TASK_DEF, WORKFLOW_SCHEDULE",
                "items": {
                  "type": "string",
                  "description": "a default Map\u003CTargetType, Set\u003CAccess\u003E to share permissions, allowed target types: WORKFLOW_DEF, TASK_DEF, WORKFLOW_SCHEDULE",
                  "enum": [
                    "CREATE",
                    "READ",
                    "EXECUTE",
                    "UPDATE",
                    "DELETE"
                  ]
                }
              },
              "description": "a default Map\u003CTargetType, Set\u003CAccess\u003E to share permissions, allowed target types: WORKFLOW_DEF, TASK_DEF, WORKFLOW_SCHEDULE"
            },
            "description": {
              "type": "string",
              "description": "A general description of the group"
            },
            "roles": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "ADMIN",
                  "USER",
                  "WORKER",
                  "METADATA_MANAGER",
                  "WORKFLOW_MANAGER"
                ]
              },
              "enum": [
                "ADMIN",
                "USER",
                "WORKER",
                "METADATA_MANAGER",
                "WORKFLOW_MANAGER"
              ]
            }
          }
        },
        "UpsertUserRequest": {
          "required": [
            "name"
          ],
          "type": "object",
          "properties": {
            "groups": {
              "uniqueItems": true,
              "type": "array",
              "description": "Ids of the groups this user belongs to",
              "items": {
                "type": "string",
                "description": "Ids of the groups this user belongs to"
              }
            },
            "name": {
              "type": "string",
              "description": "User's full name"
            },
            "roles": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "ADMIN",
                  "USER",
                  "WORKER",
                  "METADATA_MANAGER",
                  "WORKFLOW_MANAGER"
                ]
              },
              "enum": [
                "ADMIN",
                "USER",
                "WORKER",
                "METADATA_MANAGER",
                "WORKFLOW_MANAGER"
              ]
            }
          }
        },
        "UserFormTemplate": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "version": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "WebhookConfig": {
          "type": "object",
          "properties": {
            "createdBy": {
              "type": "string"
            },
            "evaluatorType": {
              "type": "string"
            },
            "expression": {
              "type": "string"
            },
            "headerKey": {
              "type": "string"
            },
            "headers": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "receiverWorkflowNamesToVersions": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int32"
              }
            },
            "secretKey": {
              "type": "string"
            },
            "secretValue": {
              "type": "string"
            },
            "sourcePlatform": {
              "type": "string"
            },
            "tags": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Tag"
              }
            },
            "urlVerified": {
              "type": "boolean"
            },
            "verifier": {
              "type": "string",
              "enum": [
                "SLACK_BASED",
                "SIGNATURE_BASED",
                "HEADER_BASED",
                "STRIPE",
                "TWITTER",
                "HMAC_BASED",
                "SENDGRID"
              ]
            },
            "webhookExecutionHistory": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/WebhookExecutionHistory"
              }
            },
            "workflowsToStart": {
              "type": "object",
              "additionalProperties": {}
            }
          }
        },
        "WebhookExecutionHistory": {
          "type": "object",
          "properties": {
            "eventId": {
              "type": "string"
            },
            "matched": {
              "type": "boolean"
            },
            "payload": {
              "type": "string"
            },
            "timeStamp": {
              "type": "integer",
              "format": "int64"
            },
            "workflowIds": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "Workflow": {
          "type": "object",
          "properties": {
            "correlationId": {
              "type": "string"
            },
            "createTime": {
              "type": "integer",
              "format": "int64"
            },
            "createdBy": {
              "type": "string"
            },
            "endTime": {
              "type": "integer",
              "format": "int64"
            },
            "event": {
              "type": "string"
            },
            "externalInputPayloadStoragePath": {
              "type": "string"
            },
            "externalOutputPayloadStoragePath": {
              "type": "string"
            },
            "failedReferenceTaskNames": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "failedTaskNames": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "history": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Workflow"
              }
            },
            "idempotencyKey": {
              "type": "string"
            },
            "input": {
              "type": "object",
              "additionalProperties": {}
            },
            "lastRetriedTime": {
              "type": "integer",
              "format": "int64"
            },
            "output": {
              "type": "object",
              "additionalProperties": {}
            },
            "ownerApp": {
              "type": "string"
            },
            "parentWorkflowId": {
              "type": "string"
            },
            "parentWorkflowTaskId": {
              "type": "string"
            },
            "priority": {
              "type": "integer",
              "format": "int32"
            },
            "rateLimitKey": {
              "type": "string"
            },
            "rateLimited": {
              "type": "boolean"
            },
            "reRunFromWorkflowId": {
              "type": "string"
            },
            "reasonForIncompletion": {
              "type": "string"
            },
            "startTime": {
              "type": "integer",
              "format": "int64"
            },
            "status": {
              "type": "string",
              "enum": [
                "RUNNING",
                "COMPLETED",
                "FAILED",
                "TIMED_OUT",
                "TERMINATED",
                "PAUSED"
              ]
            },
            "taskToDomain": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "tasks": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Task"
              }
            },
            "updateTime": {
              "type": "integer",
              "format": "int64"
            },
            "updatedBy": {
              "type": "string"
            },
            "variables": {
              "type": "object",
              "additionalProperties": {}
            },
            "workflowDefinition": {
              "$ref": "#/components/schemas/WorkflowDef"
            },
            "workflowId": {
              "type": "string"
            },
            "workflowName": {
              "type": "string"
            },
            "workflowVersion": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "WorkflowDef": {
          "required": [
            "name",
            "tasks",
            "timeoutSeconds"
          ],
          "type": "object",
          "properties": {
            "cacheConfig": {
              "$ref": "#/components/schemas/CacheConfig"
            },
            "createTime": {
              "type": "integer",
              "format": "int64"
            },
            "createdBy": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "enforceSchema": {
              "type": "boolean"
            },
            "failureWorkflow": {
              "type": "string"
            },
            "inputParameters": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "inputSchema": {
              "$ref": "#/components/schemas/SchemaDef"
            },
            "inputTemplate": {
              "type": "object",
              "additionalProperties": {}
            },
            "maskedFields": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {}
            },
            "name": {
              "type": "string"
            },
            "outputParameters": {
              "type": "object",
              "additionalProperties": {}
            },
            "outputSchema": {
              "$ref": "#/components/schemas/SchemaDef"
            },
            "ownerApp": {
              "type": "string"
            },
            "ownerEmail": {
              "type": "string"
            },
            "rateLimitConfig": {
              "$ref": "#/components/schemas/RateLimitConfig"
            },
            "restartable": {
              "type": "boolean"
            },
            "schemaVersion": {
              "type": "integer",
              "format": "int32"
            },
            "tasks": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/WorkflowTask"
              }
            },
            "timeoutPolicy": {
              "type": "string",
              "enum": [
                "TIME_OUT_WF",
                "ALERT_ONLY"
              ]
            },
            "timeoutSeconds": {
              "type": "integer",
              "format": "int64"
            },
            "updateTime": {
              "type": "integer",
              "format": "int64"
            },
            "updatedBy": {
              "type": "string"
            },
            "variables": {
              "type": "object",
              "additionalProperties": {}
            },
            "version": {
              "type": "integer",
              "format": "int32"
            },
            "workflowStatusListenerEnabled": {
              "type": "boolean"
            },
            "workflowStatusListenerSink": {
              "type": "string"
            }
          }
        },
        "WorkflowRun": {
          "type": "object",
          "properties": {
            "correlationId": {
              "type": "string"
            },
            "createTime": {
              "type": "integer",
              "format": "int64"
            },
            "createdBy": {
              "type": "string"
            },
            "input": {
              "type": "object",
              "additionalProperties": {}
            },
            "output": {
              "type": "object",
              "additionalProperties": {}
            },
            "priority": {
              "type": "integer",
              "format": "int32"
            },
            "requestId": {
              "type": "string"
            },
            "responseType": {
              "type": "string",
              "enum": [
                "TARGET_WORKFLOW",
                "BLOCKING_WORKFLOW",
                "BLOCKING_TASK",
                "BLOCKING_TASK_INPUT"
              ]
            },
            "status": {
              "type": "string",
              "enum": [
                "RUNNING",
                "COMPLETED",
                "FAILED",
                "TIMED_OUT",
                "TERMINATED",
                "PAUSED"
              ]
            },
            "targetWorkflowId": {
              "type": "string"
            },
            "targetWorkflowStatus": {
              "type": "string"
            },
            "tasks": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Task"
              }
            },
            "updateTime": {
              "type": "integer",
              "format": "int64"
            },
            "variables": {
              "type": "object",
              "additionalProperties": {}
            },
            "workflowId": {
              "type": "string"
            }
          }
        },
        "WorkflowSchedule": {
          "type": "object",
          "properties": {
            "createTime": {
              "type": "integer",
              "format": "int64"
            },
            "createdBy": {
              "type": "string"
            },
            "cronExpression": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "paused": {
              "type": "boolean"
            },
            "pausedReason": {
              "type": "string"
            },
            "runCatchupScheduleInstances": {
              "type": "boolean"
            },
            "scheduleEndTime": {
              "type": "integer",
              "format": "int64"
            },
            "scheduleStartTime": {
              "type": "integer",
              "format": "int64"
            },
            "startWorkflowRequest": {
              "$ref": "#/components/schemas/StartWorkflowRequest"
            },
            "tags": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Tag"
              }
            },
            "updatedBy": {
              "type": "string"
            },
            "updatedTime": {
              "type": "integer",
              "format": "int64"
            },
            "zoneId": {
              "type": "string"
            }
          }
        },
        "WorkflowScheduleExecutionModel": {
          "type": "object",
          "properties": {
            "executionId": {
              "type": "string"
            },
            "executionTime": {
              "type": "integer",
              "format": "int64"
            },
            "orgId": {
              "type": "string"
            },
            "queueMsgId": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "scheduleName": {
              "type": "string"
            },
            "scheduledTime": {
              "type": "integer",
              "format": "int64"
            },
            "stackTrace": {
              "type": "string"
            },
            "startWorkflowRequest": {
              "$ref": "#/components/schemas/StartWorkflowRequest"
            },
            "state": {
              "type": "string",
              "enum": [
                "POLLED",
                "FAILED",
                "EXECUTED"
              ]
            },
            "workflowId": {
              "type": "string"
            },
            "workflowName": {
              "type": "string"
            },
            "zoneId": {
              "type": "string"
            }
          }
        },
        "WorkflowScheduleModel": {
          "type": "object",
          "properties": {
            "createTime": {
              "type": "integer",
              "format": "int64"
            },
            "createdBy": {
              "type": "string"
            },
            "cronExpression": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "orgId": {
              "type": "string"
            },
            "paused": {
              "type": "boolean"
            },
            "pausedReason": {
              "type": "string"
            },
            "queueMsgId": {
              "type": "string"
            },
            "runCatchupScheduleInstances": {
              "type": "boolean"
            },
            "scheduleEndTime": {
              "type": "integer",
              "format": "int64"
            },
            "scheduleStartTime": {
              "type": "integer",
              "format": "int64"
            },
            "startWorkflowRequest": {
              "$ref": "#/components/schemas/StartWorkflowRequest"
            },
            "tags": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Tag"
              }
            },
            "updatedBy": {
              "type": "string"
            },
            "updatedTime": {
              "type": "integer",
              "format": "int64"
            },
            "zoneId": {
              "type": "string"
            }
          }
        },
        "WorkflowStateUpdate": {
          "type": "object",
          "properties": {
            "taskReferenceName": {
              "type": "string"
            },
            "taskResult": {
              "$ref": "#/components/schemas/TaskResult"
            },
            "variables": {
              "type": "object",
              "additionalProperties": {}
            }
          }
        },
        "WorkflowStatus": {
          "type": "object",
          "properties": {
            "correlationId": {
              "type": "string"
            },
            "output": {
              "type": "object",
              "additionalProperties": {}
            },
            "status": {
              "type": "string",
              "enum": [
                "RUNNING",
                "COMPLETED",
                "FAILED",
                "TIMED_OUT",
                "TERMINATED",
                "PAUSED"
              ]
            },
            "variables": {
              "type": "object",
              "additionalProperties": {}
            },
            "workflowId": {
              "type": "string"
            }
          }
        },
        "WorkflowSummary": {
          "type": "object",
          "properties": {
            "correlationId": {
              "type": "string"
            },
            "createdBy": {
              "type": "string"
            },
            "endTime": {
              "type": "string"
            },
            "event": {
              "type": "string"
            },
            "executionTime": {
              "type": "integer",
              "format": "int64"
            },
            "externalInputPayloadStoragePath": {
              "type": "string"
            },
            "externalOutputPayloadStoragePath": {
              "type": "string"
            },
            "failedReferenceTaskNames": {
              "type": "string"
            },
            "failedTaskNames": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "idempotencyKey": {
              "type": "string"
            },
            "input": {
              "type": "string"
            },
            "inputSize": {
              "type": "integer",
              "format": "int64"
            },
            "output": {
              "type": "string"
            },
            "outputSize": {
              "type": "integer",
              "format": "int64"
            },
            "priority": {
              "type": "integer",
              "format": "int32"
            },
            "reasonForIncompletion": {
              "type": "string"
            },
            "startTime": {
              "type": "string"
            },
            "status": {
              "type": "string",
              "enum": [
                "RUNNING",
                "COMPLETED",
                "FAILED",
                "TIMED_OUT",
                "TERMINATED",
                "PAUSED"
              ]
            },
            "taskToDomain": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "updateTime": {
              "type": "string"
            },
            "version": {
              "type": "integer",
              "format": "int32"
            },
            "workflowId": {
              "type": "string"
            },
            "workflowType": {
              "type": "string"
            }
          }
        },
        "WorkflowTask": {
          "required": [
            "name",
            "taskReferenceName"
          ],
          "type": "object",
          "properties": {
            "asyncComplete": {
              "type": "boolean"
            },
            "cacheConfig": {
              "$ref": "#/components/schemas/CacheConfig"
            },
            "caseExpression": {
              "type": "string",
              "deprecated": true
            },
            "caseValueParam": {
              "type": "string",
              "deprecated": true
            },
            "decisionCases": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/WorkflowTask"
                }
              }
            },
            "defaultCase": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/WorkflowTask"
              }
            },
            "defaultExclusiveJoinTask": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": {
              "type": "string"
            },
            "dynamicForkJoinTasksParam": {
              "type": "string",
              "deprecated": true
            },
            "dynamicForkTasksInputParamName": {
              "type": "string"
            },
            "dynamicForkTasksParam": {
              "type": "string"
            },
            "dynamicTaskNameParam": {
              "type": "string"
            },
            "evaluatorType": {
              "type": "string"
            },
            "expression": {
              "type": "string"
            },
            "forkTasks": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/WorkflowTask"
                }
              }
            },
            "inputParameters": {
              "type": "object",
              "additionalProperties": {}
            },
            "joinOn": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "joinStatus": {
              "type": "string"
            },
            "loopCondition": {
              "type": "string"
            },
            "loopOver": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/WorkflowTask"
              }
            },
            "name": {
              "type": "string"
            },
            "onStateChange": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StateChangeEvent"
                }
              }
            },
            "optional": {
              "type": "boolean"
            },
            "permissive": {
              "type": "boolean"
            },
            "rateLimited": {
              "type": "boolean"
            },
            "retryCount": {
              "type": "integer",
              "format": "int32"
            },
            "scriptExpression": {
              "type": "string"
            },
            "sink": {
              "type": "string"
            },
            "startDelay": {
              "type": "integer",
              "format": "int32"
            },
            "subWorkflowParam": {
              "$ref": "#/components/schemas/SubWorkflowParams"
            },
            "taskDefinition": {
              "$ref": "#/components/schemas/TaskDef"
            },
            "taskReferenceName": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "workflowTaskType": {
              "type": "string",
              "writeOnly": true,
              "enum": [
                "SIMPLE",
                "DYNAMIC",
                "FORK_JOIN",
                "FORK_JOIN_DYNAMIC",
                "DECISION",
                "SWITCH",
                "JOIN",
                "DO_WHILE",
                "SUB_WORKFLOW",
                "START_WORKFLOW",
                "EVENT",
                "WAIT",
                "HUMAN",
                "USER_DEFINED",
                "HTTP",
                "LAMBDA",
                "INLINE",
                "EXCLUSIVE_JOIN",
                "TERMINATE",
                "KAFKA_PUBLISH",
                "JSON_JQ_TRANSFORM",
                "SET_VARIABLE",
                "NOOP"
              ]
            }
          }
        },
        "WorkflowTestRequest": {
          "required": [
            "name"
          ],
          "type": "object",
          "properties": {
            "correlationId": {
              "type": "string"
            },
            "createdBy": {
              "type": "string"
            },
            "externalInputPayloadStoragePath": {
              "type": "string"
            },
            "idempotencyKey": {
              "type": "string"
            },
            "idempotencyStrategy": {
              "type": "string",
              "enum": [
                "FAIL",
                "RETURN_EXISTING",
                "FAIL_ON_RUNNING"
              ]
            },
            "input": {
              "type": "object",
              "additionalProperties": {}
            },
            "name": {
              "type": "string"
            },
            "priority": {
              "type": "integer",
              "format": "int32"
            },
            "subWorkflowTestRequest": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/components/schemas/WorkflowTestRequest"
              }
            },
            "taskRefToMockOutput": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TaskMock"
                }
              }
            },
            "taskToDomain": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "version": {
              "type": "integer",
              "format": "int32"
            },
            "workflowDef": {
              "$ref": "#/components/schemas/WorkflowDef"
            }
          }
        }
      },
      "securitySchemes": {
        "api_key": {
          "description": "Api Key access",
          "in": "header",
          "name": "X-Authorization",
          "type": "apiKey"
        }
      }
    }
  }