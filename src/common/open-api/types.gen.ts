// This file is auto-generated by @hey-api/openapi-ts

export type Action = {
    action?: 'start_workflow' | 'complete_task' | 'fail_task' | 'terminate_workflow' | 'update_workflow_variables';
    complete_task?: TaskDetails;
    expandInlineJSON?: boolean;
    fail_task?: TaskDetails;
    start_workflow?: StartWorkflowRequest;
    terminate_workflow?: TerminateWorkflow;
    update_workflow_variables?: UpdateWorkflowVariables;
};

export type Any = {
    allFields?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: Any;
    descriptorForType?: Descriptor;
    initializationErrorString?: string;
    initialized?: boolean;
    memoizedSerializedSize?: number;
    parserForType?: ParserAny;
    serializedSize?: number;
    typeUrl?: string;
    typeUrlBytes?: ByteString;
    unknownFields?: UnknownFieldSet;
    value?: ByteString;
};

export type AuthorizationRequest = {
    /**
     * The set of access which is granted or removed
     */
    access: Array<'CREATE' | 'READ' | 'EXECUTE' | 'UPDATE' | 'DELETE'>;
    subject: SubjectRef;
    target: TargetRef;
};

export type BulkResponse = {
    bulkErrorResults?: {
        [key: string]: string;
    };
    bulkSuccessfulResults?: Array<{
        [key: string]: unknown;
    }>;
};

export type ByteString = {
    empty?: boolean;
    validUtf8?: boolean;
};

export type CacheConfig = {
    key?: string;
    ttlInSecond?: number;
};

export type CircuitBreakerTransitionResponse = {
    currentState?: string;
    message?: string;
    previousState?: string;
    service?: string;
    transitionTimestamp?: number;
};

export type ConductorUser = {
    applicationUser?: boolean;
    encryptedId?: boolean;
    encryptedIdDisplayValue?: string;
    groups?: Array<Group>;
    id?: string;
    name?: string;
    orkesWorkersApp?: boolean;
    roles?: Array<Role>;
    uuid?: string;
};

export type Config = {
    circuitBreakerConfig?: OrkesCircuitBreakerConfig;
};

export type ConnectivityTestInput = {
    input?: {
        [key: string]: unknown;
    };
    sink: string;
};

export type ConnectivityTestResult = {
    reason?: string;
    successful?: boolean;
    workflowId?: string;
};

export type CorrelationIdsSearchRequest = {
    correlationIds: Array<string>;
    workflowNames: Array<string>;
};

export type CreateOrUpdateApplicationRequest = {
    /**
     * Application's name e.g.: Payment Processors
     */
    name: string;
};

export type Declaration = {
    allFields?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: Declaration;
    descriptorForType?: Descriptor;
    fullName?: string;
    fullNameBytes?: ByteString;
    initializationErrorString?: string;
    initialized?: boolean;
    memoizedSerializedSize?: number;
    number?: number;
    parserForType?: ParserDeclaration;
    repeated?: boolean;
    reserved?: boolean;
    serializedSize?: number;
    type?: string;
    typeBytes?: ByteString;
    unknownFields?: UnknownFieldSet;
};

export type DeclarationOrBuilder = {
    allFields?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: Message;
    descriptorForType?: Descriptor;
    fullName?: string;
    fullNameBytes?: ByteString;
    initializationErrorString?: string;
    initialized?: boolean;
    number?: number;
    repeated?: boolean;
    reserved?: boolean;
    type?: string;
    typeBytes?: ByteString;
    unknownFields?: UnknownFieldSet;
};

export type Descriptor = {
    containingType?: Descriptor;
    enumTypes?: Array<EnumDescriptor>;
    extendable?: boolean;
    extensions?: Array<FieldDescriptor>;
    fields?: Array<FieldDescriptor>;
    file?: FileDescriptor;
    fullName?: string;
    index?: number;
    name?: string;
    nestedTypes?: Array<Descriptor>;
    oneofs?: Array<OneofDescriptor>;
    options?: MessageOptions;
    proto?: DescriptorProto;
    realOneofs?: Array<OneofDescriptor>;
};

export type DescriptorProto = {
    allFields?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: DescriptorProto;
    descriptorForType?: Descriptor;
    enumTypeCount?: number;
    enumTypeList?: Array<EnumDescriptorProto>;
    enumTypeOrBuilderList?: Array<EnumDescriptorProtoOrBuilder>;
    extensionCount?: number;
    extensionList?: Array<FieldDescriptorProto>;
    extensionOrBuilderList?: Array<FieldDescriptorProtoOrBuilder>;
    extensionRangeCount?: number;
    extensionRangeList?: Array<ExtensionRange>;
    extensionRangeOrBuilderList?: Array<ExtensionRangeOrBuilder>;
    fieldCount?: number;
    fieldList?: Array<FieldDescriptorProto>;
    fieldOrBuilderList?: Array<FieldDescriptorProtoOrBuilder>;
    initializationErrorString?: string;
    initialized?: boolean;
    memoizedSerializedSize?: number;
    name?: string;
    nameBytes?: ByteString;
    nestedTypeCount?: number;
    nestedTypeList?: Array<DescriptorProto>;
    nestedTypeOrBuilderList?: Array<DescriptorProtoOrBuilder>;
    oneofDeclCount?: number;
    oneofDeclList?: Array<OneofDescriptorProto>;
    oneofDeclOrBuilderList?: Array<OneofDescriptorProtoOrBuilder>;
    options?: MessageOptions;
    optionsOrBuilder?: MessageOptionsOrBuilder;
    parserForType?: ParserDescriptorProto;
    reservedNameCount?: number;
    reservedNameList?: Array<string>;
    reservedRangeCount?: number;
    reservedRangeList?: Array<ReservedRange>;
    reservedRangeOrBuilderList?: Array<ReservedRangeOrBuilder>;
    serializedSize?: number;
    unknownFields?: UnknownFieldSet;
};

export type DescriptorProtoOrBuilder = {
    allFields?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: Message;
    descriptorForType?: Descriptor;
    enumTypeCount?: number;
    enumTypeList?: Array<EnumDescriptorProto>;
    enumTypeOrBuilderList?: Array<EnumDescriptorProtoOrBuilder>;
    extensionCount?: number;
    extensionList?: Array<FieldDescriptorProto>;
    extensionOrBuilderList?: Array<FieldDescriptorProtoOrBuilder>;
    extensionRangeCount?: number;
    extensionRangeList?: Array<ExtensionRange>;
    extensionRangeOrBuilderList?: Array<ExtensionRangeOrBuilder>;
    fieldCount?: number;
    fieldList?: Array<FieldDescriptorProto>;
    fieldOrBuilderList?: Array<FieldDescriptorProtoOrBuilder>;
    initializationErrorString?: string;
    initialized?: boolean;
    name?: string;
    nameBytes?: ByteString;
    nestedTypeCount?: number;
    nestedTypeList?: Array<DescriptorProto>;
    oneofDeclCount?: number;
    oneofDeclList?: Array<OneofDescriptorProto>;
    oneofDeclOrBuilderList?: Array<OneofDescriptorProtoOrBuilder>;
    options?: MessageOptions;
    optionsOrBuilder?: MessageOptionsOrBuilder;
    reservedNameCount?: number;
    reservedNameList?: Array<string>;
    reservedRangeCount?: number;
    reservedRangeList?: Array<ReservedRange>;
    reservedRangeOrBuilderList?: Array<ReservedRangeOrBuilder>;
    unknownFields?: UnknownFieldSet;
};

export type EditionDefault = {
    allFields?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: EditionDefault;
    descriptorForType?: Descriptor;
    edition?: 'EDITION_UNKNOWN' | 'EDITION_PROTO2' | 'EDITION_PROTO3' | 'EDITION_2023' | 'EDITION_1_TEST_ONLY' | 'EDITION_2_TEST_ONLY' | 'EDITION_99997_TEST_ONLY' | 'EDITION_99998_TEST_ONLY' | 'EDITION_99999_TEST_ONLY';
    initializationErrorString?: string;
    initialized?: boolean;
    memoizedSerializedSize?: number;
    parserForType?: ParserEditionDefault;
    serializedSize?: number;
    unknownFields?: UnknownFieldSet;
    value?: string;
    valueBytes?: ByteString;
};

export type EditionDefaultOrBuilder = {
    allFields?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: Message;
    descriptorForType?: Descriptor;
    edition?: 'EDITION_UNKNOWN' | 'EDITION_PROTO2' | 'EDITION_PROTO3' | 'EDITION_2023' | 'EDITION_1_TEST_ONLY' | 'EDITION_2_TEST_ONLY' | 'EDITION_99997_TEST_ONLY' | 'EDITION_99998_TEST_ONLY' | 'EDITION_99999_TEST_ONLY';
    initializationErrorString?: string;
    initialized?: boolean;
    unknownFields?: UnknownFieldSet;
    value?: string;
    valueBytes?: ByteString;
};

export type EnumDescriptor = {
    closed?: boolean;
    containingType?: Descriptor;
    file?: FileDescriptor;
    fullName?: string;
    index?: number;
    name?: string;
    options?: EnumOptions;
    proto?: EnumDescriptorProto;
    values?: Array<EnumValueDescriptor>;
};

export type EnumDescriptorProto = {
    allFields?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: EnumDescriptorProto;
    descriptorForType?: Descriptor;
    initializationErrorString?: string;
    initialized?: boolean;
    memoizedSerializedSize?: number;
    name?: string;
    nameBytes?: ByteString;
    options?: EnumOptions;
    optionsOrBuilder?: EnumOptionsOrBuilder;
    parserForType?: ParserEnumDescriptorProto;
    reservedNameCount?: number;
    reservedNameList?: Array<string>;
    reservedRangeCount?: number;
    reservedRangeList?: Array<EnumReservedRange>;
    reservedRangeOrBuilderList?: Array<EnumReservedRangeOrBuilder>;
    serializedSize?: number;
    unknownFields?: UnknownFieldSet;
    valueCount?: number;
    valueList?: Array<EnumValueDescriptorProto>;
    valueOrBuilderList?: Array<EnumValueDescriptorProtoOrBuilder>;
};

export type EnumDescriptorProtoOrBuilder = {
    allFields?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: Message;
    descriptorForType?: Descriptor;
    initializationErrorString?: string;
    initialized?: boolean;
    name?: string;
    nameBytes?: ByteString;
    options?: EnumOptions;
    optionsOrBuilder?: EnumOptionsOrBuilder;
    reservedNameCount?: number;
    reservedNameList?: Array<string>;
    reservedRangeCount?: number;
    reservedRangeList?: Array<EnumReservedRange>;
    reservedRangeOrBuilderList?: Array<EnumReservedRangeOrBuilder>;
    unknownFields?: UnknownFieldSet;
    valueCount?: number;
    valueList?: Array<EnumValueDescriptorProto>;
    valueOrBuilderList?: Array<EnumValueDescriptorProtoOrBuilder>;
};

export type EnumOptions = {
    allFields?: {
        [key: string]: unknown;
    };
    allFieldsRaw?: {
        [key: string]: unknown;
    };
    allowAlias?: boolean;
    defaultInstanceForType?: EnumOptions;
    deprecated?: boolean;
    /**
     * @deprecated
     */
    deprecatedLegacyJsonFieldConflicts?: boolean;
    descriptorForType?: Descriptor;
    features?: FeatureSet;
    featuresOrBuilder?: FeatureSetOrBuilder;
    initializationErrorString?: string;
    initialized?: boolean;
    memoizedSerializedSize?: number;
    parserForType?: ParserEnumOptions;
    serializedSize?: number;
    uninterpretedOptionCount?: number;
    uninterpretedOptionList?: Array<UninterpretedOption>;
    uninterpretedOptionOrBuilderList?: Array<UninterpretedOptionOrBuilder>;
    unknownFields?: UnknownFieldSet;
};

export type EnumOptionsOrBuilder = {
    allFields?: {
        [key: string]: unknown;
    };
    allowAlias?: boolean;
    defaultInstanceForType?: Message;
    deprecated?: boolean;
    /**
     * @deprecated
     */
    deprecatedLegacyJsonFieldConflicts?: boolean;
    descriptorForType?: Descriptor;
    features?: FeatureSet;
    featuresOrBuilder?: FeatureSetOrBuilder;
    initializationErrorString?: string;
    initialized?: boolean;
    uninterpretedOptionCount?: number;
    uninterpretedOptionList?: Array<UninterpretedOption>;
    uninterpretedOptionOrBuilderList?: Array<UninterpretedOptionOrBuilder>;
    unknownFields?: UnknownFieldSet;
};

export type EnumReservedRange = {
    allFields?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: EnumReservedRange;
    descriptorForType?: Descriptor;
    end?: number;
    initializationErrorString?: string;
    initialized?: boolean;
    memoizedSerializedSize?: number;
    parserForType?: ParserEnumReservedRange;
    serializedSize?: number;
    start?: number;
    unknownFields?: UnknownFieldSet;
};

export type EnumReservedRangeOrBuilder = {
    allFields?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: Message;
    descriptorForType?: Descriptor;
    end?: number;
    initializationErrorString?: string;
    initialized?: boolean;
    start?: number;
    unknownFields?: UnknownFieldSet;
};

export type EnumValueDescriptor = {
    file?: FileDescriptor;
    fullName?: string;
    index?: number;
    name?: string;
    number?: number;
    options?: EnumValueOptions;
    proto?: EnumValueDescriptorProto;
    type?: EnumDescriptor;
};

export type EnumValueDescriptorProto = {
    allFields?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: EnumValueDescriptorProto;
    descriptorForType?: Descriptor;
    initializationErrorString?: string;
    initialized?: boolean;
    memoizedSerializedSize?: number;
    name?: string;
    nameBytes?: ByteString;
    number?: number;
    options?: EnumValueOptions;
    optionsOrBuilder?: EnumValueOptionsOrBuilder;
    parserForType?: ParserEnumValueDescriptorProto;
    serializedSize?: number;
    unknownFields?: UnknownFieldSet;
};

export type EnumValueDescriptorProtoOrBuilder = {
    allFields?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: Message;
    descriptorForType?: Descriptor;
    initializationErrorString?: string;
    initialized?: boolean;
    name?: string;
    nameBytes?: ByteString;
    number?: number;
    options?: EnumValueOptions;
    optionsOrBuilder?: EnumValueOptionsOrBuilder;
    unknownFields?: UnknownFieldSet;
};

export type EnumValueOptions = {
    allFields?: {
        [key: string]: unknown;
    };
    allFieldsRaw?: {
        [key: string]: unknown;
    };
    debugRedact?: boolean;
    defaultInstanceForType?: EnumValueOptions;
    deprecated?: boolean;
    descriptorForType?: Descriptor;
    features?: FeatureSet;
    featuresOrBuilder?: FeatureSetOrBuilder;
    initializationErrorString?: string;
    initialized?: boolean;
    memoizedSerializedSize?: number;
    parserForType?: ParserEnumValueOptions;
    serializedSize?: number;
    uninterpretedOptionCount?: number;
    uninterpretedOptionList?: Array<UninterpretedOption>;
    uninterpretedOptionOrBuilderList?: Array<UninterpretedOptionOrBuilder>;
    unknownFields?: UnknownFieldSet;
};

export type EnumValueOptionsOrBuilder = {
    allFields?: {
        [key: string]: unknown;
    };
    debugRedact?: boolean;
    defaultInstanceForType?: Message;
    deprecated?: boolean;
    descriptorForType?: Descriptor;
    features?: FeatureSet;
    featuresOrBuilder?: FeatureSetOrBuilder;
    initializationErrorString?: string;
    initialized?: boolean;
    uninterpretedOptionCount?: number;
    uninterpretedOptionList?: Array<UninterpretedOption>;
    uninterpretedOptionOrBuilderList?: Array<UninterpretedOptionOrBuilder>;
    unknownFields?: UnknownFieldSet;
};

export type EnvironmentVariable = {
    name?: string;
    tags?: Array<Tag>;
    value?: string;
};

export type EventHandler = {
    actions?: Array<Action>;
    active?: boolean;
    condition?: string;
    createdBy?: string;
    description?: string;
    evaluatorType?: string;
    event?: string;
    name?: string;
    orgId?: string;
    tags?: Array<Tag>;
};

export type EventLog = {
    createdAt?: number;
    event?: string;
    eventType?: 'SEND' | 'RECEIVE';
    handlerName?: string;
    id?: string;
    taskId?: string;
    workerId?: string;
};

export type EventMessage = {
    createdAt?: number;
    eventExecutions?: Array<ExtendedEventExecution>;
    eventTarget?: string;
    eventType?: 'WEBHOOK' | 'MESSAGE';
    fullPayload?: {
        [key: string]: unknown;
    };
    id?: string;
    orgId?: string;
    payload?: string;
    status?: 'RECEIVED' | 'HANDLED' | 'REJECTED';
    statusDescription?: string;
};

export type ExtendedConductorApplication = {
    createTime?: number;
    createdBy?: string;
    id?: string;
    name?: string;
    tags?: Array<Tag>;
    updateTime?: number;
    updatedBy?: string;
};

export type ExtendedEventExecution = {
    action?: 'start_workflow' | 'complete_task' | 'fail_task' | 'terminate_workflow' | 'update_workflow_variables';
    created?: number;
    event?: string;
    eventHandler?: EventHandler;
    fullMessagePayload?: {
        [key: string]: unknown;
    };
    id?: string;
    messageId?: string;
    name?: string;
    orgId?: string;
    output?: {
        [key: string]: unknown;
    };
    payload?: {
        [key: string]: unknown;
    };
    status?: 'IN_PROGRESS' | 'COMPLETED' | 'FAILED' | 'SKIPPED';
    statusDescription?: string;
};

export type ExtendedSecret = {
    name?: string;
    tags?: Array<Tag>;
};

export type ExtendedTaskDef = {
    backoffScaleFactor?: number;
    baseType?: string;
    concurrentExecLimit?: number;
    createTime?: number;
    createdBy?: string;
    description?: string;
    enforceSchema?: boolean;
    executionNameSpace?: string;
    inputKeys?: Array<string>;
    inputSchema?: SchemaDef;
    inputTemplate?: {
        [key: string]: unknown;
    };
    isolationGroupId?: string;
    name: string;
    outputKeys?: Array<string>;
    outputSchema?: SchemaDef;
    overwriteTags?: boolean;
    ownerApp?: string;
    ownerEmail?: string;
    pollTimeoutSeconds?: number;
    rateLimitFrequencyInSeconds?: number;
    rateLimitPerFrequency?: number;
    responseTimeoutSeconds?: number;
    retryCount?: number;
    retryDelaySeconds?: number;
    retryLogic?: 'FIXED' | 'EXPONENTIAL_BACKOFF' | 'LINEAR_BACKOFF';
    tags?: Array<Tag>;
    timeoutPolicy?: 'RETRY' | 'TIME_OUT_WF' | 'ALERT_ONLY';
    timeoutSeconds: number;
    totalTimeoutSeconds: number;
    updateTime?: number;
    updatedBy?: string;
};

export type ExtendedWorkflowDef = {
    cacheConfig?: CacheConfig;
    createTime?: number;
    createdBy?: string;
    description?: string;
    enforceSchema?: boolean;
    failureWorkflow?: string;
    inputParameters?: Array<string>;
    inputSchema?: SchemaDef;
    inputTemplate?: {
        [key: string]: unknown;
    };
    maskedFields?: Array<string>;
    metadata?: {
        [key: string]: unknown;
    };
    name: string;
    outputParameters?: {
        [key: string]: unknown;
    };
    outputSchema?: SchemaDef;
    overwriteTags?: boolean;
    ownerApp?: string;
    ownerEmail?: string;
    rateLimitConfig?: RateLimitConfig;
    restartable?: boolean;
    schemaVersion?: number;
    tags?: Array<Tag>;
    tasks: Array<WorkflowTask>;
    timeoutPolicy?: 'TIME_OUT_WF' | 'ALERT_ONLY';
    timeoutSeconds: number;
    updateTime?: number;
    updatedBy?: string;
    variables?: {
        [key: string]: unknown;
    };
    version?: number;
    workflowStatusListenerEnabled?: boolean;
    workflowStatusListenerSink?: string;
};

export type ExtensionRange = {
    allFields?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: ExtensionRange;
    descriptorForType?: Descriptor;
    end?: number;
    initializationErrorString?: string;
    initialized?: boolean;
    memoizedSerializedSize?: number;
    options?: ExtensionRangeOptions;
    optionsOrBuilder?: ExtensionRangeOptionsOrBuilder;
    parserForType?: ParserExtensionRange;
    serializedSize?: number;
    start?: number;
    unknownFields?: UnknownFieldSet;
};

export type ExtensionRangeOptions = {
    allFields?: {
        [key: string]: unknown;
    };
    allFieldsRaw?: {
        [key: string]: unknown;
    };
    declarationCount?: number;
    declarationList?: Array<Declaration>;
    declarationOrBuilderList?: Array<DeclarationOrBuilder>;
    defaultInstanceForType?: ExtensionRangeOptions;
    descriptorForType?: Descriptor;
    features?: FeatureSet;
    featuresOrBuilder?: FeatureSetOrBuilder;
    initializationErrorString?: string;
    initialized?: boolean;
    memoizedSerializedSize?: number;
    parserForType?: ParserExtensionRangeOptions;
    serializedSize?: number;
    uninterpretedOptionCount?: number;
    uninterpretedOptionList?: Array<UninterpretedOption>;
    uninterpretedOptionOrBuilderList?: Array<UninterpretedOptionOrBuilder>;
    unknownFields?: UnknownFieldSet;
    verification?: 'DECLARATION' | 'UNVERIFIED';
};

export type ExtensionRangeOptionsOrBuilder = {
    allFields?: {
        [key: string]: unknown;
    };
    declarationCount?: number;
    declarationList?: Array<Declaration>;
    declarationOrBuilderList?: Array<DeclarationOrBuilder>;
    defaultInstanceForType?: Message;
    descriptorForType?: Descriptor;
    features?: FeatureSet;
    featuresOrBuilder?: FeatureSetOrBuilder;
    initializationErrorString?: string;
    initialized?: boolean;
    uninterpretedOptionCount?: number;
    uninterpretedOptionList?: Array<UninterpretedOption>;
    uninterpretedOptionOrBuilderList?: Array<UninterpretedOptionOrBuilder>;
    unknownFields?: UnknownFieldSet;
    verification?: 'DECLARATION' | 'UNVERIFIED';
};

export type ExtensionRangeOrBuilder = {
    allFields?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: Message;
    descriptorForType?: Descriptor;
    end?: number;
    initializationErrorString?: string;
    initialized?: boolean;
    options?: ExtensionRangeOptions;
    optionsOrBuilder?: ExtensionRangeOptionsOrBuilder;
    start?: number;
    unknownFields?: UnknownFieldSet;
};

export type FeatureSet = {
    allFields?: {
        [key: string]: unknown;
    };
    allFieldsRaw?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: FeatureSet;
    descriptorForType?: Descriptor;
    enumType?: 'ENUM_TYPE_UNKNOWN' | 'OPEN' | 'CLOSED';
    fieldPresence?: 'FIELD_PRESENCE_UNKNOWN' | 'EXPLICIT' | 'IMPLICIT' | 'LEGACY_REQUIRED';
    initializationErrorString?: string;
    initialized?: boolean;
    jsonFormat?: 'JSON_FORMAT_UNKNOWN' | 'ALLOW' | 'LEGACY_BEST_EFFORT';
    memoizedSerializedSize?: number;
    messageEncoding?: 'MESSAGE_ENCODING_UNKNOWN' | 'LENGTH_PREFIXED' | 'DELIMITED';
    parserForType?: ParserFeatureSet;
    repeatedFieldEncoding?: 'REPEATED_FIELD_ENCODING_UNKNOWN' | 'PACKED' | 'EXPANDED';
    serializedSize?: number;
    unknownFields?: UnknownFieldSet;
    utf8Validation?: 'UTF8_VALIDATION_UNKNOWN' | 'NONE' | 'VERIFY';
};

export type FeatureSetOrBuilder = {
    allFields?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: Message;
    descriptorForType?: Descriptor;
    enumType?: 'ENUM_TYPE_UNKNOWN' | 'OPEN' | 'CLOSED';
    fieldPresence?: 'FIELD_PRESENCE_UNKNOWN' | 'EXPLICIT' | 'IMPLICIT' | 'LEGACY_REQUIRED';
    initializationErrorString?: string;
    initialized?: boolean;
    jsonFormat?: 'JSON_FORMAT_UNKNOWN' | 'ALLOW' | 'LEGACY_BEST_EFFORT';
    messageEncoding?: 'MESSAGE_ENCODING_UNKNOWN' | 'LENGTH_PREFIXED' | 'DELIMITED';
    repeatedFieldEncoding?: 'REPEATED_FIELD_ENCODING_UNKNOWN' | 'PACKED' | 'EXPANDED';
    unknownFields?: UnknownFieldSet;
    utf8Validation?: 'UTF8_VALIDATION_UNKNOWN' | 'NONE' | 'VERIFY';
};

export type FieldDescriptor = {
    containingOneof?: OneofDescriptor;
    containingType?: Descriptor;
    defaultValue?: {
        [key: string]: unknown;
    };
    enumType?: EnumDescriptor;
    extension?: boolean;
    extensionScope?: Descriptor;
    file?: FileDescriptor;
    fullName?: string;
    index?: number;
    javaType?: 'INT' | 'LONG' | 'FLOAT' | 'DOUBLE' | 'BOOLEAN' | 'STRING' | 'BYTE_STRING' | 'ENUM' | 'MESSAGE';
    jsonName?: string;
    liteJavaType?: 'INT' | 'LONG' | 'FLOAT' | 'DOUBLE' | 'BOOLEAN' | 'STRING' | 'BYTE_STRING' | 'ENUM' | 'MESSAGE';
    liteType?: 'DOUBLE' | 'FLOAT' | 'INT64' | 'UINT64' | 'INT32' | 'FIXED64' | 'FIXED32' | 'BOOL' | 'STRING' | 'GROUP' | 'MESSAGE' | 'BYTES' | 'UINT32' | 'ENUM' | 'SFIXED32' | 'SFIXED64' | 'SINT32' | 'SINT64';
    mapField?: boolean;
    messageType?: Descriptor;
    name?: string;
    number?: number;
    optional?: boolean;
    options?: FieldOptions;
    packable?: boolean;
    packed?: boolean;
    proto?: FieldDescriptorProto;
    realContainingOneof?: OneofDescriptor;
    repeated?: boolean;
    required?: boolean;
    type?: 'DOUBLE' | 'FLOAT' | 'INT64' | 'UINT64' | 'INT32' | 'FIXED64' | 'FIXED32' | 'BOOL' | 'STRING' | 'GROUP' | 'MESSAGE' | 'BYTES' | 'UINT32' | 'ENUM' | 'SFIXED32' | 'SFIXED64' | 'SINT32' | 'SINT64';
};

export type FieldDescriptorProto = {
    allFields?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: FieldDescriptorProto;
    defaultValue?: string;
    defaultValueBytes?: ByteString;
    descriptorForType?: Descriptor;
    extendee?: string;
    extendeeBytes?: ByteString;
    initializationErrorString?: string;
    initialized?: boolean;
    jsonName?: string;
    jsonNameBytes?: ByteString;
    label?: 'LABEL_OPTIONAL' | 'LABEL_REPEATED' | 'LABEL_REQUIRED';
    memoizedSerializedSize?: number;
    name?: string;
    nameBytes?: ByteString;
    number?: number;
    oneofIndex?: number;
    options?: FieldOptions;
    optionsOrBuilder?: FieldOptionsOrBuilder;
    parserForType?: ParserFieldDescriptorProto;
    proto3Optional?: boolean;
    serializedSize?: number;
    type?: 'TYPE_DOUBLE' | 'TYPE_FLOAT' | 'TYPE_INT64' | 'TYPE_UINT64' | 'TYPE_INT32' | 'TYPE_FIXED64' | 'TYPE_FIXED32' | 'TYPE_BOOL' | 'TYPE_STRING' | 'TYPE_GROUP' | 'TYPE_MESSAGE' | 'TYPE_BYTES' | 'TYPE_UINT32' | 'TYPE_ENUM' | 'TYPE_SFIXED32' | 'TYPE_SFIXED64' | 'TYPE_SINT32' | 'TYPE_SINT64';
    typeName?: string;
    typeNameBytes?: ByteString;
    unknownFields?: UnknownFieldSet;
};

export type FieldDescriptorProtoOrBuilder = {
    allFields?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: Message;
    defaultValue?: string;
    defaultValueBytes?: ByteString;
    descriptorForType?: Descriptor;
    extendee?: string;
    extendeeBytes?: ByteString;
    initializationErrorString?: string;
    initialized?: boolean;
    jsonName?: string;
    jsonNameBytes?: ByteString;
    label?: 'LABEL_OPTIONAL' | 'LABEL_REPEATED' | 'LABEL_REQUIRED';
    name?: string;
    nameBytes?: ByteString;
    number?: number;
    oneofIndex?: number;
    options?: FieldOptions;
    optionsOrBuilder?: FieldOptionsOrBuilder;
    proto3Optional?: boolean;
    type?: 'TYPE_DOUBLE' | 'TYPE_FLOAT' | 'TYPE_INT64' | 'TYPE_UINT64' | 'TYPE_INT32' | 'TYPE_FIXED64' | 'TYPE_FIXED32' | 'TYPE_BOOL' | 'TYPE_STRING' | 'TYPE_GROUP' | 'TYPE_MESSAGE' | 'TYPE_BYTES' | 'TYPE_UINT32' | 'TYPE_ENUM' | 'TYPE_SFIXED32' | 'TYPE_SFIXED64' | 'TYPE_SINT32' | 'TYPE_SINT64';
    typeName?: string;
    typeNameBytes?: ByteString;
    unknownFields?: UnknownFieldSet;
};

export type FieldOptions = {
    allFields?: {
        [key: string]: unknown;
    };
    allFieldsRaw?: {
        [key: string]: unknown;
    };
    ctype?: 'STRING' | 'CORD' | 'STRING_PIECE';
    debugRedact?: boolean;
    defaultInstanceForType?: FieldOptions;
    deprecated?: boolean;
    descriptorForType?: Descriptor;
    editionDefaultsCount?: number;
    editionDefaultsList?: Array<EditionDefault>;
    editionDefaultsOrBuilderList?: Array<EditionDefaultOrBuilder>;
    features?: FeatureSet;
    featuresOrBuilder?: FeatureSetOrBuilder;
    initializationErrorString?: string;
    initialized?: boolean;
    jstype?: 'JS_NORMAL' | 'JS_STRING' | 'JS_NUMBER';
    lazy?: boolean;
    memoizedSerializedSize?: number;
    packed?: boolean;
    parserForType?: ParserFieldOptions;
    retention?: 'RETENTION_UNKNOWN' | 'RETENTION_RUNTIME' | 'RETENTION_SOURCE';
    serializedSize?: number;
    targetsCount?: number;
    targetsList?: Array<'TARGET_TYPE_UNKNOWN' | 'TARGET_TYPE_FILE' | 'TARGET_TYPE_EXTENSION_RANGE' | 'TARGET_TYPE_MESSAGE' | 'TARGET_TYPE_FIELD' | 'TARGET_TYPE_ONEOF' | 'TARGET_TYPE_ENUM' | 'TARGET_TYPE_ENUM_ENTRY' | 'TARGET_TYPE_SERVICE' | 'TARGET_TYPE_METHOD'>;
    uninterpretedOptionCount?: number;
    uninterpretedOptionList?: Array<UninterpretedOption>;
    uninterpretedOptionOrBuilderList?: Array<UninterpretedOptionOrBuilder>;
    unknownFields?: UnknownFieldSet;
    unverifiedLazy?: boolean;
    weak?: boolean;
};

export type FieldOptionsOrBuilder = {
    allFields?: {
        [key: string]: unknown;
    };
    ctype?: 'STRING' | 'CORD' | 'STRING_PIECE';
    debugRedact?: boolean;
    defaultInstanceForType?: Message;
    deprecated?: boolean;
    descriptorForType?: Descriptor;
    editionDefaultsCount?: number;
    editionDefaultsList?: Array<EditionDefault>;
    editionDefaultsOrBuilderList?: Array<EditionDefaultOrBuilder>;
    features?: FeatureSet;
    featuresOrBuilder?: FeatureSetOrBuilder;
    initializationErrorString?: string;
    initialized?: boolean;
    jstype?: 'JS_NORMAL' | 'JS_STRING' | 'JS_NUMBER';
    lazy?: boolean;
    packed?: boolean;
    retention?: 'RETENTION_UNKNOWN' | 'RETENTION_RUNTIME' | 'RETENTION_SOURCE';
    targetsCount?: number;
    targetsList?: Array<'TARGET_TYPE_UNKNOWN' | 'TARGET_TYPE_FILE' | 'TARGET_TYPE_EXTENSION_RANGE' | 'TARGET_TYPE_MESSAGE' | 'TARGET_TYPE_FIELD' | 'TARGET_TYPE_ONEOF' | 'TARGET_TYPE_ENUM' | 'TARGET_TYPE_ENUM_ENTRY' | 'TARGET_TYPE_SERVICE' | 'TARGET_TYPE_METHOD'>;
    uninterpretedOptionCount?: number;
    uninterpretedOptionList?: Array<UninterpretedOption>;
    uninterpretedOptionOrBuilderList?: Array<UninterpretedOptionOrBuilder>;
    unknownFields?: UnknownFieldSet;
    unverifiedLazy?: boolean;
    weak?: boolean;
};

export type FileDescriptor = {
    dependencies?: Array<FileDescriptor>;
    edition?: 'EDITION_UNKNOWN' | 'EDITION_PROTO2' | 'EDITION_PROTO3' | 'EDITION_2023' | 'EDITION_1_TEST_ONLY' | 'EDITION_2_TEST_ONLY' | 'EDITION_99997_TEST_ONLY' | 'EDITION_99998_TEST_ONLY' | 'EDITION_99999_TEST_ONLY';
    editionName?: string;
    enumTypes?: Array<EnumDescriptor>;
    extensions?: Array<FieldDescriptor>;
    file?: FileDescriptor;
    fullName?: string;
    messageTypes?: Array<Descriptor>;
    name?: string;
    options?: FileOptions;
    package?: string;
    proto?: FileDescriptorProto;
    publicDependencies?: Array<FileDescriptor>;
    services?: Array<ServiceDescriptor>;
    /**
     * @deprecated
     */
    syntax?: 'UNKNOWN' | 'PROTO2' | 'PROTO3' | 'EDITIONS';
};

export type FileDescriptorProto = {
    allFields?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: FileDescriptorProto;
    dependencyCount?: number;
    dependencyList?: Array<string>;
    descriptorForType?: Descriptor;
    edition?: 'EDITION_UNKNOWN' | 'EDITION_PROTO2' | 'EDITION_PROTO3' | 'EDITION_2023' | 'EDITION_1_TEST_ONLY' | 'EDITION_2_TEST_ONLY' | 'EDITION_99997_TEST_ONLY' | 'EDITION_99998_TEST_ONLY' | 'EDITION_99999_TEST_ONLY';
    enumTypeCount?: number;
    enumTypeList?: Array<EnumDescriptorProto>;
    enumTypeOrBuilderList?: Array<EnumDescriptorProtoOrBuilder>;
    extensionCount?: number;
    extensionList?: Array<FieldDescriptorProto>;
    extensionOrBuilderList?: Array<FieldDescriptorProtoOrBuilder>;
    initializationErrorString?: string;
    initialized?: boolean;
    memoizedSerializedSize?: number;
    messageTypeCount?: number;
    messageTypeList?: Array<DescriptorProto>;
    messageTypeOrBuilderList?: Array<DescriptorProtoOrBuilder>;
    name?: string;
    nameBytes?: ByteString;
    options?: FileOptions;
    optionsOrBuilder?: FileOptionsOrBuilder;
    package?: string;
    packageBytes?: ByteString;
    parserForType?: ParserFileDescriptorProto;
    publicDependencyCount?: number;
    publicDependencyList?: Array<number>;
    serializedSize?: number;
    serviceCount?: number;
    serviceList?: Array<ServiceDescriptorProto>;
    serviceOrBuilderList?: Array<ServiceDescriptorProtoOrBuilder>;
    sourceCodeInfo?: SourceCodeInfo;
    sourceCodeInfoOrBuilder?: SourceCodeInfoOrBuilder;
    syntax?: string;
    syntaxBytes?: ByteString;
    unknownFields?: UnknownFieldSet;
    weakDependencyCount?: number;
    weakDependencyList?: Array<number>;
};

export type FileOptions = {
    allFields?: {
        [key: string]: unknown;
    };
    allFieldsRaw?: {
        [key: string]: unknown;
    };
    ccEnableArenas?: boolean;
    ccGenericServices?: boolean;
    csharpNamespace?: string;
    csharpNamespaceBytes?: ByteString;
    defaultInstanceForType?: FileOptions;
    deprecated?: boolean;
    descriptorForType?: Descriptor;
    features?: FeatureSet;
    featuresOrBuilder?: FeatureSetOrBuilder;
    goPackage?: string;
    goPackageBytes?: ByteString;
    initializationErrorString?: string;
    initialized?: boolean;
    /**
     * @deprecated
     */
    javaGenerateEqualsAndHash?: boolean;
    javaGenericServices?: boolean;
    javaMultipleFiles?: boolean;
    javaOuterClassname?: string;
    javaOuterClassnameBytes?: ByteString;
    javaPackage?: string;
    javaPackageBytes?: ByteString;
    javaStringCheckUtf8?: boolean;
    memoizedSerializedSize?: number;
    objcClassPrefix?: string;
    objcClassPrefixBytes?: ByteString;
    optimizeFor?: 'SPEED' | 'CODE_SIZE' | 'LITE_RUNTIME';
    parserForType?: ParserFileOptions;
    phpClassPrefix?: string;
    phpClassPrefixBytes?: ByteString;
    phpGenericServices?: boolean;
    phpMetadataNamespace?: string;
    phpMetadataNamespaceBytes?: ByteString;
    phpNamespace?: string;
    phpNamespaceBytes?: ByteString;
    pyGenericServices?: boolean;
    rubyPackage?: string;
    rubyPackageBytes?: ByteString;
    serializedSize?: number;
    swiftPrefix?: string;
    swiftPrefixBytes?: ByteString;
    uninterpretedOptionCount?: number;
    uninterpretedOptionList?: Array<UninterpretedOption>;
    uninterpretedOptionOrBuilderList?: Array<UninterpretedOptionOrBuilder>;
    unknownFields?: UnknownFieldSet;
};

export type FileOptionsOrBuilder = {
    allFields?: {
        [key: string]: unknown;
    };
    ccEnableArenas?: boolean;
    ccGenericServices?: boolean;
    csharpNamespace?: string;
    csharpNamespaceBytes?: ByteString;
    defaultInstanceForType?: Message;
    deprecated?: boolean;
    descriptorForType?: Descriptor;
    features?: FeatureSet;
    featuresOrBuilder?: FeatureSetOrBuilder;
    goPackage?: string;
    goPackageBytes?: ByteString;
    initializationErrorString?: string;
    initialized?: boolean;
    /**
     * @deprecated
     */
    javaGenerateEqualsAndHash?: boolean;
    javaGenericServices?: boolean;
    javaMultipleFiles?: boolean;
    javaOuterClassname?: string;
    javaOuterClassnameBytes?: ByteString;
    javaPackage?: string;
    javaPackageBytes?: ByteString;
    javaStringCheckUtf8?: boolean;
    objcClassPrefix?: string;
    objcClassPrefixBytes?: ByteString;
    optimizeFor?: 'SPEED' | 'CODE_SIZE' | 'LITE_RUNTIME';
    phpClassPrefix?: string;
    phpClassPrefixBytes?: ByteString;
    phpGenericServices?: boolean;
    phpMetadataNamespace?: string;
    phpMetadataNamespaceBytes?: ByteString;
    phpNamespace?: string;
    phpNamespaceBytes?: ByteString;
    pyGenericServices?: boolean;
    rubyPackage?: string;
    rubyPackageBytes?: ByteString;
    swiftPrefix?: string;
    swiftPrefixBytes?: ByteString;
    uninterpretedOptionCount?: number;
    uninterpretedOptionList?: Array<UninterpretedOption>;
    uninterpretedOptionOrBuilderList?: Array<UninterpretedOptionOrBuilder>;
    unknownFields?: UnknownFieldSet;
};

export type GenerateTokenRequest = {
    expiration?: number;
    keyId: string;
    keySecret: string;
};

export type GrantedAccess = {
    access?: Array<'CREATE' | 'READ' | 'EXECUTE' | 'UPDATE' | 'DELETE'>;
    tag?: string;
    target?: TargetRef;
};

export type GrantedAccessResponse = {
    grantedAccess?: Array<GrantedAccess>;
};

export type Group = {
    defaultAccess?: {
        [key: string]: Array<'CREATE' | 'READ' | 'EXECUTE' | 'UPDATE' | 'DELETE'>;
    };
    description?: string;
    id?: string;
    roles?: Array<Role>;
};

export type HandledEventResponse = {
    active?: boolean;
    event?: string;
    name?: string;
    numberOfActions?: number;
    numberOfMessages?: number;
};

export type HumanTaskAssignment = {
    assignee?: HumanTaskUser;
    slaMinutes?: number;
};

export type HumanTaskDefinition = {
    assignmentCompletionStrategy?: 'LEAVE_OPEN' | 'TERMINATE';
    assignments?: Array<HumanTaskAssignment>;
    displayName?: string;
    fullTemplate?: HumanTaskTemplate;
    taskTriggers?: Array<HumanTaskTrigger>;
    userFormTemplate?: UserFormTemplate;
};

export type HumanTaskEntry = {
    assignee?: HumanTaskUser;
    claimant?: HumanTaskUser;
    createdBy?: string;
    createdOn?: number;
    definitionName?: string;
    displayName?: string;
    humanTaskDef?: HumanTaskDefinition;
    input?: {
        [key: string]: unknown;
    };
    output?: {
        [key: string]: unknown;
    };
    ownerApp?: string;
    state?: 'PENDING' | 'ASSIGNED' | 'IN_PROGRESS' | 'COMPLETED' | 'TIMED_OUT' | 'DELETED';
    taskId?: string;
    taskRefName?: string;
    updatedBy?: string;
    updatedOn?: number;
    workflowId?: string;
    workflowName?: string;
};

export type HumanTaskSearch = {
    assignees?: Array<HumanTaskUser>;
    claimants?: Array<HumanTaskUser>;
    definitionNames?: Array<string>;
    displayNames?: Array<string>;
    fullTextQuery?: string;
    searchType?: 'ADMIN' | 'INBOX';
    size?: number;
    start?: number;
    states?: Array<'PENDING' | 'ASSIGNED' | 'IN_PROGRESS' | 'COMPLETED' | 'TIMED_OUT' | 'DELETED'>;
    taskInputQuery?: string;
    taskOutputQuery?: string;
    taskRefNames?: Array<string>;
    updateEndTime?: number;
    updateStartTime?: number;
    workflowIds?: Array<string>;
    workflowNames?: Array<string>;
};

export type HumanTaskSearchResult = {
    hits?: number;
    pageSizeLimit?: number;
    results?: Array<HumanTaskEntry>;
    start?: number;
    totalHits?: number;
};

export type HumanTaskTemplate = {
    createTime?: number;
    createdBy?: string;
    jsonSchema: {
        [key: string]: unknown;
    };
    name: string;
    ownerApp?: string;
    tags?: Array<Tag>;
    templateUI: {
        [key: string]: unknown;
    };
    updateTime?: number;
    updatedBy?: string;
    version: number;
};

export type HumanTaskTrigger = {
    startWorkflowRequest?: StartWorkflowRequest;
    triggerType?: 'ASSIGNEE_CHANGED' | 'CLAIMANT_CHANGED' | 'PENDING' | 'IN_PROGRESS' | 'ASSIGNED' | 'COMPLETED' | 'TIMED_OUT';
};

export type HumanTaskUser = {
    user?: string;
    userType?: 'EXTERNAL_USER' | 'EXTERNAL_GROUP' | 'CONDUCTOR_USER' | 'CONDUCTOR_GROUP';
};

export type IncomingBpmnFile = {
    fileContent: string;
    fileName: string;
};

export type Integration = {
    apis?: Array<IntegrationApi>;
    category?: 'API' | 'AI_MODEL' | 'VECTOR_DB' | 'RELATIONAL_DB' | 'MESSAGE_BROKER' | 'GIT' | 'EMAIL' | 'MCP';
    configuration?: {
        [key: string]: unknown;
    };
    createTime?: number;
    createdBy?: string;
    description?: string;
    enabled?: boolean;
    modelsCount?: number;
    name?: string;
    ownerApp?: string;
    tags?: Array<Tag>;
    type?: string;
    updateTime?: number;
    updatedBy?: string;
};

export type IntegrationApi = {
    api?: string;
    configuration?: {
        [key: string]: unknown;
    };
    createTime?: number;
    createdBy?: string;
    description?: string;
    enabled?: boolean;
    integrationName?: string;
    ownerApp?: string;
    tags?: Array<Tag>;
    updateTime?: number;
    updatedBy?: string;
};

export type IntegrationApiUpdate = {
    configuration?: {
        [key: string]: unknown;
    };
    description?: string;
    enabled?: boolean;
};

export type IntegrationDef = {
    apis?: Array<IntegrationDefApi>;
    category?: 'API' | 'AI_MODEL' | 'VECTOR_DB' | 'RELATIONAL_DB' | 'MESSAGE_BROKER' | 'GIT' | 'EMAIL' | 'MCP';
    categoryLabel?: string;
    configuration?: Array<IntegrationDefFormField>;
    description?: string;
    enabled?: boolean;
    iconName?: string;
    name?: string;
    tags?: Array<string>;
    type?: string;
};

export type IntegrationDefApi = {
    api?: string;
    description?: string;
    inputSchema?: SchemaDef;
    integrationType?: string;
    outputSchema?: SchemaDef;
};

export type IntegrationDefFormField = {
    defaultValue?: string;
    description?: string;
    fieldName?: 'api_key' | 'user' | 'endpoint' | 'authUrl' | 'environment' | 'projectName' | 'indexName' | 'publisher' | 'password' | 'namespace' | 'batchSize' | 'batchWaitTime' | 'visibilityTimeout' | 'connectionType' | 'connectionPoolSize' | 'consumer' | 'stream' | 'batchPollConsumersCount' | 'consumer_type' | 'region' | 'awsAccountId' | 'externalId' | 'roleArn' | 'protocol' | 'mechanism' | 'port' | 'schemaRegistryUrl' | 'schemaRegistryApiKey' | 'schemaRegistryApiSecret' | 'authenticationType' | 'truststoreAuthenticationType' | 'tls' | 'cipherSuite' | 'pubSubMethod' | 'keyStorePassword' | 'keyStoreLocation' | 'schemaRegistryAuthType' | 'valueSubjectNameStrategy' | 'datasourceURL' | 'jdbcDriver' | 'subscription' | 'serviceAccountCredentials' | 'file' | 'tlsFile' | 'queueManager' | 'groupId' | 'channel' | 'dimensions' | 'distance_metric' | 'indexing_method' | 'inverted_list_count' | 'pullPeriod' | 'pullBatchWaitMillis' | 'completionsPath' | 'betaVersion' | 'version';
    fieldType?: 'DROPDOWN' | 'TEXT' | 'PASSWORD' | 'FILE';
    label?: string;
    optional?: boolean;
    value?: string;
    valueOptions?: Array<Option>;
};

export type IntegrationUpdate = {
    category?: 'API' | 'AI_MODEL' | 'VECTOR_DB' | 'RELATIONAL_DB' | 'MESSAGE_BROKER' | 'GIT' | 'EMAIL' | 'MCP';
    configuration?: {
        [key: string]: unknown;
    };
    description?: string;
    enabled?: boolean;
    type?: string;
};

export type Location = {
    allFields?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: Location;
    descriptorForType?: Descriptor;
    initializationErrorString?: string;
    initialized?: boolean;
    leadingComments?: string;
    leadingCommentsBytes?: ByteString;
    leadingDetachedCommentsCount?: number;
    leadingDetachedCommentsList?: Array<string>;
    memoizedSerializedSize?: number;
    parserForType?: ParserLocation;
    pathCount?: number;
    pathList?: Array<number>;
    serializedSize?: number;
    spanCount?: number;
    spanList?: Array<number>;
    trailingComments?: string;
    trailingCommentsBytes?: ByteString;
    unknownFields?: UnknownFieldSet;
};

export type LocationOrBuilder = {
    allFields?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: Message;
    descriptorForType?: Descriptor;
    initializationErrorString?: string;
    initialized?: boolean;
    leadingComments?: string;
    leadingCommentsBytes?: ByteString;
    leadingDetachedCommentsCount?: number;
    leadingDetachedCommentsList?: Array<string>;
    pathCount?: number;
    pathList?: Array<number>;
    spanCount?: number;
    spanList?: Array<number>;
    trailingComments?: string;
    trailingCommentsBytes?: ByteString;
    unknownFields?: UnknownFieldSet;
};

export type Message = {
    allFields?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: MessageLite;
    descriptorForType?: Descriptor;
    initializationErrorString?: string;
    initialized?: boolean;
    parserForType?: ParserMessage;
    serializedSize?: number;
    unknownFields?: UnknownFieldSet;
};

export type MessageLite = {
    defaultInstanceForType?: MessageLite;
    initialized?: boolean;
    parserForType?: ParserMessageLite;
    serializedSize?: number;
};

export type MessageOptions = {
    allFields?: {
        [key: string]: unknown;
    };
    allFieldsRaw?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: MessageOptions;
    deprecated?: boolean;
    /**
     * @deprecated
     */
    deprecatedLegacyJsonFieldConflicts?: boolean;
    descriptorForType?: Descriptor;
    features?: FeatureSet;
    featuresOrBuilder?: FeatureSetOrBuilder;
    initializationErrorString?: string;
    initialized?: boolean;
    mapEntry?: boolean;
    memoizedSerializedSize?: number;
    messageSetWireFormat?: boolean;
    noStandardDescriptorAccessor?: boolean;
    parserForType?: ParserMessageOptions;
    serializedSize?: number;
    uninterpretedOptionCount?: number;
    uninterpretedOptionList?: Array<UninterpretedOption>;
    uninterpretedOptionOrBuilderList?: Array<UninterpretedOptionOrBuilder>;
    unknownFields?: UnknownFieldSet;
};

export type MessageOptionsOrBuilder = {
    allFields?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: Message;
    deprecated?: boolean;
    /**
     * @deprecated
     */
    deprecatedLegacyJsonFieldConflicts?: boolean;
    descriptorForType?: Descriptor;
    features?: FeatureSet;
    featuresOrBuilder?: FeatureSetOrBuilder;
    initializationErrorString?: string;
    initialized?: boolean;
    mapEntry?: boolean;
    messageSetWireFormat?: boolean;
    noStandardDescriptorAccessor?: boolean;
    uninterpretedOptionCount?: number;
    uninterpretedOptionList?: Array<UninterpretedOption>;
    uninterpretedOptionOrBuilderList?: Array<UninterpretedOptionOrBuilder>;
    unknownFields?: UnknownFieldSet;
};

export type MessageTemplate = {
    createTime?: number;
    createdBy?: string;
    description?: string;
    integrations?: Array<string>;
    name?: string;
    ownerApp?: string;
    tags?: Array<Tag>;
    template?: string;
    updateTime?: number;
    updatedBy?: string;
    variables?: Array<string>;
    version?: number;
};

export type MethodDescriptor = {
    clientStreaming?: boolean;
    file?: FileDescriptor;
    fullName?: string;
    index?: number;
    inputType?: Descriptor;
    name?: string;
    options?: MethodOptions;
    outputType?: Descriptor;
    proto?: MethodDescriptorProto;
    serverStreaming?: boolean;
    service?: ServiceDescriptor;
};

export type MethodDescriptorProto = {
    allFields?: {
        [key: string]: unknown;
    };
    clientStreaming?: boolean;
    defaultInstanceForType?: MethodDescriptorProto;
    descriptorForType?: Descriptor;
    initializationErrorString?: string;
    initialized?: boolean;
    inputType?: string;
    inputTypeBytes?: ByteString;
    memoizedSerializedSize?: number;
    name?: string;
    nameBytes?: ByteString;
    options?: MethodOptions;
    optionsOrBuilder?: MethodOptionsOrBuilder;
    outputType?: string;
    outputTypeBytes?: ByteString;
    parserForType?: ParserMethodDescriptorProto;
    serializedSize?: number;
    serverStreaming?: boolean;
    unknownFields?: UnknownFieldSet;
};

export type MethodDescriptorProtoOrBuilder = {
    allFields?: {
        [key: string]: unknown;
    };
    clientStreaming?: boolean;
    defaultInstanceForType?: Message;
    descriptorForType?: Descriptor;
    initializationErrorString?: string;
    initialized?: boolean;
    inputType?: string;
    inputTypeBytes?: ByteString;
    name?: string;
    nameBytes?: ByteString;
    options?: MethodOptions;
    optionsOrBuilder?: MethodOptionsOrBuilder;
    outputType?: string;
    outputTypeBytes?: ByteString;
    serverStreaming?: boolean;
    unknownFields?: UnknownFieldSet;
};

export type MethodOptions = {
    allFields?: {
        [key: string]: unknown;
    };
    allFieldsRaw?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: MethodOptions;
    deprecated?: boolean;
    descriptorForType?: Descriptor;
    features?: FeatureSet;
    featuresOrBuilder?: FeatureSetOrBuilder;
    idempotencyLevel?: 'IDEMPOTENCY_UNKNOWN' | 'NO_SIDE_EFFECTS' | 'IDEMPOTENT';
    initializationErrorString?: string;
    initialized?: boolean;
    memoizedSerializedSize?: number;
    parserForType?: ParserMethodOptions;
    serializedSize?: number;
    uninterpretedOptionCount?: number;
    uninterpretedOptionList?: Array<UninterpretedOption>;
    uninterpretedOptionOrBuilderList?: Array<UninterpretedOptionOrBuilder>;
    unknownFields?: UnknownFieldSet;
};

export type MethodOptionsOrBuilder = {
    allFields?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: Message;
    deprecated?: boolean;
    descriptorForType?: Descriptor;
    features?: FeatureSet;
    featuresOrBuilder?: FeatureSetOrBuilder;
    idempotencyLevel?: 'IDEMPOTENCY_UNKNOWN' | 'NO_SIDE_EFFECTS' | 'IDEMPOTENT';
    initializationErrorString?: string;
    initialized?: boolean;
    uninterpretedOptionCount?: number;
    uninterpretedOptionList?: Array<UninterpretedOption>;
    uninterpretedOptionOrBuilderList?: Array<UninterpretedOptionOrBuilder>;
    unknownFields?: UnknownFieldSet;
};

export type NamePart = {
    allFields?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: NamePart;
    descriptorForType?: Descriptor;
    initializationErrorString?: string;
    initialized?: boolean;
    isExtension?: boolean;
    memoizedSerializedSize?: number;
    namePart?: string;
    namePartBytes?: ByteString;
    parserForType?: ParserNamePart;
    serializedSize?: number;
    unknownFields?: UnknownFieldSet;
};

export type NamePartOrBuilder = {
    allFields?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: Message;
    descriptorForType?: Descriptor;
    initializationErrorString?: string;
    initialized?: boolean;
    isExtension?: boolean;
    namePart?: string;
    namePartBytes?: ByteString;
    unknownFields?: UnknownFieldSet;
};

export type OneofDescriptor = {
    containingType?: Descriptor;
    fieldCount?: number;
    file?: FileDescriptor;
    fullName?: string;
    index?: number;
    name?: string;
    options?: OneofOptions;
    proto?: OneofDescriptorProto;
    /**
     * @deprecated
     */
    synthetic?: boolean;
};

export type OneofDescriptorProto = {
    allFields?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: OneofDescriptorProto;
    descriptorForType?: Descriptor;
    initializationErrorString?: string;
    initialized?: boolean;
    memoizedSerializedSize?: number;
    name?: string;
    nameBytes?: ByteString;
    options?: OneofOptions;
    optionsOrBuilder?: OneofOptionsOrBuilder;
    parserForType?: ParserOneofDescriptorProto;
    serializedSize?: number;
    unknownFields?: UnknownFieldSet;
};

export type OneofDescriptorProtoOrBuilder = {
    allFields?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: Message;
    descriptorForType?: Descriptor;
    initializationErrorString?: string;
    initialized?: boolean;
    name?: string;
    nameBytes?: ByteString;
    options?: OneofOptions;
    optionsOrBuilder?: OneofOptionsOrBuilder;
    unknownFields?: UnknownFieldSet;
};

export type OneofOptions = {
    allFields?: {
        [key: string]: unknown;
    };
    allFieldsRaw?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: OneofOptions;
    descriptorForType?: Descriptor;
    features?: FeatureSet;
    featuresOrBuilder?: FeatureSetOrBuilder;
    initializationErrorString?: string;
    initialized?: boolean;
    memoizedSerializedSize?: number;
    parserForType?: ParserOneofOptions;
    serializedSize?: number;
    uninterpretedOptionCount?: number;
    uninterpretedOptionList?: Array<UninterpretedOption>;
    uninterpretedOptionOrBuilderList?: Array<UninterpretedOptionOrBuilder>;
    unknownFields?: UnknownFieldSet;
};

export type OneofOptionsOrBuilder = {
    allFields?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: Message;
    descriptorForType?: Descriptor;
    features?: FeatureSet;
    featuresOrBuilder?: FeatureSetOrBuilder;
    initializationErrorString?: string;
    initialized?: boolean;
    uninterpretedOptionCount?: number;
    uninterpretedOptionList?: Array<UninterpretedOption>;
    uninterpretedOptionOrBuilderList?: Array<UninterpretedOptionOrBuilder>;
    unknownFields?: UnknownFieldSet;
};

export type Option = {
    label?: string;
    value?: string;
};

export type OrkesCircuitBreakerConfig = {
    automaticTransitionFromOpenToHalfOpenEnabled?: boolean;
    failureRateThreshold?: number;
    maxWaitDurationInHalfOpenState?: number;
    minimumNumberOfCalls?: number;
    permittedNumberOfCallsInHalfOpenState?: number;
    slidingWindowSize?: number;
    slowCallDurationThreshold?: number;
    slowCallRateThreshold?: number;
    waitDurationInOpenState?: number;
};

export type Parser = {
    [key: string]: unknown;
};

export type ParserAny = {
    [key: string]: unknown;
};

export type ParserDeclaration = {
    [key: string]: unknown;
};

export type ParserDescriptorProto = {
    [key: string]: unknown;
};

export type ParserEditionDefault = {
    [key: string]: unknown;
};

export type ParserEnumDescriptorProto = {
    [key: string]: unknown;
};

export type ParserEnumOptions = {
    [key: string]: unknown;
};

export type ParserEnumReservedRange = {
    [key: string]: unknown;
};

export type ParserEnumValueDescriptorProto = {
    [key: string]: unknown;
};

export type ParserEnumValueOptions = {
    [key: string]: unknown;
};

export type ParserExtensionRange = {
    [key: string]: unknown;
};

export type ParserExtensionRangeOptions = {
    [key: string]: unknown;
};

export type ParserFeatureSet = {
    [key: string]: unknown;
};

export type ParserFieldDescriptorProto = {
    [key: string]: unknown;
};

export type ParserFieldOptions = {
    [key: string]: unknown;
};

export type ParserFileDescriptorProto = {
    [key: string]: unknown;
};

export type ParserFileOptions = {
    [key: string]: unknown;
};

export type ParserLocation = {
    [key: string]: unknown;
};

export type ParserMessage = {
    [key: string]: unknown;
};

export type ParserMessageLite = {
    [key: string]: unknown;
};

export type ParserMessageOptions = {
    [key: string]: unknown;
};

export type ParserMethodDescriptorProto = {
    [key: string]: unknown;
};

export type ParserMethodOptions = {
    [key: string]: unknown;
};

export type ParserNamePart = {
    [key: string]: unknown;
};

export type ParserOneofDescriptorProto = {
    [key: string]: unknown;
};

export type ParserOneofOptions = {
    [key: string]: unknown;
};

export type ParserReservedRange = {
    [key: string]: unknown;
};

export type ParserServiceDescriptorProto = {
    [key: string]: unknown;
};

export type ParserServiceOptions = {
    [key: string]: unknown;
};

export type ParserSourceCodeInfo = {
    [key: string]: unknown;
};

export type ParserUninterpretedOption = {
    [key: string]: unknown;
};

export type Permission = {
    name?: string;
};

export type PollData = {
    domain?: string;
    lastPollTime?: number;
    queueName?: string;
    workerId?: string;
};

export type PromptTemplateTestRequest = {
    llmProvider?: string;
    model?: string;
    prompt?: string;
    promptVariables?: {
        [key: string]: unknown;
    };
    stopWords?: Array<string>;
    temperature?: number;
    topP?: number;
};

export type ProtoRegistryEntry = {
    data?: string;
    filename?: string;
    serviceName?: string;
};

export type RateLimitConfig = {
    concurrentExecLimit?: number;
    rateLimitKey?: string;
};

export type RequestParam = {
    name?: string;
    required?: boolean;
    schema?: Schema;
    type?: string;
};

export type RerunWorkflowRequest = {
    correlationId?: string;
    reRunFromTaskId?: string;
    reRunFromWorkflowId?: string;
    taskInput?: {
        [key: string]: unknown;
    };
    workflowInput?: {
        [key: string]: unknown;
    };
};

export type ReservedRange = {
    allFields?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: ReservedRange;
    descriptorForType?: Descriptor;
    end?: number;
    initializationErrorString?: string;
    initialized?: boolean;
    memoizedSerializedSize?: number;
    parserForType?: ParserReservedRange;
    serializedSize?: number;
    start?: number;
    unknownFields?: UnknownFieldSet;
};

export type ReservedRangeOrBuilder = {
    allFields?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: Message;
    descriptorForType?: Descriptor;
    end?: number;
    initializationErrorString?: string;
    initialized?: boolean;
    start?: number;
    unknownFields?: UnknownFieldSet;
};

export type Response = {
    [key: string]: unknown;
};

export type Role = {
    name?: string;
    permissions?: Array<Permission>;
};

export type SaveScheduleRequest = {
    createdBy?: string;
    cronExpression: string;
    description?: string;
    name: string;
    paused?: boolean;
    runCatchupScheduleInstances?: boolean;
    scheduleEndTime?: number;
    scheduleStartTime?: number;
    startWorkflowRequest: StartWorkflowRequest;
    updatedBy?: string;
    zoneId?: string;
};

export type Schema = {
    defaultValue?: {
        [key: string]: unknown;
    };
    format?: string;
    type?: string;
};

export type SchemaDef = {
    createTime?: number;
    createdBy?: string;
    data?: {
        [key: string]: unknown;
    };
    externalRef?: string;
    name: string;
    ownerApp?: string;
    type: 'JSON' | 'AVRO' | 'PROTOBUF';
    updateTime?: number;
    updatedBy?: string;
    version: number;
};

export type ScrollableSearchResultWorkflowSummary = {
    queryId?: string;
    results?: Array<WorkflowSummary>;
    totalHits?: number;
};

export type SearchResultHandledEventResponse = {
    results?: Array<HandledEventResponse>;
    totalHits?: number;
};

export type SearchResultTaskSummary = {
    results?: Array<TaskSummary>;
    totalHits?: number;
};

export type SearchResultWorkflowScheduleExecutionModel = {
    results?: Array<WorkflowScheduleExecutionModel>;
    totalHits?: number;
};

export type ServiceDescriptor = {
    file?: FileDescriptor;
    fullName?: string;
    index?: number;
    methods?: Array<MethodDescriptor>;
    name?: string;
    options?: ServiceOptions;
    proto?: ServiceDescriptorProto;
};

export type ServiceDescriptorProto = {
    allFields?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: ServiceDescriptorProto;
    descriptorForType?: Descriptor;
    initializationErrorString?: string;
    initialized?: boolean;
    memoizedSerializedSize?: number;
    methodCount?: number;
    methodList?: Array<MethodDescriptorProto>;
    methodOrBuilderList?: Array<MethodDescriptorProtoOrBuilder>;
    name?: string;
    nameBytes?: ByteString;
    options?: ServiceOptions;
    optionsOrBuilder?: ServiceOptionsOrBuilder;
    parserForType?: ParserServiceDescriptorProto;
    serializedSize?: number;
    unknownFields?: UnknownFieldSet;
};

export type ServiceDescriptorProtoOrBuilder = {
    allFields?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: Message;
    descriptorForType?: Descriptor;
    initializationErrorString?: string;
    initialized?: boolean;
    methodCount?: number;
    methodList?: Array<MethodDescriptorProto>;
    methodOrBuilderList?: Array<MethodDescriptorProtoOrBuilder>;
    name?: string;
    nameBytes?: ByteString;
    options?: ServiceOptions;
    optionsOrBuilder?: ServiceOptionsOrBuilder;
    unknownFields?: UnknownFieldSet;
};

export type ServiceMethod = {
    exampleInput?: {
        [key: string]: unknown;
    };
    id?: number;
    inputType?: string;
    methodName?: string;
    methodType?: string;
    operationName?: string;
    outputType?: string;
    requestParams?: Array<RequestParam>;
};

export type ServiceOptions = {
    allFields?: {
        [key: string]: unknown;
    };
    allFieldsRaw?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: ServiceOptions;
    deprecated?: boolean;
    descriptorForType?: Descriptor;
    features?: FeatureSet;
    featuresOrBuilder?: FeatureSetOrBuilder;
    initializationErrorString?: string;
    initialized?: boolean;
    memoizedSerializedSize?: number;
    parserForType?: ParserServiceOptions;
    serializedSize?: number;
    uninterpretedOptionCount?: number;
    uninterpretedOptionList?: Array<UninterpretedOption>;
    uninterpretedOptionOrBuilderList?: Array<UninterpretedOptionOrBuilder>;
    unknownFields?: UnknownFieldSet;
};

export type ServiceOptionsOrBuilder = {
    allFields?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: Message;
    deprecated?: boolean;
    descriptorForType?: Descriptor;
    features?: FeatureSet;
    featuresOrBuilder?: FeatureSetOrBuilder;
    initializationErrorString?: string;
    initialized?: boolean;
    uninterpretedOptionCount?: number;
    uninterpretedOptionList?: Array<UninterpretedOption>;
    uninterpretedOptionOrBuilderList?: Array<UninterpretedOptionOrBuilder>;
    unknownFields?: UnknownFieldSet;
};

export type ServiceRegistry = {
    circuitBreakerEnabled?: boolean;
    config?: Config;
    methods?: Array<ServiceMethod>;
    name?: string;
    requestParams?: Array<RequestParam>;
    serviceURI?: string;
    type?: 'HTTP' | 'gRPC' | 'MCP_REMOTE';
};

export type SignalResponse = {
    correlationId?: string;
    input?: {
        [key: string]: unknown;
    };
    output?: {
        [key: string]: unknown;
    };
    requestId?: string;
    responseType?: 'TARGET_WORKFLOW' | 'BLOCKING_WORKFLOW' | 'BLOCKING_TASK' | 'BLOCKING_TASK_INPUT';
    targetWorkflowId?: string;
    targetWorkflowStatus?: string;
    workflowId?: string;
};

export type SkipTaskRequest = {
    taskInput?: {
        [key: string]: unknown;
    };
    taskOutput?: {
        [key: string]: unknown;
    };
};

export type SourceCodeInfo = {
    allFields?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: SourceCodeInfo;
    descriptorForType?: Descriptor;
    initializationErrorString?: string;
    initialized?: boolean;
    locationCount?: number;
    locationList?: Array<Location>;
    locationOrBuilderList?: Array<LocationOrBuilder>;
    memoizedSerializedSize?: number;
    parserForType?: ParserSourceCodeInfo;
    serializedSize?: number;
    unknownFields?: UnknownFieldSet;
};

export type SourceCodeInfoOrBuilder = {
    allFields?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: Message;
    descriptorForType?: Descriptor;
    initializationErrorString?: string;
    initialized?: boolean;
    locationCount?: number;
    locationList?: Array<Location>;
    locationOrBuilderList?: Array<LocationOrBuilder>;
    unknownFields?: UnknownFieldSet;
};

export type StartWorkflowRequest = {
    correlationId?: string;
    createdBy?: string;
    externalInputPayloadStoragePath?: string;
    idempotencyKey?: string;
    idempotencyStrategy?: 'FAIL' | 'RETURN_EXISTING' | 'FAIL_ON_RUNNING';
    input?: {
        [key: string]: unknown;
    };
    name: string;
    priority?: number;
    taskToDomain?: {
        [key: string]: string;
    };
    version?: number;
    workflowDef?: WorkflowDef;
};

export type StateChangeEvent = {
    payload?: {
        [key: string]: unknown;
    };
    type: string;
};

export type SubWorkflowParams = {
    idempotencyKey?: string;
    idempotencyStrategy?: 'FAIL' | 'RETURN_EXISTING' | 'FAIL_ON_RUNNING';
    name?: string;
    priority?: {
        [key: string]: unknown;
    };
    taskToDomain?: {
        [key: string]: string;
    };
    version?: number;
    workflowDefinition?: {
        [key: string]: unknown;
    };
};

/**
 * User, group or role which is granted/removed access
 */
export type SubjectRef = {
    id: string;
    /**
     * User, role or group
     */
    type?: 'USER' | 'ROLE' | 'GROUP';
};

export type Tag = {
    key?: string;
    /**
     * @deprecated
     */
    type?: string;
    value?: string;
};

/**
 * The object over which access is being granted or removed
 */
export type TargetRef = {
    id: "Identifier of the target e.g. `name` in case it's a WORKFLOW_DEF";
    type: 'WORKFLOW' | 'WORKFLOW_DEF' | 'WORKFLOW_SCHEDULE' | 'EVENT_HANDLER' | 'TASK_DEF' | 'TASK_REF_NAME' | 'TASK_ID' | 'APPLICATION' | 'USER' | 'SECRET_NAME' | 'ENV_VARIABLE' | 'TAG' | 'DOMAIN' | 'INTEGRATION_PROVIDER' | 'INTEGRATION' | 'PROMPT' | 'USER_FORM_TEMPLATE' | 'SCHEMA' | 'CLUSTER_CONFIG' | 'WEBHOOK';
};

export type Task = {
    callbackAfterSeconds?: number;
    callbackFromWorker?: boolean;
    correlationId?: string;
    domain?: string;
    endTime?: number;
    executed?: boolean;
    executionNameSpace?: string;
    externalInputPayloadStoragePath?: string;
    externalOutputPayloadStoragePath?: string;
    firstStartTime?: number;
    inputData?: {
        [key: string]: unknown;
    };
    isolationGroupId?: string;
    iteration?: number;
    loopOverTask?: boolean;
    outputData?: {
        [key: string]: unknown;
    };
    parentTaskId?: string;
    pollCount?: number;
    queueWaitTime?: number;
    rateLimitFrequencyInSeconds?: number;
    rateLimitPerFrequency?: number;
    reasonForIncompletion?: string;
    referenceTaskName?: string;
    responseTimeoutSeconds?: number;
    retried?: boolean;
    retriedTaskId?: string;
    retryCount?: number;
    scheduledTime?: number;
    seq?: number;
    startDelayInSeconds?: number;
    startTime?: number;
    status?: 'IN_PROGRESS' | 'CANCELED' | 'FAILED' | 'FAILED_WITH_TERMINAL_ERROR' | 'COMPLETED' | 'COMPLETED_WITH_ERRORS' | 'SCHEDULED' | 'TIMED_OUT' | 'SKIPPED';
    subWorkflowId?: string;
    subworkflowChanged?: boolean;
    taskDefName?: string;
    taskDefinition?: TaskDef;
    taskId?: string;
    taskType?: string;
    updateTime?: number;
    workerId?: string;
    workflowInstanceId?: string;
    workflowPriority?: number;
    workflowTask?: WorkflowTask;
    workflowType?: string;
};

export type TaskDef = {
    backoffScaleFactor?: number;
    baseType?: string;
    concurrentExecLimit?: number;
    createTime?: number;
    createdBy?: string;
    description?: string;
    enforceSchema?: boolean;
    executionNameSpace?: string;
    inputKeys?: Array<string>;
    inputSchema?: SchemaDef;
    inputTemplate?: {
        [key: string]: unknown;
    };
    isolationGroupId?: string;
    name: string;
    outputKeys?: Array<string>;
    outputSchema?: SchemaDef;
    ownerApp?: string;
    ownerEmail?: string;
    pollTimeoutSeconds?: number;
    rateLimitFrequencyInSeconds?: number;
    rateLimitPerFrequency?: number;
    responseTimeoutSeconds?: number;
    retryCount?: number;
    retryDelaySeconds?: number;
    retryLogic?: 'FIXED' | 'EXPONENTIAL_BACKOFF' | 'LINEAR_BACKOFF';
    timeoutPolicy?: 'RETRY' | 'TIME_OUT_WF' | 'ALERT_ONLY';
    timeoutSeconds: number;
    totalTimeoutSeconds: number;
    updateTime?: number;
    updatedBy?: string;
};

export type TaskDetails = {
    output?: {
        [key: string]: unknown;
    };
    outputMessage?: Any;
    taskId?: string;
    taskRefName?: string;
    workflowId?: string;
};

export type TaskExecLog = {
    createdTime?: number;
    log?: string;
    taskId?: string;
};

export type TaskListSearchResultSummary = {
    results?: Array<Task>;
    summary?: {
        [key: string]: number;
    };
    totalHits?: number;
};

export type TaskMock = {
    executionTime?: number;
    output?: {
        [key: string]: unknown;
    };
    queueWaitTime?: number;
    status?: 'IN_PROGRESS' | 'FAILED' | 'FAILED_WITH_TERMINAL_ERROR' | 'COMPLETED';
};

export type TaskResult = {
    callbackAfterSeconds?: number;
    extendLease?: boolean;
    externalOutputPayloadStoragePath?: string;
    logs?: Array<TaskExecLog>;
    outputData?: {
        [key: string]: unknown;
    };
    reasonForIncompletion?: string;
    status?: 'IN_PROGRESS' | 'FAILED' | 'FAILED_WITH_TERMINAL_ERROR' | 'COMPLETED';
    subWorkflowId?: string;
    taskId: string;
    workerId?: string;
    workflowInstanceId: string;
};

export type TaskSummary = {
    correlationId?: string;
    endTime?: string;
    executionTime?: number;
    externalInputPayloadStoragePath?: string;
    externalOutputPayloadStoragePath?: string;
    input?: string;
    output?: string;
    queueWaitTime?: number;
    reasonForIncompletion?: string;
    scheduledTime?: string;
    startTime?: string;
    status?: 'IN_PROGRESS' | 'CANCELED' | 'FAILED' | 'FAILED_WITH_TERMINAL_ERROR' | 'COMPLETED' | 'COMPLETED_WITH_ERRORS' | 'SCHEDULED' | 'TIMED_OUT' | 'SKIPPED';
    taskDefName?: string;
    taskId?: string;
    taskReferenceName?: string;
    taskType?: string;
    updateTime?: string;
    workflowId?: string;
    workflowPriority?: number;
    workflowType?: string;
};

export type TerminateWorkflow = {
    terminationReason?: string;
    workflowId?: string;
};

export type TokenLimit = {
    api?: string;
    createTime?: number;
    createdBy?: string;
    integrationName?: string;
    maxTokens?: number;
    ownerApp?: string;
    tokenLimitPeriod?: 'DAY' | 'MONTH';
    updateTime?: number;
    updatedBy?: string;
};

export type TokenUsageLog = {
    api?: string;
    completionTokens?: number;
    integrationName?: string;
    periodStart?: number;
    promptTokens?: number;
    totalTokens?: number;
};

export type UninterpretedOption = {
    aggregateValue?: string;
    aggregateValueBytes?: ByteString;
    allFields?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: UninterpretedOption;
    descriptorForType?: Descriptor;
    doubleValue?: number;
    identifierValue?: string;
    identifierValueBytes?: ByteString;
    initializationErrorString?: string;
    initialized?: boolean;
    memoizedSerializedSize?: number;
    nameCount?: number;
    nameList?: Array<NamePart>;
    nameOrBuilderList?: Array<NamePartOrBuilder>;
    negativeIntValue?: number;
    parserForType?: ParserUninterpretedOption;
    positiveIntValue?: number;
    serializedSize?: number;
    stringValue?: ByteString;
    unknownFields?: UnknownFieldSet;
};

export type UninterpretedOptionOrBuilder = {
    aggregateValue?: string;
    aggregateValueBytes?: ByteString;
    allFields?: {
        [key: string]: unknown;
    };
    defaultInstanceForType?: Message;
    descriptorForType?: Descriptor;
    doubleValue?: number;
    identifierValue?: string;
    identifierValueBytes?: ByteString;
    initializationErrorString?: string;
    initialized?: boolean;
    nameCount?: number;
    nameList?: Array<NamePart>;
    nameOrBuilderList?: Array<NamePartOrBuilder>;
    negativeIntValue?: number;
    positiveIntValue?: number;
    stringValue?: ByteString;
    unknownFields?: UnknownFieldSet;
};

export type UnknownFieldSet = {
    defaultInstanceForType?: UnknownFieldSet;
    initialized?: boolean;
    parserForType?: Parser;
    serializedSize?: number;
    serializedSizeAsMessageSet?: number;
};

export type UpdateWorkflowVariables = {
    appendArray?: boolean;
    variables?: {
        [key: string]: unknown;
    };
    workflowId?: string;
};

export type UpgradeWorkflowRequest = {
    name: string;
    taskOutput?: {
        [key: string]: unknown;
    };
    version?: number;
    workflowInput?: {
        [key: string]: unknown;
    };
};

export type UpsertGroupRequest = {
    /**
     * a default Map<TargetType, Set<Access> to share permissions, allowed target types: WORKFLOW_DEF, TASK_DEF, WORKFLOW_SCHEDULE
     */
    defaultAccess?: {
        [key: string]: Array<'CREATE' | 'READ' | 'EXECUTE' | 'UPDATE' | 'DELETE'>;
    };
    /**
     * A general description of the group
     */
    description: string;
    roles?: 'ADMIN' | 'USER' | 'WORKER' | 'METADATA_MANAGER' | 'WORKFLOW_MANAGER';
};

export type UpsertUserRequest = {
    /**
     * Ids of the groups this user belongs to
     */
    groups?: Array<string>;
    /**
     * User's full name
     */
    name: string;
    roles?: 'ADMIN' | 'USER' | 'WORKER' | 'METADATA_MANAGER' | 'WORKFLOW_MANAGER';
};

export type UserFormTemplate = {
    name?: string;
    version?: number;
};

export type WebhookConfig = {
    createdBy?: string;
    evaluatorType?: string;
    expression?: string;
    headerKey?: string;
    headers?: {
        [key: string]: string;
    };
    id?: string;
    name?: string;
    receiverWorkflowNamesToVersions?: {
        [key: string]: number;
    };
    secretKey?: string;
    secretValue?: string;
    sourcePlatform?: string;
    tags?: Array<Tag>;
    urlVerified?: boolean;
    verifier?: 'SLACK_BASED' | 'SIGNATURE_BASED' | 'HEADER_BASED' | 'STRIPE' | 'TWITTER' | 'HMAC_BASED' | 'SENDGRID';
    webhookExecutionHistory?: Array<WebhookExecutionHistory>;
    workflowsToStart?: {
        [key: string]: unknown;
    };
};

export type WebhookExecutionHistory = {
    eventId?: string;
    matched?: boolean;
    payload?: string;
    timeStamp?: number;
    workflowIds?: Array<string>;
};

export type Workflow = {
    correlationId?: string;
    createTime?: number;
    createdBy?: string;
    endTime?: number;
    event?: string;
    externalInputPayloadStoragePath?: string;
    externalOutputPayloadStoragePath?: string;
    failedReferenceTaskNames?: Array<string>;
    failedTaskNames?: Array<string>;
    history?: Array<Workflow>;
    idempotencyKey?: string;
    input?: {
        [key: string]: unknown;
    };
    lastRetriedTime?: number;
    output?: {
        [key: string]: unknown;
    };
    ownerApp?: string;
    parentWorkflowId?: string;
    parentWorkflowTaskId?: string;
    priority?: number;
    rateLimitKey?: string;
    rateLimited?: boolean;
    reRunFromWorkflowId?: string;
    reasonForIncompletion?: string;
    startTime?: number;
    status?: 'RUNNING' | 'COMPLETED' | 'FAILED' | 'TIMED_OUT' | 'TERMINATED' | 'PAUSED';
    taskToDomain?: {
        [key: string]: string;
    };
    tasks?: Array<Task>;
    updateTime?: number;
    updatedBy?: string;
    variables?: {
        [key: string]: unknown;
    };
    workflowDefinition?: WorkflowDef;
    workflowId?: string;
    workflowName?: string;
    workflowVersion?: number;
};

export type WorkflowDef = {
    cacheConfig?: CacheConfig;
    createTime?: number;
    createdBy?: string;
    description?: string;
    enforceSchema?: boolean;
    failureWorkflow?: string;
    inputParameters?: Array<string>;
    inputSchema?: SchemaDef;
    inputTemplate?: {
        [key: string]: unknown;
    };
    maskedFields?: Array<string>;
    metadata?: {
        [key: string]: unknown;
    };
    name: string;
    outputParameters?: {
        [key: string]: unknown;
    };
    outputSchema?: SchemaDef;
    ownerApp?: string;
    ownerEmail?: string;
    rateLimitConfig?: RateLimitConfig;
    restartable?: boolean;
    schemaVersion?: number;
    tasks: Array<WorkflowTask>;
    timeoutPolicy?: 'TIME_OUT_WF' | 'ALERT_ONLY';
    timeoutSeconds: number;
    updateTime?: number;
    updatedBy?: string;
    variables?: {
        [key: string]: unknown;
    };
    version?: number;
    workflowStatusListenerEnabled?: boolean;
    workflowStatusListenerSink?: string;
};

export type WorkflowRun = {
    correlationId?: string;
    createTime?: number;
    createdBy?: string;
    input?: {
        [key: string]: unknown;
    };
    output?: {
        [key: string]: unknown;
    };
    priority?: number;
    requestId?: string;
    responseType?: 'TARGET_WORKFLOW' | 'BLOCKING_WORKFLOW' | 'BLOCKING_TASK' | 'BLOCKING_TASK_INPUT';
    status?: 'RUNNING' | 'COMPLETED' | 'FAILED' | 'TIMED_OUT' | 'TERMINATED' | 'PAUSED';
    targetWorkflowId?: string;
    targetWorkflowStatus?: string;
    tasks?: Array<Task>;
    updateTime?: number;
    variables?: {
        [key: string]: unknown;
    };
    workflowId?: string;
};

export type WorkflowSchedule = {
    createTime?: number;
    createdBy?: string;
    cronExpression?: string;
    description?: string;
    name?: string;
    paused?: boolean;
    pausedReason?: string;
    runCatchupScheduleInstances?: boolean;
    scheduleEndTime?: number;
    scheduleStartTime?: number;
    startWorkflowRequest?: StartWorkflowRequest;
    tags?: Array<Tag>;
    updatedBy?: string;
    updatedTime?: number;
    zoneId?: string;
};

export type WorkflowScheduleExecutionModel = {
    executionId?: string;
    executionTime?: number;
    orgId?: string;
    queueMsgId?: string;
    reason?: string;
    scheduleName?: string;
    scheduledTime?: number;
    stackTrace?: string;
    startWorkflowRequest?: StartWorkflowRequest;
    state?: 'POLLED' | 'FAILED' | 'EXECUTED';
    workflowId?: string;
    workflowName?: string;
    zoneId?: string;
};

export type WorkflowScheduleModel = {
    createTime?: number;
    createdBy?: string;
    cronExpression?: string;
    description?: string;
    name?: string;
    orgId?: string;
    paused?: boolean;
    pausedReason?: string;
    queueMsgId?: string;
    runCatchupScheduleInstances?: boolean;
    scheduleEndTime?: number;
    scheduleStartTime?: number;
    startWorkflowRequest?: StartWorkflowRequest;
    tags?: Array<Tag>;
    updatedBy?: string;
    updatedTime?: number;
    zoneId?: string;
};

export type WorkflowStateUpdate = {
    taskReferenceName?: string;
    taskResult?: TaskResult;
    variables?: {
        [key: string]: unknown;
    };
};

export type WorkflowStatus = {
    correlationId?: string;
    output?: {
        [key: string]: unknown;
    };
    status?: 'RUNNING' | 'COMPLETED' | 'FAILED' | 'TIMED_OUT' | 'TERMINATED' | 'PAUSED';
    variables?: {
        [key: string]: unknown;
    };
    workflowId?: string;
};

export type WorkflowSummary = {
    correlationId?: string;
    createdBy?: string;
    endTime?: string;
    event?: string;
    executionTime?: number;
    externalInputPayloadStoragePath?: string;
    externalOutputPayloadStoragePath?: string;
    failedReferenceTaskNames?: string;
    failedTaskNames?: Array<string>;
    idempotencyKey?: string;
    input?: string;
    inputSize?: number;
    output?: string;
    outputSize?: number;
    priority?: number;
    reasonForIncompletion?: string;
    startTime?: string;
    status?: 'RUNNING' | 'COMPLETED' | 'FAILED' | 'TIMED_OUT' | 'TERMINATED' | 'PAUSED';
    taskToDomain?: {
        [key: string]: string;
    };
    updateTime?: string;
    version?: number;
    workflowId?: string;
    workflowType?: string;
};

export type WorkflowTask = {
    asyncComplete?: boolean;
    cacheConfig?: CacheConfig;
    /**
     * @deprecated
     */
    caseExpression?: string;
    /**
     * @deprecated
     */
    caseValueParam?: string;
    decisionCases?: {
        [key: string]: Array<WorkflowTask>;
    };
    defaultCase?: Array<WorkflowTask>;
    defaultExclusiveJoinTask?: Array<string>;
    description?: string;
    /**
     * @deprecated
     */
    dynamicForkJoinTasksParam?: string;
    dynamicForkTasksInputParamName?: string;
    dynamicForkTasksParam?: string;
    dynamicTaskNameParam?: string;
    evaluatorType?: string;
    expression?: string;
    forkTasks?: Array<Array<WorkflowTask>>;
    inputParameters?: {
        [key: string]: unknown;
    };
    joinOn?: Array<string>;
    joinStatus?: string;
    loopCondition?: string;
    loopOver?: Array<WorkflowTask>;
    name: string;
    onStateChange?: {
        [key: string]: Array<StateChangeEvent>;
    };
    optional?: boolean;
    permissive?: boolean;
    rateLimited?: boolean;
    retryCount?: number;
    scriptExpression?: string;
    sink?: string;
    startDelay?: number;
    subWorkflowParam?: SubWorkflowParams;
    taskDefinition?: TaskDef;
    taskReferenceName: string;
    type?: string;
    workflowTaskType?: 'SIMPLE' | 'DYNAMIC' | 'FORK_JOIN' | 'FORK_JOIN_DYNAMIC' | 'DECISION' | 'SWITCH' | 'JOIN' | 'DO_WHILE' | 'SUB_WORKFLOW' | 'START_WORKFLOW' | 'EVENT' | 'WAIT' | 'HUMAN' | 'USER_DEFINED' | 'HTTP' | 'LAMBDA' | 'INLINE' | 'EXCLUSIVE_JOIN' | 'TERMINATE' | 'KAFKA_PUBLISH' | 'JSON_JQ_TRANSFORM' | 'SET_VARIABLE' | 'NOOP';
};

export type WorkflowTestRequest = {
    correlationId?: string;
    createdBy?: string;
    externalInputPayloadStoragePath?: string;
    idempotencyKey?: string;
    idempotencyStrategy?: 'FAIL' | 'RETURN_EXISTING' | 'FAIL_ON_RUNNING';
    input?: {
        [key: string]: unknown;
    };
    name: string;
    priority?: number;
    subWorkflowTestRequest?: {
        [key: string]: WorkflowTestRequest;
    };
    taskRefToMockOutput?: {
        [key: string]: Array<TaskMock>;
    };
    taskToDomain?: {
        [key: string]: string;
    };
    version?: number;
    workflowDef?: WorkflowDef;
};

export type ClearTaskExecutionCacheData = {
    body?: never;
    path: {
        taskDefName: string;
    };
    query?: never;
    url: '/api/admin/cache/clear/{taskDefName}';
};

export type ClearTaskExecutionCacheResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type VerifyAndRepairWorkflowConsistencyData = {
    body?: never;
    path: {
        workflowId: string;
    };
    query?: never;
    url: '/api/admin/consistency/verifyAndRepair/{workflowId}';
};

export type VerifyAndRepairWorkflowConsistencyResponses = {
    /**
     * OK
     */
    200: string;
};

export type VerifyAndRepairWorkflowConsistencyResponse = VerifyAndRepairWorkflowConsistencyResponses[keyof VerifyAndRepairWorkflowConsistencyResponses];

export type GetRedisUsageData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/admin/redisUsage';
};

export type GetRedisUsageResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetRedisUsageResponse = GetRedisUsageResponses[keyof GetRedisUsageResponses];

export type RequeueSweepData = {
    body?: never;
    path: {
        workflowId: string;
    };
    query?: never;
    url: '/api/admin/sweep/requeue/{workflowId}';
};

export type RequeueSweepResponses = {
    /**
     * OK
     */
    200: string;
};

export type RequeueSweepResponse = RequeueSweepResponses[keyof RequeueSweepResponses];

export type ViewData = {
    body?: never;
    path: {
        tasktype: string;
    };
    query?: {
        start?: number;
        count?: number;
    };
    url: '/api/admin/task/{tasktype}';
};

export type ViewResponses = {
    /**
     * OK
     */
    200: Array<Task>;
};

export type ViewResponse = ViewResponses[keyof ViewResponses];

export type ListApplicationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/applications';
};

export type ListApplicationsResponses = {
    /**
     * OK
     */
    200: Array<ExtendedConductorApplication>;
};

export type ListApplicationsResponse = ListApplicationsResponses[keyof ListApplicationsResponses];

export type CreateApplicationData = {
    body: CreateOrUpdateApplicationRequest;
    path?: never;
    query?: never;
    url: '/api/applications';
};

export type CreateApplicationResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type CreateApplicationResponse = CreateApplicationResponses[keyof CreateApplicationResponses];

export type GetAppByAccessKeyIdData = {
    body?: never;
    path: {
        accessKeyId: string;
    };
    query?: never;
    url: '/api/applications/key/{accessKeyId}';
};

export type GetAppByAccessKeyIdResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetAppByAccessKeyIdResponse = GetAppByAccessKeyIdResponses[keyof GetAppByAccessKeyIdResponses];

export type DeleteAccessKeyData = {
    body?: never;
    path: {
        applicationId: string;
        keyId: string;
    };
    query?: never;
    url: '/api/applications/{applicationId}/accessKeys/{keyId}';
};

export type DeleteAccessKeyResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type DeleteAccessKeyResponse = DeleteAccessKeyResponses[keyof DeleteAccessKeyResponses];

export type ToggleAccessKeyStatusData = {
    body?: never;
    path: {
        applicationId: string;
        keyId: string;
    };
    query?: never;
    url: '/api/applications/{applicationId}/accessKeys/{keyId}/status';
};

export type ToggleAccessKeyStatusResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type ToggleAccessKeyStatusResponse = ToggleAccessKeyStatusResponses[keyof ToggleAccessKeyStatusResponses];

export type RemoveRoleFromApplicationUserData = {
    body?: never;
    path: {
        applicationId: string;
        role: string;
    };
    query?: never;
    url: '/api/applications/{applicationId}/roles/{role}';
};

export type RemoveRoleFromApplicationUserResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type RemoveRoleFromApplicationUserResponse = RemoveRoleFromApplicationUserResponses[keyof RemoveRoleFromApplicationUserResponses];

export type AddRoleToApplicationUserData = {
    body?: never;
    path: {
        applicationId: string;
        role: string;
    };
    query?: never;
    url: '/api/applications/{applicationId}/roles/{role}';
};

export type AddRoleToApplicationUserResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type AddRoleToApplicationUserResponse = AddRoleToApplicationUserResponses[keyof AddRoleToApplicationUserResponses];

export type DeleteApplicationData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/applications/{id}';
};

export type DeleteApplicationResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type DeleteApplicationResponse = DeleteApplicationResponses[keyof DeleteApplicationResponses];

export type GetApplicationData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/applications/{id}';
};

export type GetApplicationResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetApplicationResponse = GetApplicationResponses[keyof GetApplicationResponses];

export type UpdateApplicationData = {
    body: CreateOrUpdateApplicationRequest;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/applications/{id}';
};

export type UpdateApplicationResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type UpdateApplicationResponse = UpdateApplicationResponses[keyof UpdateApplicationResponses];

export type GetAccessKeysData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/applications/{id}/accessKeys';
};

export type GetAccessKeysResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetAccessKeysResponse = GetAccessKeysResponses[keyof GetAccessKeysResponses];

export type CreateAccessKeyData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/applications/{id}/accessKeys';
};

export type CreateAccessKeyResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type CreateAccessKeyResponse = CreateAccessKeyResponses[keyof CreateAccessKeyResponses];

export type DeleteTagForApplicationData = {
    body: Array<Tag>;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/applications/{id}/tags';
};

export type DeleteTagForApplicationResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetTagsForApplicationData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/applications/{id}/tags';
};

export type GetTagsForApplicationResponses = {
    /**
     * OK
     */
    200: Array<Tag>;
};

export type GetTagsForApplicationResponse = GetTagsForApplicationResponses[keyof GetTagsForApplicationResponses];

export type PutTagForApplicationData = {
    body: Array<Tag>;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/applications/{id}/tags';
};

export type PutTagForApplicationResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type RemovePermissionsData = {
    body: AuthorizationRequest;
    path?: never;
    query?: never;
    url: '/api/auth/authorization';
};

export type RemovePermissionsResponses = {
    /**
     * OK
     */
    200: Response;
};

export type RemovePermissionsResponse = RemovePermissionsResponses[keyof RemovePermissionsResponses];

export type GrantPermissionsData = {
    body: AuthorizationRequest;
    path?: never;
    query?: never;
    url: '/api/auth/authorization';
};

export type GrantPermissionsResponses = {
    /**
     * OK
     */
    200: Response;
};

export type GrantPermissionsResponse = GrantPermissionsResponses[keyof GrantPermissionsResponses];

export type GetPermissionsData = {
    body?: never;
    path: {
        type: 'WORKFLOW' | 'WORKFLOW_DEF' | 'WORKFLOW_SCHEDULE' | 'EVENT_HANDLER' | 'TASK_DEF' | 'TASK_REF_NAME' | 'TASK_ID' | 'APPLICATION' | 'USER' | 'SECRET_NAME' | 'ENV_VARIABLE' | 'TAG' | 'DOMAIN' | 'INTEGRATION_PROVIDER' | 'INTEGRATION' | 'PROMPT' | 'USER_FORM_TEMPLATE' | 'SCHEMA' | 'CLUSTER_CONFIG' | 'WEBHOOK';
        id: string;
    };
    query?: never;
    url: '/api/auth/authorization/{type}/{id}';
};

export type GetPermissionsResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetPermissionsResponse = GetPermissionsResponses[keyof GetPermissionsResponses];

export type GetAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/environment';
};

export type GetAllResponses = {
    /**
     * OK
     */
    200: Array<EnvironmentVariable>;
};

export type GetAllResponse = GetAllResponses[keyof GetAllResponses];

export type DeleteEnvVariableData = {
    body?: never;
    path: {
        key: string;
    };
    query?: never;
    url: '/api/environment/{key}';
};

export type DeleteEnvVariableResponses = {
    /**
     * OK
     */
    200: string;
};

export type DeleteEnvVariableResponse = DeleteEnvVariableResponses[keyof DeleteEnvVariableResponses];

export type Get3Data = {
    body?: never;
    path: {
        key: string;
    };
    query?: never;
    url: '/api/environment/{key}';
};

export type Get3Responses = {
    /**
     * OK
     */
    200: string;
};

export type Get3Response = Get3Responses[keyof Get3Responses];

export type CreateOrUpdateEnvVariableData = {
    body: string;
    path: {
        key: string;
    };
    query?: never;
    url: '/api/environment/{key}';
};

export type CreateOrUpdateEnvVariableResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type DeleteTagForEnvVarData = {
    body: Array<Tag>;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/environment/{name}/tags';
};

export type DeleteTagForEnvVarResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetTagsForEnvVarData = {
    body?: never;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/environment/{name}/tags';
};

export type GetTagsForEnvVarResponses = {
    /**
     * OK
     */
    200: Array<Tag>;
};

export type GetTagsForEnvVarResponse = GetTagsForEnvVarResponses[keyof GetTagsForEnvVarResponses];

export type PutTagForEnvVarData = {
    body: Array<Tag>;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/environment/{name}/tags';
};

export type PutTagForEnvVarResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetEventHandlersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/event';
};

export type GetEventHandlersResponses = {
    /**
     * OK
     */
    200: Array<EventHandler>;
};

export type GetEventHandlersResponse = GetEventHandlersResponses[keyof GetEventHandlersResponses];

export type AddEventHandlerData = {
    body: Array<EventHandler>;
    path?: never;
    query?: never;
    url: '/api/event';
};

export type AddEventHandlerResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type UpdateEventHandlerData = {
    body: EventHandler;
    path?: never;
    query?: never;
    url: '/api/event';
};

export type UpdateEventHandlerResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetEventHandlersForEvent1Data = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/event/execution';
};

export type GetEventHandlersForEvent1Responses = {
    /**
     * OK
     */
    200: SearchResultHandledEventResponse;
};

export type GetEventHandlersForEvent1Response = GetEventHandlersForEvent1Responses[keyof GetEventHandlersForEvent1Responses];

export type GetEventHandlersForEvent2Data = {
    body?: never;
    path: {
        eventHandlerName: string;
    };
    query?: {
        from?: number;
    };
    url: '/api/event/execution/{eventHandlerName}';
};

export type GetEventHandlersForEvent2Responses = {
    /**
     * OK
     */
    200: Array<ExtendedEventExecution>;
};

export type GetEventHandlersForEvent2Response = GetEventHandlersForEvent2Responses[keyof GetEventHandlersForEvent2Responses];

export type HandleIncomingEventData = {
    body: {
        [key: string]: unknown;
    };
    path?: never;
    query?: never;
    url: '/api/event/handleIncomingEvent';
};

export type HandleIncomingEventResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type TestData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/event/handler/';
};

export type TestResponses = {
    /**
     * OK
     */
    200: EventHandler;
};

export type TestResponse = TestResponses[keyof TestResponses];

export type GetEventHandlerByNameData = {
    body?: never;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/event/handler/{name}';
};

export type GetEventHandlerByNameResponses = {
    /**
     * OK
     */
    200: EventHandler;
};

export type GetEventHandlerByNameResponse = GetEventHandlerByNameResponses[keyof GetEventHandlerByNameResponses];

export type GetEventsData = {
    body?: never;
    path?: never;
    query?: {
        from?: number;
    };
    url: '/api/event/message';
};

export type GetEventsResponses = {
    /**
     * OK
     */
    200: SearchResultHandledEventResponse;
};

export type GetEventsResponse = GetEventsResponses[keyof GetEventsResponses];

export type GetMessagesData = {
    body?: never;
    path: {
        event: string;
    };
    query?: {
        from?: number;
    };
    url: '/api/event/message/{event}';
};

export type GetMessagesResponses = {
    /**
     * OK
     */
    200: Array<EventMessage>;
};

export type GetMessagesResponse = GetMessagesResponses[keyof GetMessagesResponses];

export type GetQueueNamesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/event/queue/config';
};

export type GetQueueNamesResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: string;
    };
};

export type GetQueueNamesResponse = GetQueueNamesResponses[keyof GetQueueNamesResponses];

export type DeleteQueueConfigData = {
    body?: never;
    path: {
        queueType: string;
        queueName: string;
    };
    query?: never;
    url: '/api/event/queue/config/{queueType}/{queueName}';
};

export type DeleteQueueConfigResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetQueueConfigData = {
    body?: never;
    path: {
        queueType: string;
        queueName: string;
    };
    query?: never;
    url: '/api/event/queue/config/{queueType}/{queueName}';
};

export type GetQueueConfigResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetQueueConfigResponse = GetQueueConfigResponses[keyof GetQueueConfigResponses];

export type PutQueueConfigData = {
    body: string;
    path: {
        queueType: string;
        queueName: string;
    };
    query?: never;
    url: '/api/event/queue/config/{queueType}/{queueName}';
};

export type PutQueueConfigResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type TestConnectivityData = {
    body: ConnectivityTestInput;
    path?: never;
    query?: never;
    url: '/api/event/queue/connectivity';
};

export type TestConnectivityResponses = {
    /**
     * OK
     */
    200: ConnectivityTestResult;
};

export type TestConnectivityResponse = TestConnectivityResponses[keyof TestConnectivityResponses];

export type GetEventHandlersForEventData = {
    body?: never;
    path: {
        event: string;
    };
    query?: {
        activeOnly?: boolean;
    };
    url: '/api/event/{event}';
};

export type GetEventHandlersForEventResponses = {
    /**
     * OK
     */
    200: Array<EventHandler>;
};

export type GetEventHandlersForEventResponse = GetEventHandlersForEventResponses[keyof GetEventHandlersForEventResponses];

export type RemoveEventHandlerStatusData = {
    body?: never;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/event/{name}';
};

export type RemoveEventHandlerStatusResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type DeleteTagForEventHandlerData = {
    body: Array<Tag>;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/event/{name}/tags';
};

export type DeleteTagForEventHandlerResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetTagsForEventHandlerData = {
    body?: never;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/event/{name}/tags';
};

export type GetTagsForEventHandlerResponses = {
    /**
     * OK
     */
    200: Array<Tag>;
};

export type GetTagsForEventHandlerResponse = GetTagsForEventHandlerResponses[keyof GetTagsForEventHandlerResponses];

export type PutTagForEventHandlerData = {
    body: Array<Tag>;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/event/{name}/tags';
};

export type PutTagForEventHandlerResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type Save1Data = {
    body: Array<SchemaDef>;
    path?: never;
    query?: {
        newVersion?: boolean;
    };
    url: '/api/global_schema';
};

export type Save1Responses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetSchemaByNameWithLatestVersion1Data = {
    body?: never;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/global_schema/{name}';
};

export type GetSchemaByNameWithLatestVersion1Responses = {
    /**
     * OK
     */
    200: SchemaDef;
};

export type GetSchemaByNameWithLatestVersion1Response = GetSchemaByNameWithLatestVersion1Responses[keyof GetSchemaByNameWithLatestVersion1Responses];

export type ListGroupsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/groups';
};

export type ListGroupsResponses = {
    /**
     * OK
     */
    200: Array<Group>;
};

export type ListGroupsResponse = ListGroupsResponses[keyof ListGroupsResponses];

export type GetGrantedPermissions1Data = {
    body?: never;
    path: {
        groupId: string;
    };
    query?: never;
    url: '/api/groups/{groupId}/permissions';
};

export type GetGrantedPermissions1Responses = {
    /**
     * OK
     */
    200: GrantedAccessResponse;
};

export type GetGrantedPermissions1Response = GetGrantedPermissions1Responses[keyof GetGrantedPermissions1Responses];

export type RemoveUsersFromGroupData = {
    body: Array<string>;
    path: {
        groupId: string;
    };
    query?: never;
    url: '/api/groups/{groupId}/users';
};

export type RemoveUsersFromGroupResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type AddUsersToGroupData = {
    body: Array<string>;
    path: {
        groupId: string;
    };
    query?: never;
    url: '/api/groups/{groupId}/users';
};

export type AddUsersToGroupResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type RemoveUserFromGroupData = {
    body?: never;
    path: {
        groupId: string;
        userId: string;
    };
    query?: never;
    url: '/api/groups/{groupId}/users/{userId}';
};

export type RemoveUserFromGroupResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type RemoveUserFromGroupResponse = RemoveUserFromGroupResponses[keyof RemoveUserFromGroupResponses];

export type AddUserToGroupData = {
    body?: never;
    path: {
        groupId: string;
        userId: string;
    };
    query?: never;
    url: '/api/groups/{groupId}/users/{userId}';
};

export type AddUserToGroupResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type AddUserToGroupResponse = AddUserToGroupResponses[keyof AddUserToGroupResponses];

export type DeleteGroupData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/groups/{id}';
};

export type DeleteGroupResponses = {
    /**
     * OK
     */
    200: Response;
};

export type DeleteGroupResponse = DeleteGroupResponses[keyof DeleteGroupResponses];

export type GetGroupData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/groups/{id}';
};

export type GetGroupResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetGroupResponse = GetGroupResponses[keyof GetGroupResponses];

export type UpsertGroupData = {
    body: UpsertGroupRequest;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/groups/{id}';
};

export type UpsertGroupResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type UpsertGroupResponse = UpsertGroupResponses[keyof UpsertGroupResponses];

export type GetUsersInGroupData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/groups/{id}/users';
};

export type GetUsersInGroupResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetUsersInGroupResponse = GetUsersInGroupResponses[keyof GetUsersInGroupResponses];

export type BackPopulateFullTextIndexData = {
    body?: never;
    path?: never;
    query: {
        100: number;
    };
    url: '/api/human/tasks/backPopulateFullTextIndex';
};

export type BackPopulateFullTextIndexResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type BackPopulateFullTextIndexResponse = BackPopulateFullTextIndexResponses[keyof BackPopulateFullTextIndexResponses];

export type DeleteTaskFromHumanTaskRecordsData = {
    body: Array<string>;
    path?: never;
    query?: never;
    url: '/api/human/tasks/delete';
};

export type DeleteTaskFromHumanTaskRecordsResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type DeleteTaskFromHumanTaskRecords1Data = {
    body?: never;
    path: {
        taskId: string;
    };
    query?: never;
    url: '/api/human/tasks/delete/{taskId}';
};

export type DeleteTaskFromHumanTaskRecords1Responses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetTaskDisplayNamesData = {
    body?: never;
    path?: never;
    query: {
        searchType: 'ADMIN' | 'INBOX';
    };
    url: '/api/human/tasks/getTaskDisplayNames';
};

export type GetTaskDisplayNamesResponses = {
    /**
     * OK
     */
    200: Array<string>;
};

export type GetTaskDisplayNamesResponse = GetTaskDisplayNamesResponses[keyof GetTaskDisplayNamesResponses];

export type SearchData = {
    body: HumanTaskSearch;
    path?: never;
    query?: never;
    url: '/api/human/tasks/search';
};

export type SearchResponses = {
    /**
     * OK
     */
    200: HumanTaskSearchResult;
};

export type SearchResponse = SearchResponses[keyof SearchResponses];

export type UpdateTaskOutputByRefData = {
    body: {
        [key: string]: unknown;
    };
    path?: never;
    query: {
        workflowId: string;
        taskRefName: string;
        complete?: boolean;
        /**
         * Populate this value if your task is in a loop and you want to update a specific iteration. If its not in a loop OR if you want to just update the latest iteration, leave this as empty
         */
        iteration?: Array<number>;
    };
    url: '/api/human/tasks/update/taskRef';
};

export type UpdateTaskOutputByRefResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetTask1Data = {
    body?: never;
    path: {
        taskId: string;
    };
    query?: {
        withTemplate?: boolean;
    };
    url: '/api/human/tasks/{taskId}';
};

export type GetTask1Responses = {
    /**
     * OK
     */
    200: HumanTaskEntry;
};

export type GetTask1Response = GetTask1Responses[keyof GetTask1Responses];

export type ClaimTaskData = {
    body?: never;
    path: {
        taskId: string;
    };
    query?: {
        overrideAssignment?: boolean;
        withTemplate?: boolean;
    };
    url: '/api/human/tasks/{taskId}/claim';
};

export type ClaimTaskResponses = {
    /**
     * OK
     */
    200: HumanTaskEntry;
};

export type ClaimTaskResponse = ClaimTaskResponses[keyof ClaimTaskResponses];

export type GetConductorTaskByIdData = {
    body?: never;
    path: {
        taskId: string;
    };
    query?: never;
    url: '/api/human/tasks/{taskId}/conductorTask';
};

export type GetConductorTaskByIdResponses = {
    /**
     * OK
     */
    200: Task;
};

export type GetConductorTaskByIdResponse = GetConductorTaskByIdResponses[keyof GetConductorTaskByIdResponses];

export type AssignAndClaimData = {
    body?: never;
    path: {
        taskId: string;
        userId: string;
    };
    query?: {
        overrideAssignment?: boolean;
        withTemplate?: boolean;
    };
    url: '/api/human/tasks/{taskId}/externalUser/{userId}';
};

export type AssignAndClaimResponses = {
    /**
     * OK
     */
    200: HumanTaskEntry;
};

export type AssignAndClaimResponse = AssignAndClaimResponses[keyof AssignAndClaimResponses];

export type ReassignTaskData = {
    body: Array<HumanTaskAssignment>;
    path: {
        taskId: string;
    };
    query?: never;
    url: '/api/human/tasks/{taskId}/reassign';
};

export type ReassignTaskResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type ReleaseTaskData = {
    body?: never;
    path: {
        taskId: string;
    };
    query?: never;
    url: '/api/human/tasks/{taskId}/release';
};

export type ReleaseTaskResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type SkipTaskData = {
    body?: never;
    path: {
        taskId: string;
    };
    query?: {
        reason?: string;
    };
    url: '/api/human/tasks/{taskId}/skip';
};

export type SkipTaskResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type UpdateTaskOutputData = {
    body: {
        [key: string]: unknown;
    };
    path: {
        taskId: string;
    };
    query?: {
        complete?: boolean;
    };
    url: '/api/human/tasks/{taskId}/update';
};

export type UpdateTaskOutputResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetAllTemplatesData = {
    body?: never;
    path?: never;
    query?: {
        name?: string;
        version?: number;
    };
    url: '/api/human/template';
};

export type GetAllTemplatesResponses = {
    /**
     * OK
     */
    200: Array<HumanTaskTemplate>;
};

export type GetAllTemplatesResponse = GetAllTemplatesResponses[keyof GetAllTemplatesResponses];

export type SaveTemplateData = {
    body: HumanTaskTemplate;
    path?: never;
    query?: {
        newVersion?: boolean;
    };
    url: '/api/human/template';
};

export type SaveTemplateResponses = {
    /**
     * OK
     */
    200: HumanTaskTemplate;
};

export type SaveTemplateResponse = SaveTemplateResponses[keyof SaveTemplateResponses];

export type SaveTemplatesData = {
    body: Array<HumanTaskTemplate>;
    path?: never;
    query?: {
        newVersion?: boolean;
    };
    url: '/api/human/template/bulk';
};

export type SaveTemplatesResponses = {
    /**
     * OK
     */
    200: Array<HumanTaskTemplate>;
};

export type SaveTemplatesResponse = SaveTemplatesResponses[keyof SaveTemplatesResponses];

export type GetTemplateByTaskIdData = {
    body?: never;
    path: {
        humanTaskId: string;
    };
    query?: never;
    url: '/api/human/template/{humanTaskId}';
};

export type GetTemplateByTaskIdResponses = {
    /**
     * OK
     */
    200: HumanTaskTemplate;
};

export type GetTemplateByTaskIdResponse = GetTemplateByTaskIdResponses[keyof GetTemplateByTaskIdResponses];

export type DeleteTemplateByNameData = {
    body?: never;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/human/template/{name}';
};

export type DeleteTemplateByNameResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type DeleteTagForUserFormTemplateData = {
    body: Array<Tag>;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/human/template/{name}/tags';
};

export type DeleteTagForUserFormTemplateResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetTagsForUserFormTemplateData = {
    body?: never;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/human/template/{name}/tags';
};

export type GetTagsForUserFormTemplateResponses = {
    /**
     * OK
     */
    200: Array<Tag>;
};

export type GetTagsForUserFormTemplateResponse = GetTagsForUserFormTemplateResponses[keyof GetTagsForUserFormTemplateResponses];

export type PutTagForUserFormTemplateData = {
    body: Array<Tag>;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/human/template/{name}/tags';
};

export type PutTagForUserFormTemplateResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type DeleteTemplatesByNameAndVersionData = {
    body?: never;
    path: {
        name: string;
        version: number;
    };
    query?: never;
    url: '/api/human/template/{name}/{version}';
};

export type DeleteTemplatesByNameAndVersionResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetTemplateByNameAndVersionData = {
    body?: never;
    path: {
        name: string;
        version: number;
    };
    query?: never;
    url: '/api/human/template/{name}/{version}';
};

export type GetTemplateByNameAndVersionResponses = {
    /**
     * OK
     */
    200: HumanTaskTemplate;
};

export type GetTemplateByNameAndVersionResponse = GetTemplateByNameAndVersionResponses[keyof GetTemplateByNameAndVersionResponses];

export type GetAllIntegrationsData = {
    body?: never;
    path?: never;
    query?: {
        category?: string;
        activeOnly?: boolean;
    };
    url: '/api/integrations/';
};

export type GetAllIntegrationsResponses = {
    /**
     * OK
     */
    200: Array<Integration>;
};

export type GetAllIntegrationsResponse = GetAllIntegrationsResponses[keyof GetAllIntegrationsResponses];

export type SaveAllIntegrationsData = {
    body: Array<Integration>;
    path?: never;
    query?: never;
    url: '/api/integrations/';
};

export type SaveAllIntegrationsResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetProvidersAndIntegrationsData = {
    body?: never;
    path?: never;
    query?: {
        type?: string;
        activeOnly?: boolean;
    };
    url: '/api/integrations/all';
};

export type GetProvidersAndIntegrationsResponses = {
    /**
     * OK
     */
    200: Array<string>;
};

export type GetProvidersAndIntegrationsResponse = GetProvidersAndIntegrationsResponses[keyof GetProvidersAndIntegrationsResponses];

export type GetIntegrationProviderDefsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/integrations/def';
};

export type GetIntegrationProviderDefsResponses = {
    /**
     * OK
     */
    200: Array<IntegrationDef>;
};

export type GetIntegrationProviderDefsResponse = GetIntegrationProviderDefsResponses[keyof GetIntegrationProviderDefsResponses];

export type RegisterIntegrationData = {
    body: Array<IntegrationDef>;
    path?: never;
    query?: never;
    url: '/api/integrations/def/register';
};

export type RegisterIntegrationResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetIntegrationDefData = {
    body?: never;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/integrations/def/{name}';
};

export type GetIntegrationDefResponses = {
    /**
     * OK
     */
    200: IntegrationDef;
};

export type GetIntegrationDefResponse = GetIntegrationDefResponses[keyof GetIntegrationDefResponses];

export type RecordEventStatsData = {
    body: Array<EventLog>;
    path?: never;
    query: {
        type: string;
    };
    url: '/api/integrations/eventStats/{type}';
};

export type RecordEventStatsResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetTokenLimitData = {
    body?: never;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/integrations/llm/{name}/token';
};

export type GetTokenLimitResponses = {
    /**
     * OK
     */
    200: TokenLimit;
};

export type GetTokenLimitResponse = GetTokenLimitResponses[keyof GetTokenLimitResponses];

export type UpdateTokenLimitData = {
    body: TokenLimit;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/integrations/llm/{name}/token';
};

export type UpdateTokenLimitResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetTokenUsageData = {
    body?: never;
    path: {
        name: string;
    };
    query?: {
        model?: string;
        lookUpWindow?: number;
    };
    url: '/api/integrations/llm/{name}/token/history';
};

export type GetTokenUsageResponses = {
    /**
     * OK
     */
    200: Array<TokenUsageLog>;
};

export type GetTokenUsageResponse = GetTokenUsageResponses[keyof GetTokenUsageResponses];

export type GetIntegrationProvidersData = {
    body?: never;
    path?: never;
    query?: {
        category?: string;
        activeOnly?: boolean;
    };
    url: '/api/integrations/provider';
};

export type GetIntegrationProvidersResponses = {
    /**
     * OK
     */
    200: Array<Integration>;
};

export type GetIntegrationProvidersResponse = GetIntegrationProvidersResponses[keyof GetIntegrationProvidersResponses];

export type GetPromptsWithIntegrationData = {
    body?: never;
    path: {
        integration_provider: string;
        integration_name: string;
    };
    query?: never;
    url: '/api/integrations/provider/{integration_provider}/integration/{integration_name}/prompt';
};

export type GetPromptsWithIntegrationResponses = {
    /**
     * OK
     */
    200: Array<MessageTemplate>;
};

export type GetPromptsWithIntegrationResponse = GetPromptsWithIntegrationResponses[keyof GetPromptsWithIntegrationResponses];

export type AssociatePromptWithIntegrationData = {
    body?: never;
    path: {
        integration_provider: string;
        integration_name: string;
        prompt_name: string;
    };
    query?: never;
    url: '/api/integrations/provider/{integration_provider}/integration/{integration_name}/prompt/{prompt_name}';
};

export type AssociatePromptWithIntegrationResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type DeleteIntegrationProviderData = {
    body?: never;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/integrations/provider/{name}';
};

export type DeleteIntegrationProviderResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetIntegrationProviderData = {
    body?: never;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/integrations/provider/{name}';
};

export type GetIntegrationProviderResponses = {
    /**
     * OK
     */
    200: Integration;
};

export type GetIntegrationProviderResponse = GetIntegrationProviderResponses[keyof GetIntegrationProviderResponses];

export type SaveIntegrationProviderData = {
    body: IntegrationUpdate;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/integrations/provider/{name}';
};

export type SaveIntegrationProviderResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetIntegrationApisData = {
    body?: never;
    path: {
        name: string;
    };
    query?: {
        activeOnly?: boolean;
    };
    url: '/api/integrations/provider/{name}/integration';
};

export type GetIntegrationApisResponses = {
    /**
     * OK
     */
    200: Array<IntegrationApi>;
};

export type GetIntegrationApisResponse = GetIntegrationApisResponses[keyof GetIntegrationApisResponses];

export type GetIntegrationAvailableApisData = {
    body?: never;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/integrations/provider/{name}/integration/all';
};

export type GetIntegrationAvailableApisResponses = {
    /**
     * OK
     */
    200: Array<string>;
};

export type GetIntegrationAvailableApisResponse = GetIntegrationAvailableApisResponses[keyof GetIntegrationAvailableApisResponses];

export type DeleteIntegrationApiData = {
    body?: never;
    path: {
        name: string;
        integration_name: string;
    };
    query?: never;
    url: '/api/integrations/provider/{name}/integration/{integration_name}';
};

export type DeleteIntegrationApiResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetIntegrationApiData = {
    body?: never;
    path: {
        name: string;
        integration_name: string;
    };
    query?: never;
    url: '/api/integrations/provider/{name}/integration/{integration_name}';
};

export type GetIntegrationApiResponses = {
    /**
     * OK
     */
    200: IntegrationApi;
};

export type GetIntegrationApiResponse = GetIntegrationApiResponses[keyof GetIntegrationApiResponses];

export type SaveIntegrationApiData = {
    body: IntegrationApiUpdate;
    path: {
        name: string;
        integration_name: string;
    };
    query?: never;
    url: '/api/integrations/provider/{name}/integration/{integration_name}';
};

export type SaveIntegrationApiResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type DeleteTagForIntegrationData = {
    body: Array<Tag>;
    path: {
        name: string;
        integration_name: string;
    };
    query?: never;
    url: '/api/integrations/provider/{name}/integration/{integration_name}/tags';
};

export type DeleteTagForIntegrationResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetTagsForIntegrationData = {
    body?: never;
    path: {
        name: string;
        integration_name: string;
    };
    query?: never;
    url: '/api/integrations/provider/{name}/integration/{integration_name}/tags';
};

export type GetTagsForIntegrationResponses = {
    /**
     * OK
     */
    200: Array<Tag>;
};

export type GetTagsForIntegrationResponse = GetTagsForIntegrationResponses[keyof GetTagsForIntegrationResponses];

export type PutTagForIntegrationData = {
    body: Array<Tag>;
    path: {
        name: string;
        integration_name: string;
    };
    query?: never;
    url: '/api/integrations/provider/{name}/integration/{integration_name}/tags';
};

export type PutTagForIntegrationResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type DeleteTagForIntegrationProviderData = {
    body: Array<Tag>;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/integrations/provider/{name}/tags';
};

export type DeleteTagForIntegrationProviderResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetTagsForIntegrationProviderData = {
    body?: never;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/integrations/provider/{name}/tags';
};

export type GetTagsForIntegrationProviderResponses = {
    /**
     * OK
     */
    200: Array<Tag>;
};

export type GetTagsForIntegrationProviderResponse = GetTagsForIntegrationProviderResponses[keyof GetTagsForIntegrationProviderResponses];

export type PutTagForIntegrationProviderData = {
    body: Array<Tag>;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/integrations/provider/{name}/tags';
};

export type PutTagForIntegrationProviderResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type Get2Data = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/limits';
};

export type Get2Responses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type Get2Response = Get2Responses[keyof Get2Responses];

export type GetTags1Data = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/metadata/tags';
};

export type GetTags1Responses = {
    /**
     * OK
     */
    200: Array<Tag>;
};

export type GetTags1Response = GetTags1Responses[keyof GetTags1Responses];

export type DeleteTaskTagData = {
    body: Tag;
    path: {
        taskName: string;
    };
    query?: never;
    url: '/api/metadata/task/{taskName}/tags';
};

export type DeleteTaskTagResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type DeleteTaskTagResponse = DeleteTaskTagResponses[keyof DeleteTaskTagResponses];

export type GetTaskTagsData = {
    body?: never;
    path: {
        taskName: string;
    };
    query?: never;
    url: '/api/metadata/task/{taskName}/tags';
};

export type GetTaskTagsResponses = {
    /**
     * OK
     */
    200: Array<Tag>;
};

export type GetTaskTagsResponse = GetTaskTagsResponses[keyof GetTaskTagsResponses];

export type AddTaskTagData = {
    body: Tag;
    path: {
        taskName: string;
    };
    query?: never;
    url: '/api/metadata/task/{taskName}/tags';
};

export type AddTaskTagResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type AddTaskTagResponse = AddTaskTagResponses[keyof AddTaskTagResponses];

export type SetTaskTagsData = {
    body: Array<Tag>;
    path: {
        taskName: string;
    };
    query?: never;
    url: '/api/metadata/task/{taskName}/tags';
};

export type SetTaskTagsResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type SetTaskTagsResponse = SetTaskTagsResponses[keyof SetTaskTagsResponses];

export type GetTaskDefsData = {
    body?: never;
    path?: never;
    query?: {
        access?: string;
        metadata?: boolean;
        tagKey?: string;
        tagValue?: string;
    };
    url: '/api/metadata/taskdefs';
};

export type GetTaskDefsResponses = {
    /**
     * OK
     */
    200: Array<TaskDef>;
};

export type GetTaskDefsResponse = GetTaskDefsResponses[keyof GetTaskDefsResponses];

export type RegisterTaskDefData = {
    body: Array<ExtendedTaskDef>;
    path?: never;
    query?: never;
    url: '/api/metadata/taskdefs';
};

export type RegisterTaskDefResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type RegisterTaskDefResponse = RegisterTaskDefResponses[keyof RegisterTaskDefResponses];

export type UpdateTaskDefData = {
    body: ExtendedTaskDef;
    path?: never;
    query?: never;
    url: '/api/metadata/taskdefs';
};

export type UpdateTaskDefResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type UpdateTaskDefResponse = UpdateTaskDefResponses[keyof UpdateTaskDefResponses];

export type UnregisterTaskDefData = {
    body?: never;
    path: {
        tasktype: string;
    };
    query?: never;
    url: '/api/metadata/taskdefs/{tasktype}';
};

export type UnregisterTaskDefResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetTaskDefData = {
    body?: never;
    path: {
        tasktype: string;
    };
    query?: {
        metadata?: boolean;
    };
    url: '/api/metadata/taskdefs/{tasktype}';
};

export type GetTaskDefResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetTaskDefResponse = GetTaskDefResponses[keyof GetTaskDefResponses];

export type GetAllWebhookData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/metadata/webhook';
};

export type GetAllWebhookResponses = {
    /**
     * OK
     */
    200: Array<WebhookConfig>;
};

export type GetAllWebhookResponse = GetAllWebhookResponses[keyof GetAllWebhookResponses];

export type CreateWebhookData = {
    body: WebhookConfig;
    path?: never;
    query?: never;
    url: '/api/metadata/webhook';
};

export type CreateWebhookResponses = {
    /**
     * OK
     */
    200: WebhookConfig;
};

export type CreateWebhookResponse = CreateWebhookResponses[keyof CreateWebhookResponses];

export type DeleteWebhookData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/metadata/webhook/{id}';
};

export type DeleteWebhookResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetWebhookData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/metadata/webhook/{id}';
};

export type GetWebhookResponses = {
    /**
     * OK
     */
    200: WebhookConfig;
};

export type GetWebhookResponse = GetWebhookResponses[keyof GetWebhookResponses];

export type UpdateWebhookData = {
    body: WebhookConfig;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/metadata/webhook/{id}';
};

export type UpdateWebhookResponses = {
    /**
     * OK
     */
    200: WebhookConfig;
};

export type UpdateWebhookResponse = UpdateWebhookResponses[keyof UpdateWebhookResponses];

export type DeleteTagForWebhookData = {
    body: Array<Tag>;
    path?: never;
    query?: never;
    url: '/api/metadata/webhook/{id}/tags';
};

export type DeleteTagForWebhookResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetTagsForWebhookData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/metadata/webhook/{id}/tags';
};

export type GetTagsForWebhookResponses = {
    /**
     * OK
     */
    200: Array<Tag>;
};

export type GetTagsForWebhookResponse = GetTagsForWebhookResponses[keyof GetTagsForWebhookResponses];

export type PutTagForWebhookData = {
    body: Array<Tag>;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/metadata/webhook/{id}/tags';
};

export type PutTagForWebhookResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetWorkflowDefsData = {
    body?: never;
    path?: never;
    query?: {
        access?: string;
        metadata?: boolean;
        tagKey?: string;
        tagValue?: string;
        name?: string;
        short?: boolean;
    };
    url: '/api/metadata/workflow';
};

export type GetWorkflowDefsResponses = {
    /**
     * OK
     */
    200: Array<WorkflowDef>;
};

export type GetWorkflowDefsResponse = GetWorkflowDefsResponses[keyof GetWorkflowDefsResponses];

export type CreateData = {
    body: ExtendedWorkflowDef;
    path?: never;
    query?: {
        overwrite?: boolean;
        newVersion?: boolean;
    };
    url: '/api/metadata/workflow';
};

export type CreateResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type CreateResponse = CreateResponses[keyof CreateResponses];

export type UpdateData = {
    body: Array<ExtendedWorkflowDef>;
    path?: never;
    query?: {
        overwrite?: boolean;
        newVersion?: boolean;
    };
    url: '/api/metadata/workflow';
};

export type UpdateResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type UpdateResponse = UpdateResponses[keyof UpdateResponses];

export type UploadBpmnFileData = {
    body: IncomingBpmnFile;
    path?: never;
    query?: {
        overwrite?: boolean;
    };
    url: '/api/metadata/workflow-importer/import-bpm';
};

export type UploadBpmnFileResponses = {
    /**
     * OK
     */
    200: Array<ExtendedWorkflowDef>;
};

export type UploadBpmnFileResponse = UploadBpmnFileResponses[keyof UploadBpmnFileResponses];

export type UploadWorkflowsAndTasksDefinitionsToS3Data = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/metadata/workflow-task-defs/upload';
};

export type UploadWorkflowsAndTasksDefinitionsToS3Responses = {
    /**
     * OK
     */
    200: unknown;
};

export type Get1Data = {
    body?: never;
    path: {
        name: string;
    };
    query?: {
        version?: number;
        metadata?: boolean;
    };
    url: '/api/metadata/workflow/{name}';
};

export type Get1Responses = {
    /**
     * OK
     */
    200: WorkflowDef;
};

export type Get1Response = Get1Responses[keyof Get1Responses];

export type DeleteWorkflowTagData = {
    body: Tag;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/metadata/workflow/{name}/tags';
};

export type DeleteWorkflowTagResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type DeleteWorkflowTagResponse = DeleteWorkflowTagResponses[keyof DeleteWorkflowTagResponses];

export type GetWorkflowTagsData = {
    body?: never;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/metadata/workflow/{name}/tags';
};

export type GetWorkflowTagsResponses = {
    /**
     * OK
     */
    200: Array<Tag>;
};

export type GetWorkflowTagsResponse = GetWorkflowTagsResponses[keyof GetWorkflowTagsResponses];

export type AddWorkflowTagData = {
    body: Tag;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/metadata/workflow/{name}/tags';
};

export type AddWorkflowTagResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type AddWorkflowTagResponse = AddWorkflowTagResponses[keyof AddWorkflowTagResponses];

export type SetWorkflowTagsData = {
    body: Array<Tag>;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/metadata/workflow/{name}/tags';
};

export type SetWorkflowTagsResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type SetWorkflowTagsResponse = SetWorkflowTagsResponses[keyof SetWorkflowTagsResponses];

export type UnregisterWorkflowDefData = {
    body?: never;
    path: {
        name: string;
        version: number;
    };
    query?: never;
    url: '/api/metadata/workflow/{name}/{version}';
};

export type UnregisterWorkflowDefResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetMessageTemplatesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/prompts';
};

export type GetMessageTemplatesResponses = {
    /**
     * OK
     */
    200: Array<MessageTemplate>;
};

export type GetMessageTemplatesResponse = GetMessageTemplatesResponses[keyof GetMessageTemplatesResponses];

export type CreateMessageTemplatesData = {
    body: Array<MessageTemplate>;
    path?: never;
    query?: never;
    url: '/api/prompts/';
};

export type CreateMessageTemplatesResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type TestMessageTemplateData = {
    body: PromptTemplateTestRequest;
    path?: never;
    query?: never;
    url: '/api/prompts/test';
};

export type TestMessageTemplateResponses = {
    /**
     * OK
     */
    200: string;
};

export type TestMessageTemplateResponse = TestMessageTemplateResponses[keyof TestMessageTemplateResponses];

export type DeleteMessageTemplateData = {
    body?: never;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/prompts/{name}';
};

export type DeleteMessageTemplateResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetMessageTemplateData = {
    body?: never;
    path: {
        name: string;
    };
    query?: {
        version?: number;
    };
    url: '/api/prompts/{name}';
};

export type GetMessageTemplateResponses = {
    /**
     * OK
     */
    200: MessageTemplate;
};

export type GetMessageTemplateResponse = GetMessageTemplateResponses[keyof GetMessageTemplateResponses];

export type SaveMessageTemplateData = {
    body: string;
    path: {
        name: string;
    };
    query: {
        description: string;
        models?: Array<string>;
        version?: number;
        autoIncrement?: boolean;
    };
    url: '/api/prompts/{name}';
};

export type SaveMessageTemplateResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type UpdateMessageTemplateData = {
    body: string;
    path: {
        name: string;
    };
    query: {
        version?: number;
        description: string;
        models?: Array<string>;
    };
    url: '/api/prompts/{name}';
};

export type UpdateMessageTemplateResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type DeleteTagForPromptTemplateData = {
    body: Array<Tag>;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/prompts/{name}/tags';
};

export type DeleteTagForPromptTemplateResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetTagsForPromptTemplateData = {
    body?: never;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/prompts/{name}/tags';
};

export type GetTagsForPromptTemplateResponses = {
    /**
     * OK
     */
    200: Array<Tag>;
};

export type GetTagsForPromptTemplateResponse = GetTagsForPromptTemplateResponses[keyof GetTagsForPromptTemplateResponses];

export type PutTagForPromptTemplateData = {
    body: Array<Tag>;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/prompts/{name}/tags';
};

export type PutTagForPromptTemplateResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetMessageTemplateVersionsData = {
    body?: never;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/prompts/{name}/versions';
};

export type GetMessageTemplateVersionsResponses = {
    /**
     * OK
     */
    200: Array<MessageTemplate>;
};

export type GetMessageTemplateVersionsResponse = GetMessageTemplateVersionsResponses[keyof GetMessageTemplateVersionsResponses];

export type DeleteMessageTemplate1Data = {
    body?: never;
    path: {
        name: string;
        version: number;
    };
    query?: never;
    url: '/api/prompts/{name}/versions/{version}';
};

export type DeleteMessageTemplate1Responses = {
    /**
     * OK
     */
    200: unknown;
};

export type NamesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/queue/';
};

export type NamesResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: string;
    };
};

export type NamesResponse = NamesResponses[keyof NamesResponses];

export type Size1Data = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/queue/size';
};

export type Size1Responses = {
    /**
     * OK
     */
    200: {
        [key: string]: {
            [key: string]: number;
        };
    };
};

export type Size1Response = Size1Responses[keyof Size1Responses];

export type GetRegisteredServicesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/registry/service';
};

export type GetRegisteredServicesResponses = {
    /**
     * OK
     */
    200: Array<ServiceRegistry>;
};

export type GetRegisteredServicesResponse = GetRegisteredServicesResponses[keyof GetRegisteredServicesResponses];

export type AddOrUpdateServiceData = {
    body: ServiceRegistry;
    path?: never;
    query?: never;
    url: '/api/registry/service';
};

export type AddOrUpdateServiceResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetAllProtosData = {
    body?: never;
    path: {
        registryName: string;
    };
    query?: never;
    url: '/api/registry/service/protos/{registryName}';
};

export type GetAllProtosResponses = {
    /**
     * OK
     */
    200: Array<ProtoRegistryEntry>;
};

export type GetAllProtosResponse = GetAllProtosResponses[keyof GetAllProtosResponses];

export type DeleteProtoData = {
    body?: never;
    path: {
        registryName: string;
        filename: string;
    };
    query?: never;
    url: '/api/registry/service/protos/{registryName}/{filename}';
};

export type DeleteProtoResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetProtoDataData = {
    body?: never;
    path: {
        registryName: string;
        filename: string;
    };
    query?: never;
    url: '/api/registry/service/protos/{registryName}/{filename}';
};

export type GetProtoDataResponses = {
    /**
     * OK
     */
    200: string;
};

export type GetProtoDataResponse = GetProtoDataResponses[keyof GetProtoDataResponses];

export type SetProtoDataData = {
    body: string;
    path: {
        registryName: string;
        filename: string;
    };
    query?: never;
    url: '/api/registry/service/protos/{registryName}/{filename}';
};

export type SetProtoDataResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type RemoveServiceData = {
    body?: never;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/registry/service/{name}';
};

export type RemoveServiceResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetServiceData = {
    body?: never;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/registry/service/{name}';
};

export type GetServiceResponses = {
    /**
     * OK
     */
    200: ServiceRegistry;
};

export type GetServiceResponse = GetServiceResponses[keyof GetServiceResponses];

export type CloseCircuitBreakerData = {
    body?: never;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/registry/service/{name}/circuit-breaker/close';
};

export type CloseCircuitBreakerResponses = {
    /**
     * OK
     */
    200: CircuitBreakerTransitionResponse;
};

export type CloseCircuitBreakerResponse = CloseCircuitBreakerResponses[keyof CloseCircuitBreakerResponses];

export type OpenCircuitBreakerData = {
    body?: never;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/registry/service/{name}/circuit-breaker/open';
};

export type OpenCircuitBreakerResponses = {
    /**
     * OK
     */
    200: CircuitBreakerTransitionResponse;
};

export type OpenCircuitBreakerResponse = OpenCircuitBreakerResponses[keyof OpenCircuitBreakerResponses];

export type GetCircuitBreakerStatusData = {
    body?: never;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/registry/service/{name}/circuit-breaker/status';
};

export type GetCircuitBreakerStatusResponses = {
    /**
     * OK
     */
    200: CircuitBreakerTransitionResponse;
};

export type GetCircuitBreakerStatusResponse = GetCircuitBreakerStatusResponses[keyof GetCircuitBreakerStatusResponses];

export type DiscoverData = {
    body?: never;
    path: {
        name: string;
    };
    query?: {
        create?: boolean;
    };
    url: '/api/registry/service/{name}/discover';
};

export type DiscoverResponses = {
    /**
     * OK
     */
    200: Array<ServiceMethod>;
};

export type DiscoverResponse = DiscoverResponses[keyof DiscoverResponses];

export type RemoveMethodData = {
    body?: never;
    path: {
        registryName: string;
    };
    query: {
        serviceName: string;
        method: string;
        methodType: string;
    };
    url: '/api/registry/service/{registryName}/methods';
};

export type RemoveMethodResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type AddOrUpdateMethodData = {
    body: ServiceMethod;
    path: {
        registryName: string;
    };
    query?: never;
    url: '/api/registry/service/{registryName}/methods';
};

export type AddOrUpdateMethodResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PauseAllSchedulesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/scheduler/admin/pause';
};

export type PauseAllSchedulesResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type PauseAllSchedulesResponse = PauseAllSchedulesResponses[keyof PauseAllSchedulesResponses];

export type RequeueAllExecutionRecordsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/scheduler/admin/requeue';
};

export type RequeueAllExecutionRecordsResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type RequeueAllExecutionRecordsResponse = RequeueAllExecutionRecordsResponses[keyof RequeueAllExecutionRecordsResponses];

export type ResumeAllSchedulesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/scheduler/admin/resume';
};

export type ResumeAllSchedulesResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type ResumeAllSchedulesResponse = ResumeAllSchedulesResponses[keyof ResumeAllSchedulesResponses];

export type PauseSchedulesData = {
    body: Array<string>;
    path?: never;
    query?: never;
    url: '/api/scheduler/bulk/pause';
};

export type PauseSchedulesResponses = {
    /**
     * OK
     */
    200: BulkResponse;
};

export type PauseSchedulesResponse = PauseSchedulesResponses[keyof PauseSchedulesResponses];

export type ResumeSchedulesData = {
    body: Array<string>;
    path?: never;
    query?: never;
    url: '/api/scheduler/bulk/resume';
};

export type ResumeSchedulesResponses = {
    /**
     * OK
     */
    200: BulkResponse;
};

export type ResumeSchedulesResponse = ResumeSchedulesResponses[keyof ResumeSchedulesResponses];

export type GetNextFewSchedulesData = {
    body?: never;
    path?: never;
    query: {
        cronExpression: string;
        scheduleStartTime?: number;
        scheduleEndTime?: number;
        limit?: number;
    };
    url: '/api/scheduler/nextFewSchedules';
};

export type GetNextFewSchedulesResponses = {
    /**
     * OK
     */
    200: Array<number>;
};

export type GetNextFewSchedulesResponse = GetNextFewSchedulesResponses[keyof GetNextFewSchedulesResponses];

export type GetAllSchedulesData = {
    body?: never;
    path?: never;
    query?: {
        workflowName?: string;
    };
    url: '/api/scheduler/schedules';
};

export type GetAllSchedulesResponses = {
    /**
     * OK
     */
    200: Array<WorkflowScheduleModel>;
};

export type GetAllSchedulesResponse = GetAllSchedulesResponses[keyof GetAllSchedulesResponses];

export type SaveScheduleData = {
    body: SaveScheduleRequest;
    path?: never;
    query?: never;
    url: '/api/scheduler/schedules';
};

export type SaveScheduleResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type SaveScheduleResponse = SaveScheduleResponses[keyof SaveScheduleResponses];

export type GetSchedulesByTagData = {
    body?: never;
    path?: never;
    query: {
        tag: string;
    };
    url: '/api/scheduler/schedules/tags';
};

export type GetSchedulesByTagResponses = {
    /**
     * OK
     */
    200: Array<WorkflowScheduleModel>;
};

export type GetSchedulesByTagResponse = GetSchedulesByTagResponses[keyof GetSchedulesByTagResponses];

export type DeleteScheduleData = {
    body?: never;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/scheduler/schedules/{name}';
};

export type DeleteScheduleResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type DeleteScheduleResponse = DeleteScheduleResponses[keyof DeleteScheduleResponses];

export type GetScheduleData = {
    body?: never;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/scheduler/schedules/{name}';
};

export type GetScheduleResponses = {
    /**
     * OK
     */
    200: WorkflowSchedule;
};

export type GetScheduleResponse = GetScheduleResponses[keyof GetScheduleResponses];

export type PauseScheduleData = {
    body?: never;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/scheduler/schedules/{name}/pause';
};

export type PauseScheduleResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type PauseScheduleResponse = PauseScheduleResponses[keyof PauseScheduleResponses];

export type ResumeScheduleData = {
    body?: never;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/scheduler/schedules/{name}/resume';
};

export type ResumeScheduleResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type ResumeScheduleResponse = ResumeScheduleResponses[keyof ResumeScheduleResponses];

export type DeleteTagForScheduleData = {
    body: Array<Tag>;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/scheduler/schedules/{name}/tags';
};

export type DeleteTagForScheduleResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetTagsForScheduleData = {
    body?: never;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/scheduler/schedules/{name}/tags';
};

export type GetTagsForScheduleResponses = {
    /**
     * OK
     */
    200: Array<Tag>;
};

export type GetTagsForScheduleResponse = GetTagsForScheduleResponses[keyof GetTagsForScheduleResponses];

export type PutTagForScheduleData = {
    body: Array<Tag>;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/scheduler/schedules/{name}/tags';
};

export type PutTagForScheduleResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type SearchV2Data = {
    body?: never;
    path?: never;
    query?: {
        start?: number;
        size?: number;
        sort?: string;
        freeText?: string;
        query?: string;
    };
    url: '/api/scheduler/search/executions';
};

export type SearchV2Responses = {
    /**
     * OK
     */
    200: SearchResultWorkflowScheduleExecutionModel;
};

export type SearchV2Response = SearchV2Responses[keyof SearchV2Responses];

export type GetAllSchemasData = {
    body?: never;
    path?: never;
    query?: {
        short?: boolean;
    };
    url: '/api/schema';
};

export type GetAllSchemasResponses = {
    /**
     * OK
     */
    200: Array<SchemaDef>;
};

export type GetAllSchemasResponse = GetAllSchemasResponses[keyof GetAllSchemasResponses];

export type SaveData = {
    body: Array<SchemaDef>;
    path?: never;
    query?: {
        newVersion?: boolean;
    };
    url: '/api/schema';
};

export type SaveResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type DeleteSchemaByNameData = {
    body?: never;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/schema/{name}';
};

export type DeleteSchemaByNameResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetSchemaByNameWithLatestVersionData = {
    body?: never;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/schema/{name}';
};

export type GetSchemaByNameWithLatestVersionResponses = {
    /**
     * OK
     */
    200: SchemaDef;
};

export type GetSchemaByNameWithLatestVersionResponse = GetSchemaByNameWithLatestVersionResponses[keyof GetSchemaByNameWithLatestVersionResponses];

export type DeleteSchemaByNameAndVersionData = {
    body?: never;
    path: {
        name: string;
        version: number;
    };
    query?: never;
    url: '/api/schema/{name}/{version}';
};

export type DeleteSchemaByNameAndVersionResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetSchemaByNameAndVersionData = {
    body?: never;
    path: {
        name: string;
        version: number;
    };
    query?: never;
    url: '/api/schema/{name}/{version}';
};

export type GetSchemaByNameAndVersionResponses = {
    /**
     * OK
     */
    200: SchemaDef;
};

export type GetSchemaByNameAndVersionResponse = GetSchemaByNameAndVersionResponses[keyof GetSchemaByNameAndVersionResponses];

export type ListSecretsThatUserCanGrantAccessToData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/secrets';
};

export type ListSecretsThatUserCanGrantAccessToResponses = {
    /**
     * OK
     */
    200: Array<string>;
};

export type ListSecretsThatUserCanGrantAccessToResponse = ListSecretsThatUserCanGrantAccessToResponses[keyof ListSecretsThatUserCanGrantAccessToResponses];

export type ListAllSecretNamesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/secrets';
};

export type ListAllSecretNamesResponses = {
    /**
     * OK
     */
    200: Array<string>;
};

export type ListAllSecretNamesResponse = ListAllSecretNamesResponses[keyof ListAllSecretNamesResponses];

export type ListSecretsWithTagsThatUserCanGrantAccessToData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/secrets-v2';
};

export type ListSecretsWithTagsThatUserCanGrantAccessToResponses = {
    /**
     * OK
     */
    200: Array<ExtendedSecret>;
};

export type ListSecretsWithTagsThatUserCanGrantAccessToResponse = ListSecretsWithTagsThatUserCanGrantAccessToResponses[keyof ListSecretsWithTagsThatUserCanGrantAccessToResponses];

export type ClearLocalCacheData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/secrets/clearLocalCache';
};

export type ClearLocalCacheResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: string;
    };
};

export type ClearLocalCacheResponse = ClearLocalCacheResponses[keyof ClearLocalCacheResponses];

export type ClearRedisCacheData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/secrets/clearRedisCache';
};

export type ClearRedisCacheResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: string;
    };
};

export type ClearRedisCacheResponse = ClearRedisCacheResponses[keyof ClearRedisCacheResponses];

export type DeleteSecretData = {
    body?: never;
    path: {
        key: string;
    };
    query?: never;
    url: '/api/secrets/{key}';
};

export type DeleteSecretResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type DeleteSecretResponse = DeleteSecretResponses[keyof DeleteSecretResponses];

export type GetSecretData = {
    body?: never;
    path: {
        key: string;
    };
    query?: never;
    url: '/api/secrets/{key}';
};

export type GetSecretResponses = {
    /**
     * OK
     */
    200: string;
};

export type GetSecretResponse = GetSecretResponses[keyof GetSecretResponses];

export type PutSecretData = {
    body: string;
    path: {
        key: string;
    };
    query?: never;
    url: '/api/secrets/{key}';
};

export type PutSecretResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type PutSecretResponse = PutSecretResponses[keyof PutSecretResponses];

export type SecretExistsData = {
    body?: never;
    path: {
        key: string;
    };
    query?: never;
    url: '/api/secrets/{key}/exists';
};

export type SecretExistsResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type SecretExistsResponse = SecretExistsResponses[keyof SecretExistsResponses];

export type DeleteTagForSecretData = {
    body: Array<Tag>;
    path: {
        key: string;
    };
    query?: never;
    url: '/api/secrets/{key}/tags';
};

export type DeleteTagForSecretResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetTagsData = {
    body?: never;
    path: {
        key: string;
    };
    query?: never;
    url: '/api/secrets/{key}/tags';
};

export type GetTagsResponses = {
    /**
     * OK
     */
    200: Array<Tag>;
};

export type GetTagsResponse = GetTagsResponses[keyof GetTagsResponses];

export type PutTagForSecretData = {
    body: Array<Tag>;
    path: {
        key: string;
    };
    query?: never;
    url: '/api/secrets/{key}/tags';
};

export type PutTagForSecretResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type UpdateTaskData = {
    body: TaskResult;
    path?: never;
    query?: never;
    url: '/api/tasks';
};

export type UpdateTaskResponses = {
    /**
     * OK
     */
    200: string;
};

export type UpdateTaskResponse = UpdateTaskResponses[keyof UpdateTaskResponses];

export type BatchPollData = {
    body?: never;
    path: {
        tasktype: string;
    };
    query?: {
        workerid?: string;
        domain?: string;
        count?: number;
        timeout?: number;
    };
    url: '/api/tasks/poll/batch/{tasktype}';
};

export type BatchPollResponses = {
    /**
     * OK
     */
    200: Array<Task>;
};

export type BatchPollResponse = BatchPollResponses[keyof BatchPollResponses];

export type PollData2 = {
    body?: never;
    path: {
        tasktype: string;
    };
    query?: {
        workerid?: string;
        domain?: string;
    };
    url: '/api/tasks/poll/{tasktype}';
};

export type PollResponses = {
    /**
     * OK
     */
    200: Task;
};

export type PollResponse = PollResponses[keyof PollResponses];

export type AllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/tasks/queue/all';
};

export type AllResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: number;
    };
};

export type AllResponse = AllResponses[keyof AllResponses];

export type AllVerboseData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/tasks/queue/all/verbose';
};

export type AllVerboseResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: {
            [key: string]: {
                [key: string]: number;
            };
        };
    };
};

export type AllVerboseResponse = AllVerboseResponses[keyof AllVerboseResponses];

export type GetPollDataData = {
    body?: never;
    path?: never;
    query: {
        taskType: string;
    };
    url: '/api/tasks/queue/polldata';
};

export type GetPollDataResponses = {
    /**
     * OK
     */
    200: Array<PollData>;
};

export type GetPollDataResponse = GetPollDataResponses[keyof GetPollDataResponses];

export type GetAllPollDataData = {
    body?: never;
    path?: never;
    query?: {
        workerSize?: number;
        workerOpt?: 'GT' | 'LT';
        queueSize?: number;
        queueOpt?: 'GT' | 'LT';
        lastPollTimeSize?: number;
        lastPollTimeOpt?: 'GT' | 'LT';
    };
    url: '/api/tasks/queue/polldata/all';
};

export type GetAllPollDataResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetAllPollDataResponse = GetAllPollDataResponses[keyof GetAllPollDataResponses];

export type RequeuePendingTaskData = {
    body?: never;
    path: {
        taskType: string;
    };
    query?: never;
    url: '/api/tasks/queue/requeue/{taskType}';
};

export type RequeuePendingTaskResponses = {
    /**
     * OK
     */
    200: string;
};

export type RequeuePendingTaskResponse = RequeuePendingTaskResponses[keyof RequeuePendingTaskResponses];

export type SizeData = {
    body?: never;
    path?: never;
    query?: {
        taskType?: Array<string>;
    };
    url: '/api/tasks/queue/sizes';
};

export type SizeResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: number;
    };
};

export type SizeResponse = SizeResponses[keyof SizeResponses];

export type Search2Data = {
    body?: never;
    path?: never;
    query?: {
        start?: number;
        size?: number;
        sort?: string;
        freeText?: string;
        query?: string;
    };
    url: '/api/tasks/search';
};

export type Search2Responses = {
    /**
     * OK
     */
    200: SearchResultTaskSummary;
};

export type Search2Response = Search2Responses[keyof Search2Responses];

export type UpdateTaskV2Data = {
    body: TaskResult;
    path?: never;
    query?: never;
    url: '/api/tasks/update-v2';
};

export type UpdateTaskV2Responses = {
    /**
     * OK
     */
    200: Task;
};

export type UpdateTaskV2Response = UpdateTaskV2Responses[keyof UpdateTaskV2Responses];

export type GetTaskData = {
    body?: never;
    path: {
        taskId: string;
    };
    query?: never;
    url: '/api/tasks/{taskId}';
};

export type GetTaskResponses = {
    /**
     * OK
     */
    200: Task;
};

export type GetTaskResponse = GetTaskResponses[keyof GetTaskResponses];

export type GetTaskLogsData = {
    body?: never;
    path: {
        taskId: string;
    };
    query?: never;
    url: '/api/tasks/{taskId}/log';
};

export type GetTaskLogsResponses = {
    /**
     * OK
     */
    200: Array<TaskExecLog>;
};

export type GetTaskLogsResponse = GetTaskLogsResponses[keyof GetTaskLogsResponses];

export type LogData = {
    body: string;
    path: {
        taskId: string;
    };
    query?: never;
    url: '/api/tasks/{taskId}/log';
};

export type LogResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type SignalWorkflowTaskASyncData = {
    body: {
        [key: string]: unknown;
    };
    path: {
        workflowId: string;
        status: 'IN_PROGRESS' | 'FAILED' | 'FAILED_WITH_TERMINAL_ERROR' | 'COMPLETED';
    };
    query?: never;
    url: '/api/tasks/{workflowId}/{status}/signal';
};

export type SignalWorkflowTaskASyncResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type SignalWorkflowTaskSyncData = {
    body: {
        [key: string]: unknown;
    };
    path: {
        workflowId: string;
        status: 'IN_PROGRESS' | 'FAILED' | 'FAILED_WITH_TERMINAL_ERROR' | 'COMPLETED';
    };
    query?: {
        returnStrategy?: 'TARGET_WORKFLOW' | 'BLOCKING_WORKFLOW' | 'BLOCKING_TASK' | 'BLOCKING_TASK_INPUT';
    };
    url: '/api/tasks/{workflowId}/{status}/signal/sync';
};

export type SignalWorkflowTaskSyncResponses = {
    /**
     * OK
     */
    200: SignalResponse;
};

export type SignalWorkflowTaskSyncResponse = SignalWorkflowTaskSyncResponses[keyof SignalWorkflowTaskSyncResponses];

export type UpdateTask1Data = {
    body: {
        [key: string]: unknown;
    };
    path: {
        workflowId: string;
        taskRefName: string;
        status: 'IN_PROGRESS' | 'FAILED' | 'FAILED_WITH_TERMINAL_ERROR' | 'COMPLETED';
    };
    query?: {
        workerid?: string;
    };
    url: '/api/tasks/{workflowId}/{taskRefName}/{status}';
};

export type UpdateTask1Responses = {
    /**
     * OK
     */
    200: string;
};

export type UpdateTask1Response = UpdateTask1Responses[keyof UpdateTask1Responses];

export type UpdateTaskSyncData = {
    body: {
        [key: string]: unknown;
    };
    path: {
        workflowId: string;
        taskRefName: string;
        status: 'IN_PROGRESS' | 'FAILED' | 'FAILED_WITH_TERMINAL_ERROR' | 'COMPLETED';
    };
    query?: {
        workerid?: string;
    };
    url: '/api/tasks/{workflowId}/{taskRefName}/{status}/sync';
};

export type UpdateTaskSyncResponses = {
    /**
     * OK
     */
    200: Workflow;
};

export type UpdateTaskSyncResponse = UpdateTaskSyncResponses[keyof UpdateTaskSyncResponses];

export type GenerateTokenData = {
    body: GenerateTokenRequest;
    path?: never;
    query?: never;
    url: '/api/token';
};

export type GenerateTokenResponses = {
    /**
     * OK
     */
    200: Response;
};

export type GenerateTokenResponse = GenerateTokenResponses[keyof GenerateTokenResponses];

export type GetUserInfoData = {
    body?: never;
    path?: never;
    query?: {
        claims?: boolean;
    };
    url: '/api/token/userInfo';
};

export type GetUserInfoResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetUserInfoResponse = GetUserInfoResponses[keyof GetUserInfoResponses];

export type ListUsersData = {
    body?: never;
    path?: never;
    query?: {
        apps?: boolean;
    };
    url: '/api/users';
};

export type ListUsersResponses = {
    /**
     * OK
     */
    200: Array<ConductorUser>;
};

export type ListUsersResponse = ListUsersResponses[keyof ListUsersResponses];

export type DeleteUserData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/users/{id}';
};

export type DeleteUserResponses = {
    /**
     * OK
     */
    200: Response;
};

export type DeleteUserResponse = DeleteUserResponses[keyof DeleteUserResponses];

export type GetUserData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/users/{id}';
};

export type GetUserResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetUserResponse = GetUserResponses[keyof GetUserResponses];

export type UpsertUserData = {
    body: UpsertUserRequest;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/users/{id}';
};

export type UpsertUserResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type UpsertUserResponse = UpsertUserResponses[keyof UpsertUserResponses];

export type CheckPermissionsData = {
    body?: never;
    path: {
        userId: string;
    };
    query: {
        type: string;
        id: string;
    };
    url: '/api/users/{userId}/checkPermissions';
};

export type CheckPermissionsResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type CheckPermissionsResponse = CheckPermissionsResponses[keyof CheckPermissionsResponses];

export type GetGrantedPermissionsData = {
    body?: never;
    path: {
        userId: string;
    };
    query?: never;
    url: '/api/users/{userId}/permissions';
};

export type GetGrantedPermissionsResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetGrantedPermissionsResponse = GetGrantedPermissionsResponses[keyof GetGrantedPermissionsResponses];

export type GetVersionData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/version';
};

export type GetVersionResponses = {
    /**
     * OK
     */
    200: string;
};

export type GetVersionResponse = GetVersionResponses[keyof GetVersionResponses];

export type StartWorkflowData = {
    body: StartWorkflowRequest;
    path?: never;
    query?: never;
    url: '/api/workflow';
};

export type StartWorkflowResponses = {
    /**
     * OK
     */
    200: string;
};

export type StartWorkflowResponse = StartWorkflowResponses[keyof StartWorkflowResponses];

export type DeleteData = {
    body: Array<string>;
    path?: never;
    query?: never;
    url: '/api/workflow/bulk/delete';
};

export type DeleteResponses = {
    /**
     * OK
     */
    200: BulkResponse;
};

export type DeleteResponse = DeleteResponses[keyof DeleteResponses];

export type PauseWorkflow1Data = {
    body: Array<string>;
    path?: never;
    query?: never;
    url: '/api/workflow/bulk/pause';
};

export type PauseWorkflow1Responses = {
    /**
     * OK
     */
    200: BulkResponse;
};

export type PauseWorkflow1Response = PauseWorkflow1Responses[keyof PauseWorkflow1Responses];

export type Restart1Data = {
    body: Array<string>;
    path?: never;
    query?: {
        useLatestDefinitions?: boolean;
    };
    url: '/api/workflow/bulk/restart';
};

export type Restart1Responses = {
    /**
     * OK
     */
    200: BulkResponse;
};

export type Restart1Response = Restart1Responses[keyof Restart1Responses];

export type ResumeWorkflow1Data = {
    body: Array<string>;
    path?: never;
    query?: never;
    url: '/api/workflow/bulk/resume';
};

export type ResumeWorkflow1Responses = {
    /**
     * OK
     */
    200: BulkResponse;
};

export type ResumeWorkflow1Response = ResumeWorkflow1Responses[keyof ResumeWorkflow1Responses];

export type Retry1Data = {
    body: Array<string>;
    path?: never;
    query?: never;
    url: '/api/workflow/bulk/retry';
};

export type Retry1Responses = {
    /**
     * OK
     */
    200: BulkResponse;
};

export type Retry1Response = Retry1Responses[keyof Retry1Responses];

export type TerminateData = {
    body: Array<string>;
    path?: never;
    query?: {
        reason?: string;
        triggerFailureWorkflow?: boolean;
    };
    url: '/api/workflow/bulk/terminate';
};

export type TerminateResponses = {
    /**
     * OK
     */
    200: BulkResponse;
};

export type TerminateResponse = TerminateResponses[keyof TerminateResponses];

export type GetWorkflows1Data = {
    body: CorrelationIdsSearchRequest;
    path?: never;
    query?: {
        includeClosed?: boolean;
        includeTasks?: boolean;
    };
    url: '/api/workflow/correlated/batch';
};

export type GetWorkflows1Responses = {
    /**
     * OK
     */
    200: {
        [key: string]: Array<Workflow>;
    };
};

export type GetWorkflows1Response = GetWorkflows1Responses[keyof GetWorkflows1Responses];

export type DecideData = {
    body?: never;
    path: {
        workflowId: string;
    };
    query?: never;
    url: '/api/workflow/decide/{workflowId}';
};

export type DecideResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type ExecuteWorkflowAsGetApiData = {
    body?: never;
    headers?: {
        requestId?: string;
        waitUntilTaskRef?: string;
        waitForSeconds?: number;
        'X-Idempotency-key'?: string;
        'X-on-conflict'?: 'FAIL' | 'RETURN_EXISTING' | 'FAIL_ON_RUNNING';
    };
    path: {
        name: string;
    };
    query?: {
        version?: number;
    };
    url: '/api/workflow/execute/{name}';
};

export type ExecuteWorkflowAsGetApiResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type ExecuteWorkflowAsGetApiResponse = ExecuteWorkflowAsGetApiResponses[keyof ExecuteWorkflowAsGetApiResponses];

export type ExecuteWorkflowAsApiData = {
    body: {
        [key: string]: unknown;
    };
    headers?: {
        requestId?: string;
        waitUntilTaskRef?: string;
        waitForSeconds?: number;
        'X-Idempotency-key'?: string;
        'X-on-conflict'?: 'FAIL' | 'RETURN_EXISTING' | 'FAIL_ON_RUNNING';
    };
    path: {
        name: string;
    };
    query?: {
        version?: number;
    };
    url: '/api/workflow/execute/{name}';
};

export type ExecuteWorkflowAsApiResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type ExecuteWorkflowAsApiResponse = ExecuteWorkflowAsApiResponses[keyof ExecuteWorkflowAsApiResponses];

export type ExecuteWorkflowData = {
    body: StartWorkflowRequest;
    path: {
        name: string;
        version: number;
    };
    query?: {
        requestId?: string;
        waitUntilTaskRef?: string;
        waitForSeconds?: number;
        consistency?: 'SYNCHRONOUS' | 'DURABLE' | 'REGION_DURABLE';
        returnStrategy?: 'TARGET_WORKFLOW' | 'BLOCKING_WORKFLOW' | 'BLOCKING_TASK' | 'BLOCKING_TASK_INPUT';
    };
    url: '/api/workflow/execute/{name}/{version}';
};

export type ExecuteWorkflowResponses = {
    /**
     * OK
     */
    200: SignalResponse;
};

export type ExecuteWorkflowResponse = ExecuteWorkflowResponses[keyof ExecuteWorkflowResponses];

export type GetRunningWorkflowData = {
    body?: never;
    path: {
        name: string;
    };
    query?: {
        version?: number;
        startTime?: number;
        endTime?: number;
    };
    url: '/api/workflow/running/{name}';
};

export type GetRunningWorkflowResponses = {
    /**
     * OK
     */
    200: Array<string>;
};

export type GetRunningWorkflowResponse = GetRunningWorkflowResponses[keyof GetRunningWorkflowResponses];

export type Search1Data = {
    body?: never;
    path?: never;
    query?: {
        start?: number;
        size?: number;
        sort?: string;
        freeText?: string;
        query?: string;
        skipCache?: boolean;
    };
    url: '/api/workflow/search';
};

export type Search1Responses = {
    /**
     * OK
     */
    200: ScrollableSearchResultWorkflowSummary;
};

export type Search1Response = Search1Responses[keyof Search1Responses];

export type StartWorkflowAsyncData = {
    body: {
        [key: string]: unknown;
    };
    headers?: {
        'X-Idempotency-key'?: string;
        'X-on-conflict'?: 'FAIL' | 'RETURN_EXISTING' | 'FAIL_ON_RUNNING';
    };
    path: {
        name: string;
        version: number;
    };
    query?: {
        correlationId?: string;
        priority?: number;
    };
    url: '/api/workflow/start/{name}/{version}';
};

export type StartWorkflowAsyncResponses = {
    /**
     * OK
     */
    200: string;
};

export type StartWorkflowAsyncResponse = StartWorkflowAsyncResponses[keyof StartWorkflowAsyncResponses];

export type TestWorkflowData = {
    body: WorkflowTestRequest;
    path?: never;
    query?: never;
    url: '/api/workflow/test';
};

export type TestWorkflowResponses = {
    /**
     * OK
     */
    200: Workflow;
};

export type TestWorkflowResponse = TestWorkflowResponses[keyof TestWorkflowResponses];

export type StartWorkflow1Data = {
    body: {
        [key: string]: unknown;
    };
    headers?: {
        'X-Idempotency-key'?: string;
        'X-on-conflict'?: 'FAIL' | 'RETURN_EXISTING' | 'FAIL_ON_RUNNING';
    };
    path: {
        name: string;
    };
    query?: {
        version?: number;
        correlationId?: string;
        priority?: number;
    };
    url: '/api/workflow/{name}';
};

export type StartWorkflow1Responses = {
    /**
     * OK
     */
    200: string;
};

export type StartWorkflow1Response = StartWorkflow1Responses[keyof StartWorkflow1Responses];

export type GetWorkflowsData = {
    body: Array<string>;
    path: {
        name: string;
    };
    query?: {
        includeClosed?: boolean;
        includeTasks?: boolean;
    };
    url: '/api/workflow/{name}/correlated';
};

export type GetWorkflowsResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: Array<Workflow>;
    };
};

export type GetWorkflowsResponse = GetWorkflowsResponses[keyof GetWorkflowsResponses];

export type GetWorkflows2Data = {
    body?: never;
    path: {
        name: string;
        correlationId: string;
    };
    query?: {
        includeClosed?: boolean;
        includeTasks?: boolean;
    };
    url: '/api/workflow/{name}/correlated/{correlationId}';
};

export type GetWorkflows2Responses = {
    /**
     * OK
     */
    200: Array<Workflow>;
};

export type GetWorkflows2Response = GetWorkflows2Responses[keyof GetWorkflows2Responses];

export type Terminate1Data = {
    body?: never;
    path: {
        workflowId: string;
    };
    query?: {
        reason?: string;
        triggerFailureWorkflow?: boolean;
    };
    url: '/api/workflow/{workflowId}';
};

export type Terminate1Responses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetExecutionStatusData = {
    body?: never;
    path: {
        workflowId: string;
    };
    query?: {
        includeTasks?: boolean;
        summarize?: boolean;
    };
    url: '/api/workflow/{workflowId}';
};

export type GetExecutionStatusResponses = {
    /**
     * OK
     */
    200: Workflow;
};

export type GetExecutionStatusResponse = GetExecutionStatusResponses[keyof GetExecutionStatusResponses];

export type JumpToTaskData = {
    body: {
        [key: string]: unknown;
    };
    path: {
        workflowId: string;
    };
    query?: {
        taskReferenceName?: string;
    };
    url: '/api/workflow/{workflowId}/jump/{taskReferenceName}';
};

export type JumpToTaskResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PauseWorkflowData = {
    body?: never;
    path: {
        workflowId: string;
    };
    query?: never;
    url: '/api/workflow/{workflowId}/pause';
};

export type PauseWorkflowResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type Delete1Data = {
    body?: never;
    path: {
        workflowId: string;
    };
    query?: {
        archiveWorkflow?: boolean;
    };
    url: '/api/workflow/{workflowId}/remove';
};

export type Delete1Responses = {
    /**
     * OK
     */
    200: unknown;
};

export type RerunData = {
    body: RerunWorkflowRequest;
    path: {
        workflowId: string;
    };
    query?: never;
    url: '/api/workflow/{workflowId}/rerun';
};

export type RerunResponses = {
    /**
     * OK
     */
    200: string;
};

export type RerunResponse = RerunResponses[keyof RerunResponses];

export type ResetWorkflowData = {
    body?: never;
    path: {
        workflowId: string;
    };
    query?: never;
    url: '/api/workflow/{workflowId}/resetcallbacks';
};

export type ResetWorkflowResponses = {
    /**
     * No Content
     */
    204: void;
};

export type ResetWorkflowResponse = ResetWorkflowResponses[keyof ResetWorkflowResponses];

export type RestartData = {
    body?: never;
    path: {
        workflowId: string;
    };
    query?: {
        useLatestDefinitions?: boolean;
    };
    url: '/api/workflow/{workflowId}/restart';
};

export type RestartResponses = {
    /**
     * No Content
     */
    204: void;
};

export type RestartResponse = RestartResponses[keyof RestartResponses];

export type ResumeWorkflowData = {
    body?: never;
    path: {
        workflowId: string;
    };
    query?: never;
    url: '/api/workflow/{workflowId}/resume';
};

export type ResumeWorkflowResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type RetryData = {
    body?: never;
    path: {
        workflowId: string;
    };
    query?: {
        resumeSubworkflowTasks?: boolean;
        retryIfRetriedByParent?: boolean;
    };
    url: '/api/workflow/{workflowId}/retry';
};

export type RetryResponses = {
    /**
     * No Content
     */
    204: void;
};

export type RetryResponse = RetryResponses[keyof RetryResponses];

export type SkipTaskFromWorkflowData = {
    body: SkipTaskRequest;
    path: {
        workflowId: string;
        taskReferenceName: string;
    };
    query?: never;
    url: '/api/workflow/{workflowId}/skiptask/{taskReferenceName}';
};

export type SkipTaskFromWorkflowResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type UpdateWorkflowAndTaskStateData = {
    body: WorkflowStateUpdate;
    path: {
        workflowId: string;
    };
    query: {
        requestId: string;
        waitUntilTaskRef?: string;
        waitForSeconds?: number;
    };
    url: '/api/workflow/{workflowId}/state';
};

export type UpdateWorkflowAndTaskStateResponses = {
    /**
     * OK
     */
    200: WorkflowRun;
};

export type UpdateWorkflowAndTaskStateResponse = UpdateWorkflowAndTaskStateResponses[keyof UpdateWorkflowAndTaskStateResponses];

export type GetWorkflowStatusSummaryData = {
    body?: never;
    path: {
        workflowId: string;
    };
    query?: {
        includeOutput?: boolean;
        includeVariables?: boolean;
    };
    url: '/api/workflow/{workflowId}/status';
};

export type GetWorkflowStatusSummaryResponses = {
    /**
     * OK
     */
    200: WorkflowStatus;
};

export type GetWorkflowStatusSummaryResponse = GetWorkflowStatusSummaryResponses[keyof GetWorkflowStatusSummaryResponses];

export type GetExecutionStatusTaskListData = {
    body?: never;
    path: {
        workflowId: string;
    };
    query?: {
        start?: number;
        count?: number;
        status?: Array<string>;
    };
    url: '/api/workflow/{workflowId}/tasks';
};

export type GetExecutionStatusTaskListResponses = {
    /**
     * OK
     */
    200: TaskListSearchResultSummary;
};

export type GetExecutionStatusTaskListResponse = GetExecutionStatusTaskListResponses[keyof GetExecutionStatusTaskListResponses];

export type UpgradeRunningWorkflowToVersionData = {
    body: UpgradeWorkflowRequest;
    path: {
        workflowId: string;
    };
    query?: never;
    url: '/api/workflow/{workflowId}/upgrade';
};

export type UpgradeRunningWorkflowToVersionResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type UpdateWorkflowStateData = {
    body: {
        [key: string]: unknown;
    };
    path: {
        workflowId: string;
    };
    query?: never;
    url: '/api/workflow/{workflowId}/variables';
};

export type UpdateWorkflowStateResponses = {
    /**
     * OK
     */
    200: Workflow;
};

export type UpdateWorkflowStateResponse = UpdateWorkflowStateResponses[keyof UpdateWorkflowStateResponses];

export type GetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/context.js';
};

export type GetResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type DoCheckData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type DoCheckResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type DoCheckResponse = DoCheckResponses[keyof DoCheckResponses];

export type HandleWebhook1Data = {
    body?: never;
    path: {
        id: string;
    };
    query: {
        requestParams: {
            [key: string]: unknown;
        };
    };
    url: '/webhook/{id}';
};

export type HandleWebhook1Responses = {
    /**
     * OK
     */
    200: string;
};

export type HandleWebhook1Response = HandleWebhook1Responses[keyof HandleWebhook1Responses];

export type HandleWebhookData = {
    body: string;
    path: {
        id: string;
    };
    query: {
        requestParams: {
            [key: string]: unknown;
        };
    };
    url: '/webhook/{id}';
};

export type HandleWebhookResponses = {
    /**
     * OK
     */
    200: string;
};

export type HandleWebhookResponse = HandleWebhookResponses[keyof HandleWebhookResponses];

export type ClientOptions = {
    baseUrl: 'https://sdkdev.orkesconductor.io' | (string & {});
};