// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { AddEventHandlerData, AddEventHandlerResponses, AddOrUpdateMethodData, AddOrUpdateMethodResponses, AddOrUpdateServiceData, AddOrUpdateServiceResponses, AddRoleToApplicationUserData, AddRoleToApplicationUserResponses, AddTaskTagData, AddTaskTagResponses, AddUsersToGroupData, AddUsersToGroupResponses, AddUserToGroupData, AddUserToGroupResponses, AddWorkflowTagData, AddWorkflowTagResponses, AllData, AllResponses, AllVerboseData, AllVerboseResponses, AssignAndClaimData, AssignAndClaimResponses, AssociatePromptWithIntegrationData, AssociatePromptWithIntegrationResponses, BackPopulateFullTextIndexData, BackPopulateFullTextIndexResponses, BatchPollData, BatchPollResponses, CheckPermissionsData, CheckPermissionsResponses, ClaimTaskData, ClaimTaskResponses, ClearLocalCacheData, ClearLocalCacheResponses, ClearRedisCacheData, ClearRedisCacheResponses, ClearTaskExecutionCacheData, ClearTaskExecutionCacheResponses, CloseCircuitBreakerData, CloseCircuitBreakerResponses, CreateAccessKeyData, CreateAccessKeyResponses, CreateApplicationData, CreateApplicationResponses, CreateData, CreateMessageTemplatesData, CreateMessageTemplatesResponses, CreateOrUpdateEnvVariableData, CreateOrUpdateEnvVariableResponses, CreateResponses, CreateWebhookData, CreateWebhookResponses, DecideData, DecideResponses, Delete1Data, Delete1Responses, DeleteAccessKeyData, DeleteAccessKeyResponses, DeleteApplicationData, DeleteApplicationResponses, DeleteData, DeleteEnvVariableData, DeleteEnvVariableResponses, DeleteGroupData, DeleteGroupResponses, DeleteIntegrationApiData, DeleteIntegrationApiResponses, DeleteIntegrationProviderData, DeleteIntegrationProviderResponses, DeleteMessageTemplate1Data, DeleteMessageTemplate1Responses, DeleteMessageTemplateData, DeleteMessageTemplateResponses, DeleteProtoData, DeleteProtoResponses, DeleteQueueConfigData, DeleteQueueConfigResponses, DeleteResponses, DeleteScheduleData, DeleteScheduleResponses, DeleteSchemaByNameAndVersionData, DeleteSchemaByNameAndVersionResponses, DeleteSchemaByNameData, DeleteSchemaByNameResponses, DeleteSecretData, DeleteSecretResponses, DeleteTagForApplicationData, DeleteTagForApplicationResponses, DeleteTagForEnvVarData, DeleteTagForEnvVarResponses, DeleteTagForEventHandlerData, DeleteTagForEventHandlerResponses, DeleteTagForIntegrationData, DeleteTagForIntegrationProviderData, DeleteTagForIntegrationProviderResponses, DeleteTagForIntegrationResponses, DeleteTagForPromptTemplateData, DeleteTagForPromptTemplateResponses, DeleteTagForScheduleData, DeleteTagForScheduleResponses, DeleteTagForSecretData, DeleteTagForSecretResponses, DeleteTagForUserFormTemplateData, DeleteTagForUserFormTemplateResponses, DeleteTagForWebhookData, DeleteTagForWebhookResponses, DeleteTaskFromHumanTaskRecords1Data, DeleteTaskFromHumanTaskRecords1Responses, DeleteTaskFromHumanTaskRecordsData, DeleteTaskFromHumanTaskRecordsResponses, DeleteTaskTagData, DeleteTaskTagResponses, DeleteTemplateByNameData, DeleteTemplateByNameResponses, DeleteTemplatesByNameAndVersionData, DeleteTemplatesByNameAndVersionResponses, DeleteUserData, DeleteUserResponses, DeleteWebhookData, DeleteWebhookResponses, DeleteWorkflowTagData, DeleteWorkflowTagResponses, DiscoverData, DiscoverResponses, DoCheckData, DoCheckResponses, ExecuteWorkflowAsApiData, ExecuteWorkflowAsApiResponses, ExecuteWorkflowAsGetApiData, ExecuteWorkflowAsGetApiResponses, ExecuteWorkflowData, ExecuteWorkflowResponses, GenerateTokenData, GenerateTokenResponses, Get1Data, Get1Responses, Get2Data, Get2Responses, Get3Data, Get3Responses, GetAccessKeysData, GetAccessKeysResponses, GetAllData, GetAllIntegrationsData, GetAllIntegrationsResponses, GetAllPollDataData, GetAllPollDataResponses, GetAllProtosData, GetAllProtosResponses, GetAllResponses, GetAllSchedulesData, GetAllSchedulesResponses, GetAllSchemasData, GetAllSchemasResponses, GetAllTemplatesData, GetAllTemplatesResponses, GetAllWebhookData, GetAllWebhookResponses, GetAppByAccessKeyIdData, GetAppByAccessKeyIdResponses, GetApplicationData, GetApplicationResponses, GetCircuitBreakerStatusData, GetCircuitBreakerStatusResponses, GetConductorTaskByIdData, GetConductorTaskByIdResponses, GetData, GetEventHandlerByNameData, GetEventHandlerByNameResponses, GetEventHandlersData, GetEventHandlersForEvent1Data, GetEventHandlersForEvent1Responses, GetEventHandlersForEvent2Data, GetEventHandlersForEvent2Responses, GetEventHandlersForEventData, GetEventHandlersForEventResponses, GetEventHandlersResponses, GetEventsData, GetEventsResponses, GetExecutionStatusData, GetExecutionStatusResponses, GetExecutionStatusTaskListData, GetExecutionStatusTaskListResponses, GetGrantedPermissions1Data, GetGrantedPermissions1Responses, GetGrantedPermissionsData, GetGrantedPermissionsResponses, GetGroupData, GetGroupResponses, GetIntegrationApiData, GetIntegrationApiResponses, GetIntegrationApisData, GetIntegrationApisResponses, GetIntegrationAvailableApisData, GetIntegrationAvailableApisResponses, GetIntegrationDefData, GetIntegrationDefResponses, GetIntegrationProviderData, GetIntegrationProviderDefsData, GetIntegrationProviderDefsResponses, GetIntegrationProviderResponses, GetIntegrationProvidersData, GetIntegrationProvidersResponses, GetMessagesData, GetMessagesResponses, GetMessageTemplateData, GetMessageTemplateResponses, GetMessageTemplatesData, GetMessageTemplatesResponses, GetMessageTemplateVersionsData, GetMessageTemplateVersionsResponses, GetNextFewSchedulesData, GetNextFewSchedulesResponses, GetPermissionsData, GetPermissionsResponses, GetPollDataData, GetPollDataResponses, GetPromptsWithIntegrationData, GetPromptsWithIntegrationResponses, GetProtoDataData, GetProtoDataResponses, GetProvidersAndIntegrationsData, GetProvidersAndIntegrationsResponses, GetQueueConfigData, GetQueueConfigResponses, GetQueueNamesData, GetQueueNamesResponses, GetRedisUsageData, GetRedisUsageResponses, GetRegisteredServicesData, GetRegisteredServicesResponses, GetResponses, GetRunningWorkflowData, GetRunningWorkflowResponses, GetScheduleData, GetScheduleResponses, GetSchedulesByTagData, GetSchedulesByTagResponses, GetSchemaByNameAndVersionData, GetSchemaByNameAndVersionResponses, GetSchemaByNameWithLatestVersion1Data, GetSchemaByNameWithLatestVersion1Responses, GetSchemaByNameWithLatestVersionData, GetSchemaByNameWithLatestVersionResponses, GetSecretData, GetSecretResponses, GetServiceData, GetServiceResponses, GetTags1Data, GetTags1Responses, GetTagsData, GetTagsForApplicationData, GetTagsForApplicationResponses, GetTagsForEnvVarData, GetTagsForEnvVarResponses, GetTagsForEventHandlerData, GetTagsForEventHandlerResponses, GetTagsForIntegrationData, GetTagsForIntegrationProviderData, GetTagsForIntegrationProviderResponses, GetTagsForIntegrationResponses, GetTagsForPromptTemplateData, GetTagsForPromptTemplateResponses, GetTagsForScheduleData, GetTagsForScheduleResponses, GetTagsForUserFormTemplateData, GetTagsForUserFormTemplateResponses, GetTagsForWebhookData, GetTagsForWebhookResponses, GetTagsResponses, GetTask1Data, GetTask1Responses, GetTaskData, GetTaskDefData, GetTaskDefResponses, GetTaskDefsData, GetTaskDefsResponses, GetTaskDisplayNamesData, GetTaskDisplayNamesResponses, GetTaskLogsData, GetTaskLogsResponses, GetTaskResponses, GetTaskTagsData, GetTaskTagsResponses, GetTemplateByNameAndVersionData, GetTemplateByNameAndVersionResponses, GetTemplateByTaskIdData, GetTemplateByTaskIdResponses, GetTokenLimitData, GetTokenLimitResponses, GetTokenUsageData, GetTokenUsageResponses, GetUserData, GetUserInfoData, GetUserInfoResponses, GetUserResponses, GetUsersInGroupData, GetUsersInGroupResponses, GetVersionData, GetVersionResponses, GetWebhookData, GetWebhookResponses, GetWorkflowDefsData, GetWorkflowDefsResponses, GetWorkflows1Data, GetWorkflows1Responses, GetWorkflows2Data, GetWorkflows2Responses, GetWorkflowsData, GetWorkflowsResponses, GetWorkflowStatusSummaryData, GetWorkflowStatusSummaryResponses, GetWorkflowTagsData, GetWorkflowTagsResponses, GrantPermissionsData, GrantPermissionsResponses, HandleIncomingEventData, HandleIncomingEventResponses, HandleWebhook1Data, HandleWebhook1Responses, HandleWebhookData, HandleWebhookResponses, JumpToTaskData, JumpToTaskResponses, ListAllSecretNamesData, ListAllSecretNamesResponses, ListApplicationsData, ListApplicationsResponses, ListGroupsData, ListGroupsResponses, ListSecretsThatUserCanGrantAccessToData, ListSecretsThatUserCanGrantAccessToResponses, ListSecretsWithTagsThatUserCanGrantAccessToData, ListSecretsWithTagsThatUserCanGrantAccessToResponses, ListUsersData, ListUsersResponses, LogData, LogResponses, NamesData, NamesResponses, OpenCircuitBreakerData, OpenCircuitBreakerResponses, PauseAllSchedulesData, PauseAllSchedulesResponses, PauseScheduleData, PauseScheduleResponses, PauseSchedulesData, PauseSchedulesResponses, PauseWorkflow1Data, PauseWorkflow1Responses, PauseWorkflowData, PauseWorkflowResponses, PollData2, PollResponses, PutQueueConfigData, PutQueueConfigResponses, PutSecretData, PutSecretResponses, PutTagForApplicationData, PutTagForApplicationResponses, PutTagForEnvVarData, PutTagForEnvVarResponses, PutTagForEventHandlerData, PutTagForEventHandlerResponses, PutTagForIntegrationData, PutTagForIntegrationProviderData, PutTagForIntegrationProviderResponses, PutTagForIntegrationResponses, PutTagForPromptTemplateData, PutTagForPromptTemplateResponses, PutTagForScheduleData, PutTagForScheduleResponses, PutTagForSecretData, PutTagForSecretResponses, PutTagForUserFormTemplateData, PutTagForUserFormTemplateResponses, PutTagForWebhookData, PutTagForWebhookResponses, ReassignTaskData, ReassignTaskResponses, RecordEventStatsData, RecordEventStatsResponses, RegisterIntegrationData, RegisterIntegrationResponses, RegisterTaskDefData, RegisterTaskDefResponses, ReleaseTaskData, ReleaseTaskResponses, RemoveEventHandlerStatusData, RemoveEventHandlerStatusResponses, RemoveMethodData, RemoveMethodResponses, RemovePermissionsData, RemovePermissionsResponses, RemoveRoleFromApplicationUserData, RemoveRoleFromApplicationUserResponses, RemoveServiceData, RemoveServiceResponses, RemoveUserFromGroupData, RemoveUserFromGroupResponses, RemoveUsersFromGroupData, RemoveUsersFromGroupResponses, RequeueAllExecutionRecordsData, RequeueAllExecutionRecordsResponses, RequeuePendingTaskData, RequeuePendingTaskResponses, RequeueSweepData, RequeueSweepResponses, RerunData, RerunResponses, ResetWorkflowData, ResetWorkflowResponses, Restart1Data, Restart1Responses, RestartData, RestartResponses, ResumeAllSchedulesData, ResumeAllSchedulesResponses, ResumeScheduleData, ResumeScheduleResponses, ResumeSchedulesData, ResumeSchedulesResponses, ResumeWorkflow1Data, ResumeWorkflow1Responses, ResumeWorkflowData, ResumeWorkflowResponses, Retry1Data, Retry1Responses, RetryData, RetryResponses, Save1Data, Save1Responses, SaveAllIntegrationsData, SaveAllIntegrationsResponses, SaveData, SaveIntegrationApiData, SaveIntegrationApiResponses, SaveIntegrationProviderData, SaveIntegrationProviderResponses, SaveMessageTemplateData, SaveMessageTemplateResponses, SaveResponses, SaveScheduleData, SaveScheduleResponses, SaveTemplateData, SaveTemplateResponses, SaveTemplatesData, SaveTemplatesResponses, Search1Data, Search1Responses, Search2Data, Search2Responses, SearchData, SearchResponses, SearchV2Data, SearchV2Responses, SecretExistsData, SecretExistsResponses, SetProtoDataData, SetProtoDataResponses, SetTaskTagsData, SetTaskTagsResponses, SetWorkflowTagsData, SetWorkflowTagsResponses, SignalWorkflowTaskASyncData, SignalWorkflowTaskASyncResponses, SignalWorkflowTaskSyncData, SignalWorkflowTaskSyncResponses, Size1Data, Size1Responses, SizeData, SizeResponses, SkipTaskData, SkipTaskFromWorkflowData, SkipTaskFromWorkflowResponses, SkipTaskResponses, StartWorkflow1Data, StartWorkflow1Responses, StartWorkflowAsyncData, StartWorkflowAsyncResponses, StartWorkflowData, StartWorkflowResponses, Terminate1Data, Terminate1Responses, TerminateData, TerminateResponses, TestConnectivityData, TestConnectivityResponses, TestData, TestMessageTemplateData, TestMessageTemplateResponses, TestResponses, TestWorkflowData, TestWorkflowResponses, ToggleAccessKeyStatusData, ToggleAccessKeyStatusResponses, UnregisterTaskDefData, UnregisterTaskDefResponses, UnregisterWorkflowDefData, UnregisterWorkflowDefResponses, UpdateApplicationData, UpdateApplicationResponses, UpdateData, UpdateEventHandlerData, UpdateEventHandlerResponses, UpdateMessageTemplateData, UpdateMessageTemplateResponses, UpdateResponses, UpdateTask1Data, UpdateTask1Responses, UpdateTaskData, UpdateTaskDefData, UpdateTaskDefResponses, UpdateTaskOutputByRefData, UpdateTaskOutputByRefResponses, UpdateTaskOutputData, UpdateTaskOutputResponses, UpdateTaskResponses, UpdateTaskSyncData, UpdateTaskSyncResponses, UpdateTaskV2Data, UpdateTaskV2Responses, UpdateTokenLimitData, UpdateTokenLimitResponses, UpdateWebhookData, UpdateWebhookResponses, UpdateWorkflowAndTaskStateData, UpdateWorkflowAndTaskStateResponses, UpdateWorkflowStateData, UpdateWorkflowStateResponses, UpgradeRunningWorkflowToVersionData, UpgradeRunningWorkflowToVersionResponses, UploadBpmnFileData, UploadBpmnFileResponses, UploadWorkflowsAndTasksDefinitionsToS3Data, UploadWorkflowsAndTasksDefinitionsToS3Responses, UpsertGroupData, UpsertGroupResponses, UpsertUserData, UpsertUserResponses, VerifyAndRepairWorkflowConsistencyData, VerifyAndRepairWorkflowConsistencyResponses, ViewData, ViewResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export class AdminResource {
    /**
     * Remove execution cached values for the task
     */
    public static clearTaskExecutionCache<ThrowOnError extends boolean = false>(options: Options<ClearTaskExecutionCacheData, ThrowOnError>) {
        return (options.client ?? client).post<ClearTaskExecutionCacheResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/admin/cache/clear/{taskDefName}',
            ...options
        });
    }
    
    /**
     * Verify and repair workflow consistency
     */
    public static verifyAndRepairWorkflowConsistency<ThrowOnError extends boolean = false>(options: Options<VerifyAndRepairWorkflowConsistencyData, ThrowOnError>) {
        return (options.client ?? client).post<VerifyAndRepairWorkflowConsistencyResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/admin/consistency/verifyAndRepair/{workflowId}',
            ...options
        });
    }
    
    /**
     * Get details of redis usage
     */
    public static getRedisUsage<ThrowOnError extends boolean = false>(options?: Options<GetRedisUsageData, ThrowOnError>) {
        return (options?.client ?? client).get<GetRedisUsageResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/admin/redisUsage',
            ...options
        });
    }
    
    /**
     * Queue up all the running workflows for sweep
     */
    public static requeueSweep<ThrowOnError extends boolean = false>(options: Options<RequeueSweepData, ThrowOnError>) {
        return (options.client ?? client).post<RequeueSweepResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/admin/sweep/requeue/{workflowId}',
            ...options
        });
    }
    
    /**
     * Get the list of pending tasks for a given task type
     */
    public static view<ThrowOnError extends boolean = false>(options: Options<ViewData, ThrowOnError>) {
        return (options.client ?? client).get<ViewResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/admin/task/{tasktype}',
            ...options
        });
    }
}

export class ApplicationResource {
    /**
     * Get all applications
     */
    public static listApplications<ThrowOnError extends boolean = false>(options?: Options<ListApplicationsData, ThrowOnError>) {
        return (options?.client ?? client).get<ListApplicationsResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/applications',
            ...options
        });
    }
    
    /**
     * Create an application
     */
    public static createApplication<ThrowOnError extends boolean = false>(options: Options<CreateApplicationData, ThrowOnError>) {
        return (options.client ?? client).post<CreateApplicationResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/applications',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get application id by access key id
     */
    public static getAppByAccessKeyId<ThrowOnError extends boolean = false>(options: Options<GetAppByAccessKeyIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetAppByAccessKeyIdResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/applications/key/{accessKeyId}',
            ...options
        });
    }
    
    /**
     * Delete an access key
     */
    public static deleteAccessKey<ThrowOnError extends boolean = false>(options: Options<DeleteAccessKeyData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteAccessKeyResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/applications/{applicationId}/accessKeys/{keyId}',
            ...options
        });
    }
    
    /**
     * Toggle the status of an access key
     */
    public static toggleAccessKeyStatus<ThrowOnError extends boolean = false>(options: Options<ToggleAccessKeyStatusData, ThrowOnError>) {
        return (options.client ?? client).post<ToggleAccessKeyStatusResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/applications/{applicationId}/accessKeys/{keyId}/status',
            ...options
        });
    }
    
    public static removeRoleFromApplicationUser<ThrowOnError extends boolean = false>(options: Options<RemoveRoleFromApplicationUserData, ThrowOnError>) {
        return (options.client ?? client).delete<RemoveRoleFromApplicationUserResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/applications/{applicationId}/roles/{role}',
            ...options
        });
    }
    
    public static addRoleToApplicationUser<ThrowOnError extends boolean = false>(options: Options<AddRoleToApplicationUserData, ThrowOnError>) {
        return (options.client ?? client).post<AddRoleToApplicationUserResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/applications/{applicationId}/roles/{role}',
            ...options
        });
    }
    
    /**
     * Delete an application
     */
    public static deleteApplication<ThrowOnError extends boolean = false>(options: Options<DeleteApplicationData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteApplicationResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/applications/{id}',
            ...options
        });
    }
    
    /**
     * Get an application by id
     */
    public static getApplication<ThrowOnError extends boolean = false>(options: Options<GetApplicationData, ThrowOnError>) {
        return (options.client ?? client).get<GetApplicationResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/applications/{id}',
            ...options
        });
    }
    
    /**
     * Update an application
     */
    public static updateApplication<ThrowOnError extends boolean = false>(options: Options<UpdateApplicationData, ThrowOnError>) {
        return (options.client ?? client).put<UpdateApplicationResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/applications/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get application's access keys
     */
    public static getAccessKeys<ThrowOnError extends boolean = false>(options: Options<GetAccessKeysData, ThrowOnError>) {
        return (options.client ?? client).get<GetAccessKeysResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/applications/{id}/accessKeys',
            ...options
        });
    }
    
    /**
     * Create an access key for an application
     */
    public static createAccessKey<ThrowOnError extends boolean = false>(options: Options<CreateAccessKeyData, ThrowOnError>) {
        return (options.client ?? client).post<CreateAccessKeyResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/applications/{id}/accessKeys',
            ...options
        });
    }
    
    /**
     * Delete a tag for application
     */
    public static deleteTagForApplication<ThrowOnError extends boolean = false>(options: Options<DeleteTagForApplicationData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteTagForApplicationResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/applications/{id}/tags',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get tags by application
     */
    public static getTagsForApplication<ThrowOnError extends boolean = false>(options: Options<GetTagsForApplicationData, ThrowOnError>) {
        return (options.client ?? client).get<GetTagsForApplicationResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/applications/{id}/tags',
            ...options
        });
    }
    
    /**
     * Put a tag to application
     */
    public static putTagForApplication<ThrowOnError extends boolean = false>(options: Options<PutTagForApplicationData, ThrowOnError>) {
        return (options.client ?? client).put<PutTagForApplicationResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/applications/{id}/tags',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class AuthorizationResource {
    /**
     * Remove user's access over the target
     */
    public static removePermissions<ThrowOnError extends boolean = false>(options: Options<RemovePermissionsData, ThrowOnError>) {
        return (options.client ?? client).delete<RemovePermissionsResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/auth/authorization',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Grant access to a user over the target
     */
    public static grantPermissions<ThrowOnError extends boolean = false>(options: Options<GrantPermissionsData, ThrowOnError>) {
        return (options.client ?? client).post<GrantPermissionsResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/auth/authorization',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get the access that have been granted over the given object
     */
    public static getPermissions<ThrowOnError extends boolean = false>(options: Options<GetPermissionsData, ThrowOnError>) {
        return (options.client ?? client).get<GetPermissionsResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/auth/authorization/{type}/{id}',
            ...options
        });
    }
}

export class EnvironmentResource {
    /**
     * List all the environment variables
     */
    public static getAll<ThrowOnError extends boolean = false>(options?: Options<GetAllData, ThrowOnError>) {
        return (options?.client ?? client).get<GetAllResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/environment',
            ...options
        });
    }
    
    /**
     * Delete an environment variable (requires metadata or admin role)
     */
    public static deleteEnvVariable<ThrowOnError extends boolean = false>(options: Options<DeleteEnvVariableData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteEnvVariableResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/environment/{key}',
            ...options
        });
    }
    
    /**
     * Get the environment value by key
     */
    public static get3<ThrowOnError extends boolean = false>(options: Options<Get3Data, ThrowOnError>) {
        return (options.client ?? client).get<Get3Responses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/environment/{key}',
            ...options
        });
    }
    
    /**
     * Create or update an environment variable (requires metadata or admin role)
     */
    public static createOrUpdateEnvVariable<ThrowOnError extends boolean = false>(options: Options<CreateOrUpdateEnvVariableData, ThrowOnError>) {
        return (options.client ?? client).put<CreateOrUpdateEnvVariableResponses, unknown, ThrowOnError>({
            bodySerializer: null,
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/environment/{key}',
            ...options,
            headers: {
                'Content-Type': 'text/plain',
                ...options.headers
            }
        });
    }
    
    /**
     * Delete a tag for environment variable name
     */
    public static deleteTagForEnvVar<ThrowOnError extends boolean = false>(options: Options<DeleteTagForEnvVarData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteTagForEnvVarResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/environment/{name}/tags',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get tags by environment variable name
     */
    public static getTagsForEnvVar<ThrowOnError extends boolean = false>(options: Options<GetTagsForEnvVarData, ThrowOnError>) {
        return (options.client ?? client).get<GetTagsForEnvVarResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/environment/{name}/tags',
            ...options
        });
    }
    
    /**
     * Put a tag to environment variable name
     */
    public static putTagForEnvVar<ThrowOnError extends boolean = false>(options: Options<PutTagForEnvVarData, ThrowOnError>) {
        return (options.client ?? client).put<PutTagForEnvVarResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/environment/{name}/tags',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class EventResource {
    /**
     * Get all the event handlers
     */
    public static getEventHandlers<ThrowOnError extends boolean = false>(options?: Options<GetEventHandlersData, ThrowOnError>) {
        return (options?.client ?? client).get<GetEventHandlersResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/event',
            ...options
        });
    }
    
    /**
     * Add a new event handler.
     */
    public static addEventHandler<ThrowOnError extends boolean = false>(options: Options<AddEventHandlerData, ThrowOnError>) {
        return (options.client ?? client).post<AddEventHandlerResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/event',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Update an existing event handler.
     */
    public static updateEventHandler<ThrowOnError extends boolean = false>(options: Options<UpdateEventHandlerData, ThrowOnError>) {
        return (options.client ?? client).put<UpdateEventHandlerResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/event',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Handle an incoming event
     */
    public static handleIncomingEvent<ThrowOnError extends boolean = false>(options: Options<HandleIncomingEventData, ThrowOnError>) {
        return (options.client ?? client).post<HandleIncomingEventResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/event/handleIncomingEvent',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get event handler by name
     */
    public static test<ThrowOnError extends boolean = false>(options?: Options<TestData, ThrowOnError>) {
        return (options?.client ?? client).get<TestResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/event/handler/',
            ...options
        });
    }
    
    /**
     * Get event handler by name
     */
    public static getEventHandlerByName<ThrowOnError extends boolean = false>(options: Options<GetEventHandlerByNameData, ThrowOnError>) {
        return (options.client ?? client).get<GetEventHandlerByNameResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/event/handler/{name}',
            ...options
        });
    }
    
    /**
     * Get all queue configs
     */
    public static getQueueNames<ThrowOnError extends boolean = false>(options?: Options<GetQueueNamesData, ThrowOnError>) {
        return (options?.client ?? client).get<GetQueueNamesResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/event/queue/config',
            ...options
        });
    }
    
    /**
     * Delete queue config by name
     */
    public static deleteQueueConfig<ThrowOnError extends boolean = false>(options: Options<DeleteQueueConfigData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteQueueConfigResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/event/queue/config/{queueType}/{queueName}',
            ...options
        });
    }
    
    /**
     * Get queue config by name
     */
    public static getQueueConfig<ThrowOnError extends boolean = false>(options: Options<GetQueueConfigData, ThrowOnError>) {
        return (options.client ?? client).get<GetQueueConfigResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/event/queue/config/{queueType}/{queueName}',
            ...options
        });
    }
    
    /**
     * Create or update queue config by name
     *
     * @deprecated
     */
    public static putQueueConfig<ThrowOnError extends boolean = false>(options: Options<PutQueueConfigData, ThrowOnError>) {
        return (options.client ?? client).put<PutQueueConfigResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/event/queue/config/{queueType}/{queueName}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Test connectivity for a given queue using a workflow with EVENT task and an EventHandler
     */
    public static testConnectivity<ThrowOnError extends boolean = false>(options: Options<TestConnectivityData, ThrowOnError>) {
        return (options.client ?? client).post<TestConnectivityResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/event/queue/connectivity',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get event handlers for a given event
     */
    public static getEventHandlersForEvent<ThrowOnError extends boolean = false>(options: Options<GetEventHandlersForEventData, ThrowOnError>) {
        return (options.client ?? client).get<GetEventHandlersForEventResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/event/{event}',
            ...options
        });
    }
    
    /**
     * Remove an event handler
     */
    public static removeEventHandlerStatus<ThrowOnError extends boolean = false>(options: Options<RemoveEventHandlerStatusData, ThrowOnError>) {
        return (options.client ?? client).delete<RemoveEventHandlerStatusResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/event/{name}',
            ...options
        });
    }
    
    /**
     * Delete a tag for event handler
     */
    public static deleteTagForEventHandler<ThrowOnError extends boolean = false>(options: Options<DeleteTagForEventHandlerData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteTagForEventHandlerResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/event/{name}/tags',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get tags by event handler
     */
    public static getTagsForEventHandler<ThrowOnError extends boolean = false>(options: Options<GetTagsForEventHandlerData, ThrowOnError>) {
        return (options.client ?? client).get<GetTagsForEventHandlerResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/event/{name}/tags',
            ...options
        });
    }
    
    /**
     * Put a tag to event handler
     */
    public static putTagForEventHandler<ThrowOnError extends boolean = false>(options: Options<PutTagForEventHandlerData, ThrowOnError>) {
        return (options.client ?? client).put<PutTagForEventHandlerResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/event/{name}/tags',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class EventExecutionResource {
    /**
     * Get All active Event Handlers
     */
    public static getEventHandlersForEvent1<ThrowOnError extends boolean = false>(options?: Options<GetEventHandlersForEvent1Data, ThrowOnError>) {
        return (options?.client ?? client).get<GetEventHandlersForEvent1Responses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/event/execution',
            ...options
        });
    }
    
    /**
     * Get event handlers for a given event
     */
    public static getEventHandlersForEvent2<ThrowOnError extends boolean = false>(options: Options<GetEventHandlersForEvent2Data, ThrowOnError>) {
        return (options.client ?? client).get<GetEventHandlersForEvent2Responses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/event/execution/{eventHandlerName}',
            ...options
        });
    }
}

export class EventMessageResource {
    /**
     * Get all event handlers with statistics
     */
    public static getEvents<ThrowOnError extends boolean = false>(options?: Options<GetEventsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetEventsResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/event/message',
            ...options
        });
    }
    
    /**
     * Get event messages for a given event
     */
    public static getMessages<ThrowOnError extends boolean = false>(options: Options<GetMessagesData, ThrowOnError>) {
        return (options.client ?? client).get<GetMessagesResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/event/message/{event}',
            ...options
        });
    }
}

export class GlobalSchemaResource {
    /**
     * Save schema
     */
    public static save1<ThrowOnError extends boolean = false>(options: Options<Save1Data, ThrowOnError>) {
        return (options.client ?? client).post<Save1Responses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/global_schema',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get schema by name with latest version
     */
    public static getSchemaByNameWithLatestVersion1<ThrowOnError extends boolean = false>(options: Options<GetSchemaByNameWithLatestVersion1Data, ThrowOnError>) {
        return (options.client ?? client).get<GetSchemaByNameWithLatestVersion1Responses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/global_schema/{name}',
            ...options
        });
    }
}

export class GroupResource {
    /**
     * Get all groups
     */
    public static listGroups<ThrowOnError extends boolean = false>(options?: Options<ListGroupsData, ThrowOnError>) {
        return (options?.client ?? client).get<ListGroupsResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/groups',
            ...options
        });
    }
    
    /**
     * Get the permissions this group has over workflows and tasks
     */
    public static getGrantedPermissions1<ThrowOnError extends boolean = false>(options: Options<GetGrantedPermissions1Data, ThrowOnError>) {
        return (options.client ?? client).get<GetGrantedPermissions1Responses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/groups/{groupId}/permissions',
            ...options
        });
    }
    
    /**
     * Remove users from group
     */
    public static removeUsersFromGroup<ThrowOnError extends boolean = false>(options: Options<RemoveUsersFromGroupData, ThrowOnError>) {
        return (options.client ?? client).delete<RemoveUsersFromGroupResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/groups/{groupId}/users',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Add users to group
     */
    public static addUsersToGroup<ThrowOnError extends boolean = false>(options: Options<AddUsersToGroupData, ThrowOnError>) {
        return (options.client ?? client).post<AddUsersToGroupResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/groups/{groupId}/users',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Remove user from group
     */
    public static removeUserFromGroup<ThrowOnError extends boolean = false>(options: Options<RemoveUserFromGroupData, ThrowOnError>) {
        return (options.client ?? client).delete<RemoveUserFromGroupResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/groups/{groupId}/users/{userId}',
            ...options
        });
    }
    
    /**
     * Add user to group
     */
    public static addUserToGroup<ThrowOnError extends boolean = false>(options: Options<AddUserToGroupData, ThrowOnError>) {
        return (options.client ?? client).post<AddUserToGroupResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/groups/{groupId}/users/{userId}',
            ...options
        });
    }
    
    /**
     * Delete a group
     */
    public static deleteGroup<ThrowOnError extends boolean = false>(options: Options<DeleteGroupData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteGroupResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/groups/{id}',
            ...options
        });
    }
    
    /**
     * Get a group by id
     */
    public static getGroup<ThrowOnError extends boolean = false>(options: Options<GetGroupData, ThrowOnError>) {
        return (options.client ?? client).get<GetGroupResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/groups/{id}',
            ...options
        });
    }
    
    /**
     * Create or update a group
     */
    public static upsertGroup<ThrowOnError extends boolean = false>(options: Options<UpsertGroupData, ThrowOnError>) {
        return (options.client ?? client).put<UpsertGroupResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/groups/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get all users in group
     */
    public static getUsersInGroup<ThrowOnError extends boolean = false>(options: Options<GetUsersInGroupData, ThrowOnError>) {
        return (options.client ?? client).get<GetUsersInGroupResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/groups/{id}/users',
            ...options
        });
    }
}

export class HumanTask {
    /**
     * API for backpopulating index data
     */
    public static backPopulateFullTextIndex<ThrowOnError extends boolean = false>(options: Options<BackPopulateFullTextIndexData, ThrowOnError>) {
        return (options.client ?? client).get<BackPopulateFullTextIndexResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/human/tasks/backPopulateFullTextIndex',
            ...options
        });
    }
    
    /**
     * If the workflow is disconnected from tasks, this API can be used to clean up (in bulk)
     */
    public static deleteTaskFromHumanTaskRecords<ThrowOnError extends boolean = false>(options: Options<DeleteTaskFromHumanTaskRecordsData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteTaskFromHumanTaskRecordsResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/human/tasks/delete',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * If the workflow is disconnected from tasks, this API can be used to clean up
     */
    public static deleteTaskFromHumanTaskRecords1<ThrowOnError extends boolean = false>(options: Options<DeleteTaskFromHumanTaskRecords1Data, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteTaskFromHumanTaskRecords1Responses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/human/tasks/delete/{taskId}',
            ...options
        });
    }
    
    /**
     * Get list of task display names applicable for the user
     */
    public static getTaskDisplayNames<ThrowOnError extends boolean = false>(options: Options<GetTaskDisplayNamesData, ThrowOnError>) {
        return (options.client ?? client).get<GetTaskDisplayNamesResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/human/tasks/getTaskDisplayNames',
            ...options
        });
    }
    
    /**
     * Search human tasks
     */
    public static search<ThrowOnError extends boolean = false>(options: Options<SearchData, ThrowOnError>) {
        return (options.client ?? client).post<SearchResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/human/tasks/search',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Update task output, optionally complete
     */
    public static updateTaskOutputByRef<ThrowOnError extends boolean = false>(options: Options<UpdateTaskOutputByRefData, ThrowOnError>) {
        return (options.client ?? client).post<UpdateTaskOutputByRefResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/human/tasks/update/taskRef',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get a task
     */
    public static getTask1<ThrowOnError extends boolean = false>(options: Options<GetTask1Data, ThrowOnError>) {
        return (options.client ?? client).get<GetTask1Responses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/human/tasks/{taskId}',
            ...options
        });
    }
    
    /**
     * Claim a task by authenticated Conductor user
     */
    public static claimTask<ThrowOnError extends boolean = false>(options: Options<ClaimTaskData, ThrowOnError>) {
        return (options.client ?? client).post<ClaimTaskResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/human/tasks/{taskId}/claim',
            ...options
        });
    }
    
    /**
     * Claim a task to an external user
     */
    public static assignAndClaim<ThrowOnError extends boolean = false>(options: Options<AssignAndClaimData, ThrowOnError>) {
        return (options.client ?? client).post<AssignAndClaimResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/human/tasks/{taskId}/externalUser/{userId}',
            ...options
        });
    }
    
    /**
     * Reassign a task without completing it
     */
    public static reassignTask<ThrowOnError extends boolean = false>(options: Options<ReassignTaskData, ThrowOnError>) {
        return (options.client ?? client).post<ReassignTaskResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/human/tasks/{taskId}/reassign',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Release a task without completing it
     */
    public static releaseTask<ThrowOnError extends boolean = false>(options: Options<ReleaseTaskData, ThrowOnError>) {
        return (options.client ?? client).post<ReleaseTaskResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/human/tasks/{taskId}/release',
            ...options
        });
    }
    
    /**
     * If a task is assigned to a user, this API can be used to skip that assignment and move to the next assignee
     */
    public static skipTask<ThrowOnError extends boolean = false>(options: Options<SkipTaskData, ThrowOnError>) {
        return (options.client ?? client).post<SkipTaskResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/human/tasks/{taskId}/skip',
            ...options
        });
    }
    
    /**
     * Update task output, optionally complete
     */
    public static updateTaskOutput<ThrowOnError extends boolean = false>(options: Options<UpdateTaskOutputData, ThrowOnError>) {
        return (options.client ?? client).post<UpdateTaskOutputResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/human/tasks/{taskId}/update',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * List all user form templates or get templates by name, or a template by name and version
     */
    public static getAllTemplates<ThrowOnError extends boolean = false>(options?: Options<GetAllTemplatesData, ThrowOnError>) {
        return (options?.client ?? client).get<GetAllTemplatesResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/human/template',
            ...options
        });
    }
    
    /**
     * Save user form template
     */
    public static saveTemplate<ThrowOnError extends boolean = false>(options: Options<SaveTemplateData, ThrowOnError>) {
        return (options.client ?? client).post<SaveTemplateResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/human/template',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Save user form template
     */
    public static saveTemplates<ThrowOnError extends boolean = false>(options: Options<SaveTemplatesData, ThrowOnError>) {
        return (options.client ?? client).post<SaveTemplatesResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/human/template/bulk',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get user form by human task id
     */
    public static getTemplateByTaskId<ThrowOnError extends boolean = false>(options: Options<GetTemplateByTaskIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetTemplateByTaskIdResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/human/template/{humanTaskId}',
            ...options
        });
    }
    
    /**
     * Delete all versions of user form template by name
     */
    public static deleteTemplateByName<ThrowOnError extends boolean = false>(options: Options<DeleteTemplateByNameData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteTemplateByNameResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/human/template/{name}',
            ...options
        });
    }
    
    /**
     * Delete a version of form template by name
     */
    public static deleteTemplatesByNameAndVersion<ThrowOnError extends boolean = false>(options: Options<DeleteTemplatesByNameAndVersionData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteTemplatesByNameAndVersionResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/human/template/{name}/{version}',
            ...options
        });
    }
    
    /**
     * Get user form template by name and version
     */
    public static getTemplateByNameAndVersion<ThrowOnError extends boolean = false>(options: Options<GetTemplateByNameAndVersionData, ThrowOnError>) {
        return (options.client ?? client).get<GetTemplateByNameAndVersionResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/human/template/{name}/{version}',
            ...options
        });
    }
}

export class HumanTaskResource {
    /**
     * Get Conductor task by id (for human tasks only)
     */
    public static getConductorTaskById<ThrowOnError extends boolean = false>(options: Options<GetConductorTaskByIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetConductorTaskByIdResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/human/tasks/{taskId}/conductorTask',
            ...options
        });
    }
}

export class UserForm {
    /**
     * List all user form templates or get templates by name, or a template by name and version
     */
    public static getAllTemplates<ThrowOnError extends boolean = false>(options?: Options<GetAllTemplatesData, ThrowOnError>) {
        return (options?.client ?? client).get<GetAllTemplatesResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/human/template',
            ...options
        });
    }
    
    /**
     * Save user form template
     */
    public static saveTemplate<ThrowOnError extends boolean = false>(options: Options<SaveTemplateData, ThrowOnError>) {
        return (options.client ?? client).post<SaveTemplateResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/human/template',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Save user form template
     */
    public static saveTemplates<ThrowOnError extends boolean = false>(options: Options<SaveTemplatesData, ThrowOnError>) {
        return (options.client ?? client).post<SaveTemplatesResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/human/template/bulk',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get user form by human task id
     */
    public static getTemplateByTaskId<ThrowOnError extends boolean = false>(options: Options<GetTemplateByTaskIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetTemplateByTaskIdResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/human/template/{humanTaskId}',
            ...options
        });
    }
    
    /**
     * Delete all versions of user form template by name
     */
    public static deleteTemplateByName<ThrowOnError extends boolean = false>(options: Options<DeleteTemplateByNameData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteTemplateByNameResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/human/template/{name}',
            ...options
        });
    }
    
    /**
     * Get user form template by name and version
     */
    public static getTemplateByNameAndVersion<ThrowOnError extends boolean = false>(options: Options<GetTemplateByNameAndVersionData, ThrowOnError>) {
        return (options.client ?? client).get<GetTemplateByNameAndVersionResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/human/template/{name}/{version}',
            ...options
        });
    }
}

export class UserFormTemplateResource {
    /**
     * Delete a tag for template name
     */
    public static deleteTagForUserFormTemplate<ThrowOnError extends boolean = false>(options: Options<DeleteTagForUserFormTemplateData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteTagForUserFormTemplateResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/human/template/{name}/tags',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get tags by template name
     */
    public static getTagsForUserFormTemplate<ThrowOnError extends boolean = false>(options: Options<GetTagsForUserFormTemplateData, ThrowOnError>) {
        return (options.client ?? client).get<GetTagsForUserFormTemplateResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/human/template/{name}/tags',
            ...options
        });
    }
    
    /**
     * Put a tag to template name
     */
    public static putTagForUserFormTemplate<ThrowOnError extends boolean = false>(options: Options<PutTagForUserFormTemplateData, ThrowOnError>) {
        return (options.client ?? client).put<PutTagForUserFormTemplateResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/human/template/{name}/tags',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class IntegrationResource {
    /**
     * Get all Integrations
     */
    public static getAllIntegrations<ThrowOnError extends boolean = false>(options?: Options<GetAllIntegrationsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetAllIntegrationsResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/integrations/',
            ...options
        });
    }
    
    /**
     * Save all Integrations
     */
    public static saveAllIntegrations<ThrowOnError extends boolean = false>(options: Options<SaveAllIntegrationsData, ThrowOnError>) {
        return (options.client ?? client).post<SaveAllIntegrationsResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/integrations/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get Integrations Providers and Integrations combo
     */
    public static getProvidersAndIntegrations<ThrowOnError extends boolean = false>(options?: Options<GetProvidersAndIntegrationsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetProvidersAndIntegrationsResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/integrations/all',
            ...options
        });
    }
    
    /**
     * Get Integration provider definitions
     */
    public static getIntegrationProviderDefs<ThrowOnError extends boolean = false>(options?: Options<GetIntegrationProviderDefsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetIntegrationProviderDefsResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/integrations/def',
            ...options
        });
    }
    
    /**
     * upsert an integration definition
     */
    public static registerIntegration<ThrowOnError extends boolean = false>(options: Options<RegisterIntegrationData, ThrowOnError>) {
        return (options.client ?? client).post<RegisterIntegrationResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/integrations/def/register',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get an integration definition
     */
    public static getIntegrationDef<ThrowOnError extends boolean = false>(options: Options<GetIntegrationDefData, ThrowOnError>) {
        return (options.client ?? client).get<GetIntegrationDefResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/integrations/def/{name}',
            ...options
        });
    }
    
    /**
     * Record Event Stats
     */
    public static recordEventStats<ThrowOnError extends boolean = false>(options: Options<RecordEventStatsData, ThrowOnError>) {
        return (options.client ?? client).post<RecordEventStatsResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/integrations/eventStats/{type}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get all Integrations Providers
     */
    public static getIntegrationProviders<ThrowOnError extends boolean = false>(options?: Options<GetIntegrationProvidersData, ThrowOnError>) {
        return (options?.client ?? client).get<GetIntegrationProvidersResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/integrations/provider',
            ...options
        });
    }
    
    /**
     * Get the list of prompt templates associated with an integration
     */
    public static getPromptsWithIntegration<ThrowOnError extends boolean = false>(options: Options<GetPromptsWithIntegrationData, ThrowOnError>) {
        return (options.client ?? client).get<GetPromptsWithIntegrationResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/integrations/provider/{integration_provider}/integration/{integration_name}/prompt',
            ...options
        });
    }
    
    /**
     * Associate a Prompt Template with an Integration
     */
    public static associatePromptWithIntegration<ThrowOnError extends boolean = false>(options: Options<AssociatePromptWithIntegrationData, ThrowOnError>) {
        return (options.client ?? client).post<AssociatePromptWithIntegrationResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/integrations/provider/{integration_provider}/integration/{integration_name}/prompt/{prompt_name}',
            ...options
        });
    }
    
    /**
     * Delete an Integration Provider
     */
    public static deleteIntegrationProvider<ThrowOnError extends boolean = false>(options: Options<DeleteIntegrationProviderData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteIntegrationProviderResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/integrations/provider/{name}',
            ...options
        });
    }
    
    /**
     * Get Integration provider
     */
    public static getIntegrationProvider<ThrowOnError extends boolean = false>(options: Options<GetIntegrationProviderData, ThrowOnError>) {
        return (options.client ?? client).get<GetIntegrationProviderResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/integrations/provider/{name}',
            ...options
        });
    }
    
    /**
     * Create or Update Integration provider
     */
    public static saveIntegrationProvider<ThrowOnError extends boolean = false>(options: Options<SaveIntegrationProviderData, ThrowOnError>) {
        return (options.client ?? client).post<SaveIntegrationProviderResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/integrations/provider/{name}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get Integrations of an Integration Provider
     */
    public static getIntegrationApis<ThrowOnError extends boolean = false>(options: Options<GetIntegrationApisData, ThrowOnError>) {
        return (options.client ?? client).get<GetIntegrationApisResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/integrations/provider/{name}/integration',
            ...options
        });
    }
    
    /**
     * Get Integrations Available for an Integration Provider
     */
    public static getIntegrationAvailableApis<ThrowOnError extends boolean = false>(options: Options<GetIntegrationAvailableApisData, ThrowOnError>) {
        return (options.client ?? client).get<GetIntegrationAvailableApisResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/integrations/provider/{name}/integration/all',
            ...options
        });
    }
    
    /**
     * Delete an Integration
     */
    public static deleteIntegrationApi<ThrowOnError extends boolean = false>(options: Options<DeleteIntegrationApiData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteIntegrationApiResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/integrations/provider/{name}/integration/{integration_name}',
            ...options
        });
    }
    
    /**
     * Get Integration details
     */
    public static getIntegrationApi<ThrowOnError extends boolean = false>(options: Options<GetIntegrationApiData, ThrowOnError>) {
        return (options.client ?? client).get<GetIntegrationApiResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/integrations/provider/{name}/integration/{integration_name}',
            ...options
        });
    }
    
    /**
     * Create or Update Integration
     */
    public static saveIntegrationApi<ThrowOnError extends boolean = false>(options: Options<SaveIntegrationApiData, ThrowOnError>) {
        return (options.client ?? client).post<SaveIntegrationApiResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/integrations/provider/{name}/integration/{integration_name}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Delete a tag for Integration
     */
    public static deleteTagForIntegration<ThrowOnError extends boolean = false>(options: Options<DeleteTagForIntegrationData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteTagForIntegrationResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/integrations/provider/{name}/integration/{integration_name}/tags',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get tags by Integration
     */
    public static getTagsForIntegration<ThrowOnError extends boolean = false>(options: Options<GetTagsForIntegrationData, ThrowOnError>) {
        return (options.client ?? client).get<GetTagsForIntegrationResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/integrations/provider/{name}/integration/{integration_name}/tags',
            ...options
        });
    }
    
    /**
     * Put a tag to Integration
     */
    public static putTagForIntegration<ThrowOnError extends boolean = false>(options: Options<PutTagForIntegrationData, ThrowOnError>) {
        return (options.client ?? client).put<PutTagForIntegrationResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/integrations/provider/{name}/integration/{integration_name}/tags',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Delete a tag for Integration Provider
     */
    public static deleteTagForIntegrationProvider<ThrowOnError extends boolean = false>(options: Options<DeleteTagForIntegrationProviderData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteTagForIntegrationProviderResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/integrations/provider/{name}/tags',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get tags by Integration Provider
     */
    public static getTagsForIntegrationProvider<ThrowOnError extends boolean = false>(options: Options<GetTagsForIntegrationProviderData, ThrowOnError>) {
        return (options.client ?? client).get<GetTagsForIntegrationProviderResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/integrations/provider/{name}/tags',
            ...options
        });
    }
    
    /**
     * Put a tag to Integration Provider
     */
    public static putTagForIntegrationProvider<ThrowOnError extends boolean = false>(options: Options<PutTagForIntegrationProviderData, ThrowOnError>) {
        return (options.client ?? client).put<PutTagForIntegrationProviderResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/integrations/provider/{name}/tags',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class Llm {
    /**
     * Get the Token Limit for an integration
     */
    public static getTokenLimit<ThrowOnError extends boolean = false>(options: Options<GetTokenLimitData, ThrowOnError>) {
        return (options.client ?? client).get<GetTokenLimitResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/integrations/llm/{name}/token',
            ...options
        });
    }
    
    /**
     * Register Token Limit for an integration
     */
    public static updateTokenLimit<ThrowOnError extends boolean = false>(options: Options<UpdateTokenLimitData, ThrowOnError>) {
        return (options.client ?? client).post<UpdateTokenLimitResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/integrations/llm/{name}/token',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get Token Usage by Integration provider
     */
    public static getTokenUsage<ThrowOnError extends boolean = false>(options: Options<GetTokenUsageData, ThrowOnError>) {
        return (options.client ?? client).get<GetTokenUsageResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/integrations/llm/{name}/token/history',
            ...options
        });
    }
}

export class LimitsResource {
    public static get2<ThrowOnError extends boolean = false>(options?: Options<Get2Data, ThrowOnError>) {
        return (options?.client ?? client).get<Get2Responses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/limits',
            ...options
        });
    }
}

export class Tags {
    /**
     * List all tags
     */
    public static getTags1<ThrowOnError extends boolean = false>(options?: Options<GetTags1Data, ThrowOnError>) {
        return (options?.client ?? client).get<GetTags1Responses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/metadata/tags',
            ...options
        });
    }
    
    /**
     * Removes the tag of the task
     */
    public static deleteTaskTag<ThrowOnError extends boolean = false>(options: Options<DeleteTaskTagData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteTaskTagResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/metadata/task/{taskName}/tags',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Returns all the tags of the task
     */
    public static getTaskTags<ThrowOnError extends boolean = false>(options: Options<GetTaskTagsData, ThrowOnError>) {
        return (options.client ?? client).get<GetTaskTagsResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/metadata/task/{taskName}/tags',
            ...options
        });
    }
    
    /**
     * Adds the tag to the task
     */
    public static addTaskTag<ThrowOnError extends boolean = false>(options: Options<AddTaskTagData, ThrowOnError>) {
        return (options.client ?? client).post<AddTaskTagResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/metadata/task/{taskName}/tags',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Sets (replaces existing) the tags to the task
     */
    public static setTaskTags<ThrowOnError extends boolean = false>(options: Options<SetTaskTagsData, ThrowOnError>) {
        return (options.client ?? client).put<SetTaskTagsResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/metadata/task/{taskName}/tags',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Removes the tag of the workflow
     */
    public static deleteWorkflowTag<ThrowOnError extends boolean = false>(options: Options<DeleteWorkflowTagData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteWorkflowTagResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/metadata/workflow/{name}/tags',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Returns all the tags of the workflow
     */
    public static getWorkflowTags<ThrowOnError extends boolean = false>(options: Options<GetWorkflowTagsData, ThrowOnError>) {
        return (options.client ?? client).get<GetWorkflowTagsResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/metadata/workflow/{name}/tags',
            ...options
        });
    }
    
    /**
     * Adds the tag to the workflow
     */
    public static addWorkflowTag<ThrowOnError extends boolean = false>(options: Options<AddWorkflowTagData, ThrowOnError>) {
        return (options.client ?? client).post<AddWorkflowTagResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/metadata/workflow/{name}/tags',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Set (replaces all existing) the tags of the workflow
     */
    public static setWorkflowTags<ThrowOnError extends boolean = false>(options: Options<SetWorkflowTagsData, ThrowOnError>) {
        return (options.client ?? client).put<SetWorkflowTagsResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/metadata/workflow/{name}/tags',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class MetadataResource {
    /**
     * Gets all task definition
     */
    public static getTaskDefs<ThrowOnError extends boolean = false>(options?: Options<GetTaskDefsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTaskDefsResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/metadata/taskdefs',
            ...options
        });
    }
    
    /**
     * Create or update task definition(s)
     */
    public static registerTaskDef<ThrowOnError extends boolean = false>(options: Options<RegisterTaskDefData, ThrowOnError>) {
        return (options.client ?? client).post<RegisterTaskDefResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/metadata/taskdefs',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Update an existing task
     */
    public static updateTaskDef<ThrowOnError extends boolean = false>(options: Options<UpdateTaskDefData, ThrowOnError>) {
        return (options.client ?? client).put<UpdateTaskDefResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/metadata/taskdefs',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Remove a task definition
     */
    public static unregisterTaskDef<ThrowOnError extends boolean = false>(options: Options<UnregisterTaskDefData, ThrowOnError>) {
        return (options.client ?? client).delete<UnregisterTaskDefResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/metadata/taskdefs/{tasktype}',
            ...options
        });
    }
    
    /**
     * Gets the task definition
     */
    public static getTaskDef<ThrowOnError extends boolean = false>(options: Options<GetTaskDefData, ThrowOnError>) {
        return (options.client ?? client).get<GetTaskDefResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/metadata/taskdefs/{tasktype}',
            ...options
        });
    }
    
    /**
     * Retrieves all workflow definition along with blueprint
     */
    public static getWorkflowDefs<ThrowOnError extends boolean = false>(options?: Options<GetWorkflowDefsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetWorkflowDefsResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/metadata/workflow',
            ...options
        });
    }
    
    /**
     * Create a new workflow definition
     */
    public static create<ThrowOnError extends boolean = false>(options: Options<CreateData, ThrowOnError>) {
        return (options.client ?? client).post<CreateResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/metadata/workflow',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Create or update workflow definition(s)
     */
    public static update<ThrowOnError extends boolean = false>(options: Options<UpdateData, ThrowOnError>) {
        return (options.client ?? client).put<UpdateResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/metadata/workflow',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Imports bpmn workflow
     */
    public static uploadBpmnFile<ThrowOnError extends boolean = false>(options: Options<UploadBpmnFileData, ThrowOnError>) {
        return (options.client ?? client).post<UploadBpmnFileResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/metadata/workflow-importer/import-bpm',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Upload all workflows and tasks definitions to Object storage if configured
     */
    public static uploadWorkflowsAndTasksDefinitionsToS3<ThrowOnError extends boolean = false>(options?: Options<UploadWorkflowsAndTasksDefinitionsToS3Data, ThrowOnError>) {
        return (options?.client ?? client).post<UploadWorkflowsAndTasksDefinitionsToS3Responses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/metadata/workflow-task-defs/upload',
            ...options
        });
    }
    
    /**
     * Retrieves workflow definition along with blueprint
     */
    public static get1<ThrowOnError extends boolean = false>(options: Options<Get1Data, ThrowOnError>) {
        return (options.client ?? client).get<Get1Responses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/metadata/workflow/{name}',
            ...options
        });
    }
    
    /**
     * Removes workflow definition. It does not remove workflows associated with the definition.
     */
    public static unregisterWorkflowDef<ThrowOnError extends boolean = false>(options: Options<UnregisterWorkflowDefData, ThrowOnError>) {
        return (options.client ?? client).delete<UnregisterWorkflowDefResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/metadata/workflow/{name}/{version}',
            ...options
        });
    }
}

export class WebhooksConfigResource {
    public static getAllWebhook<ThrowOnError extends boolean = false>(options?: Options<GetAllWebhookData, ThrowOnError>) {
        return (options?.client ?? client).get<GetAllWebhookResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/metadata/webhook',
            ...options
        });
    }
    
    public static createWebhook<ThrowOnError extends boolean = false>(options: Options<CreateWebhookData, ThrowOnError>) {
        return (options.client ?? client).post<CreateWebhookResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/metadata/webhook',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static deleteWebhook<ThrowOnError extends boolean = false>(options: Options<DeleteWebhookData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteWebhookResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/metadata/webhook/{id}',
            ...options
        });
    }
    
    public static getWebhook<ThrowOnError extends boolean = false>(options: Options<GetWebhookData, ThrowOnError>) {
        return (options.client ?? client).get<GetWebhookResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/metadata/webhook/{id}',
            ...options
        });
    }
    
    public static updateWebhook<ThrowOnError extends boolean = false>(options: Options<UpdateWebhookData, ThrowOnError>) {
        return (options.client ?? client).put<UpdateWebhookResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/metadata/webhook/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Delete a tag for webhook id
     */
    public static deleteTagForWebhook<ThrowOnError extends boolean = false>(options: Options<DeleteTagForWebhookData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteTagForWebhookResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/metadata/webhook/{id}/tags',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get tags by webhook id
     */
    public static getTagsForWebhook<ThrowOnError extends boolean = false>(options: Options<GetTagsForWebhookData, ThrowOnError>) {
        return (options.client ?? client).get<GetTagsForWebhookResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/metadata/webhook/{id}/tags',
            ...options
        });
    }
    
    /**
     * Put a tag to webhook id
     */
    public static putTagForWebhook<ThrowOnError extends boolean = false>(options: Options<PutTagForWebhookData, ThrowOnError>) {
        return (options.client ?? client).put<PutTagForWebhookResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/metadata/webhook/{id}/tags',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class PromptResource {
    /**
     * Get Templates
     */
    public static getMessageTemplates<ThrowOnError extends boolean = false>(options?: Options<GetMessageTemplatesData, ThrowOnError>) {
        return (options?.client ?? client).get<GetMessageTemplatesResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/prompts',
            ...options
        });
    }
    
    /**
     * Create message templates in bulk
     */
    public static createMessageTemplates<ThrowOnError extends boolean = false>(options: Options<CreateMessageTemplatesData, ThrowOnError>) {
        return (options.client ?? client).post<CreateMessageTemplatesResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/prompts/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Test Prompt Template
     */
    public static testMessageTemplate<ThrowOnError extends boolean = false>(options: Options<TestMessageTemplateData, ThrowOnError>) {
        return (options.client ?? client).post<TestMessageTemplateResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/prompts/test',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Delete Template
     */
    public static deleteMessageTemplate<ThrowOnError extends boolean = false>(options: Options<DeleteMessageTemplateData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteMessageTemplateResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/prompts/{name}',
            ...options
        });
    }
    
    /**
     * Get Template
     */
    public static getMessageTemplate<ThrowOnError extends boolean = false>(options: Options<GetMessageTemplateData, ThrowOnError>) {
        return (options.client ?? client).get<GetMessageTemplateResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/prompts/{name}',
            ...options
        });
    }
    
    /**
     * Create or Update a template
     */
    public static saveMessageTemplate<ThrowOnError extends boolean = false>(options: Options<SaveMessageTemplateData, ThrowOnError>) {
        return (options.client ?? client).post<SaveMessageTemplateResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/prompts/{name}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Create a template
     */
    public static updateMessageTemplate<ThrowOnError extends boolean = false>(options: Options<UpdateMessageTemplateData, ThrowOnError>) {
        return (options.client ?? client).put<UpdateMessageTemplateResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/prompts/{name}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Delete a tag for Prompt Template
     */
    public static deleteTagForPromptTemplate<ThrowOnError extends boolean = false>(options: Options<DeleteTagForPromptTemplateData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteTagForPromptTemplateResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/prompts/{name}/tags',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get tags by Prompt Template
     */
    public static getTagsForPromptTemplate<ThrowOnError extends boolean = false>(options: Options<GetTagsForPromptTemplateData, ThrowOnError>) {
        return (options.client ?? client).get<GetTagsForPromptTemplateResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/prompts/{name}/tags',
            ...options
        });
    }
    
    /**
     * Put a tag to Prompt Template
     */
    public static putTagForPromptTemplate<ThrowOnError extends boolean = false>(options: Options<PutTagForPromptTemplateData, ThrowOnError>) {
        return (options.client ?? client).put<PutTagForPromptTemplateResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/prompts/{name}/tags',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get all versions of a Template
     */
    public static getMessageTemplateVersions<ThrowOnError extends boolean = false>(options: Options<GetMessageTemplateVersionsData, ThrowOnError>) {
        return (options.client ?? client).get<GetMessageTemplateVersionsResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/prompts/{name}/versions',
            ...options
        });
    }
    
    /**
     * Delete Template
     */
    public static deleteMessageTemplate1<ThrowOnError extends boolean = false>(options: Options<DeleteMessageTemplate1Data, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteMessageTemplate1Responses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/prompts/{name}/versions/{version}',
            ...options
        });
    }
}

export class QueueAdminResource {
    /**
     * Get Queue Names
     */
    public static names<ThrowOnError extends boolean = false>(options?: Options<NamesData, ThrowOnError>) {
        return (options?.client ?? client).get<NamesResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/queue/',
            ...options
        });
    }
    
    /**
     * Get the queue length
     */
    public static size1<ThrowOnError extends boolean = false>(options?: Options<Size1Data, ThrowOnError>) {
        return (options?.client ?? client).get<Size1Responses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/queue/size',
            ...options
        });
    }
}

export class ServiceRegistryResource {
    public static getRegisteredServices<ThrowOnError extends boolean = false>(options?: Options<GetRegisteredServicesData, ThrowOnError>) {
        return (options?.client ?? client).get<GetRegisteredServicesResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/registry/service',
            ...options
        });
    }
    
    public static addOrUpdateService<ThrowOnError extends boolean = false>(options: Options<AddOrUpdateServiceData, ThrowOnError>) {
        return (options.client ?? client).post<AddOrUpdateServiceResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/registry/service',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getAllProtos<ThrowOnError extends boolean = false>(options: Options<GetAllProtosData, ThrowOnError>) {
        return (options.client ?? client).get<GetAllProtosResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/registry/service/protos/{registryName}',
            ...options
        });
    }
    
    public static deleteProto<ThrowOnError extends boolean = false>(options: Options<DeleteProtoData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteProtoResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/registry/service/protos/{registryName}/{filename}',
            ...options
        });
    }
    
    public static getProtoData<ThrowOnError extends boolean = false>(options: Options<GetProtoDataData, ThrowOnError>) {
        return (options.client ?? client).get<GetProtoDataResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/registry/service/protos/{registryName}/{filename}',
            ...options
        });
    }
    
    public static setProtoData<ThrowOnError extends boolean = false>(options: Options<SetProtoDataData, ThrowOnError>) {
        return (options.client ?? client).post<SetProtoDataResponses, unknown, ThrowOnError>({
            bodySerializer: null,
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/registry/service/protos/{registryName}/{filename}',
            ...options,
            headers: {
                'Content-Type': 'application/octet-stream',
                ...options.headers
            }
        });
    }
    
    public static removeService<ThrowOnError extends boolean = false>(options: Options<RemoveServiceData, ThrowOnError>) {
        return (options.client ?? client).delete<RemoveServiceResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/registry/service/{name}',
            ...options
        });
    }
    
    public static getService<ThrowOnError extends boolean = false>(options: Options<GetServiceData, ThrowOnError>) {
        return (options.client ?? client).get<GetServiceResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/registry/service/{name}',
            ...options
        });
    }
    
    public static closeCircuitBreaker<ThrowOnError extends boolean = false>(options: Options<CloseCircuitBreakerData, ThrowOnError>) {
        return (options.client ?? client).post<CloseCircuitBreakerResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/registry/service/{name}/circuit-breaker/close',
            ...options
        });
    }
    
    public static openCircuitBreaker<ThrowOnError extends boolean = false>(options: Options<OpenCircuitBreakerData, ThrowOnError>) {
        return (options.client ?? client).post<OpenCircuitBreakerResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/registry/service/{name}/circuit-breaker/open',
            ...options
        });
    }
    
    public static getCircuitBreakerStatus<ThrowOnError extends boolean = false>(options: Options<GetCircuitBreakerStatusData, ThrowOnError>) {
        return (options.client ?? client).get<GetCircuitBreakerStatusResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/registry/service/{name}/circuit-breaker/status',
            ...options
        });
    }
    
    public static discover<ThrowOnError extends boolean = false>(options: Options<DiscoverData, ThrowOnError>) {
        return (options.client ?? client).get<DiscoverResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/registry/service/{name}/discover',
            ...options
        });
    }
    
    public static removeMethod<ThrowOnError extends boolean = false>(options: Options<RemoveMethodData, ThrowOnError>) {
        return (options.client ?? client).delete<RemoveMethodResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/registry/service/{registryName}/methods',
            ...options
        });
    }
    
    public static addOrUpdateMethod<ThrowOnError extends boolean = false>(options: Options<AddOrUpdateMethodData, ThrowOnError>) {
        return (options.client ?? client).post<AddOrUpdateMethodResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/registry/service/{registryName}/methods',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class SchedulerResource {
    /**
     * Pause all scheduling in a single conductor server instance (for debugging only)
     */
    public static pauseAllSchedules<ThrowOnError extends boolean = false>(options?: Options<PauseAllSchedulesData, ThrowOnError>) {
        return (options?.client ?? client).get<PauseAllSchedulesResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/scheduler/admin/pause',
            ...options
        });
    }
    
    /**
     * Requeue all execution records
     */
    public static requeueAllExecutionRecords<ThrowOnError extends boolean = false>(options?: Options<RequeueAllExecutionRecordsData, ThrowOnError>) {
        return (options?.client ?? client).get<RequeueAllExecutionRecordsResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/scheduler/admin/requeue',
            ...options
        });
    }
    
    /**
     * Resume all scheduling
     */
    public static resumeAllSchedules<ThrowOnError extends boolean = false>(options?: Options<ResumeAllSchedulesData, ThrowOnError>) {
        return (options?.client ?? client).get<ResumeAllSchedulesResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/scheduler/admin/resume',
            ...options
        });
    }
    
    /**
     * Get list of the next x (default 3, max 5) execution times for a scheduler
     */
    public static getNextFewSchedules<ThrowOnError extends boolean = false>(options: Options<GetNextFewSchedulesData, ThrowOnError>) {
        return (options.client ?? client).get<GetNextFewSchedulesResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/scheduler/nextFewSchedules',
            ...options
        });
    }
    
    /**
     * Get all existing workflow schedules and optionally filter by workflow name
     */
    public static getAllSchedules<ThrowOnError extends boolean = false>(options?: Options<GetAllSchedulesData, ThrowOnError>) {
        return (options?.client ?? client).get<GetAllSchedulesResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/scheduler/schedules',
            ...options
        });
    }
    
    /**
     * Create or update a schedule for a specified workflow with a corresponding start workflow request
     */
    public static saveSchedule<ThrowOnError extends boolean = false>(options: Options<SaveScheduleData, ThrowOnError>) {
        return (options.client ?? client).post<SaveScheduleResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/scheduler/schedules',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get schedules by tag
     */
    public static getSchedulesByTag<ThrowOnError extends boolean = false>(options: Options<GetSchedulesByTagData, ThrowOnError>) {
        return (options.client ?? client).get<GetSchedulesByTagResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/scheduler/schedules/tags',
            ...options
        });
    }
    
    /**
     * Deletes an existing workflow schedule by name
     */
    public static deleteSchedule<ThrowOnError extends boolean = false>(options: Options<DeleteScheduleData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteScheduleResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/scheduler/schedules/{name}',
            ...options
        });
    }
    
    /**
     * Get an existing workflow schedule by name
     */
    public static getSchedule<ThrowOnError extends boolean = false>(options: Options<GetScheduleData, ThrowOnError>) {
        return (options.client ?? client).get<GetScheduleResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/scheduler/schedules/{name}',
            ...options
        });
    }
    
    /**
     * Pauses an existing schedule by name
     */
    public static pauseSchedule<ThrowOnError extends boolean = false>(options: Options<PauseScheduleData, ThrowOnError>) {
        return (options.client ?? client).get<PauseScheduleResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/scheduler/schedules/{name}/pause',
            ...options
        });
    }
    
    /**
     * Resume a paused schedule by name
     */
    public static resumeSchedule<ThrowOnError extends boolean = false>(options: Options<ResumeScheduleData, ThrowOnError>) {
        return (options.client ?? client).get<ResumeScheduleResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/scheduler/schedules/{name}/resume',
            ...options
        });
    }
    
    /**
     * Delete a tag for schedule
     */
    public static deleteTagForSchedule<ThrowOnError extends boolean = false>(options: Options<DeleteTagForScheduleData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteTagForScheduleResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/scheduler/schedules/{name}/tags',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get tags by schedule
     */
    public static getTagsForSchedule<ThrowOnError extends boolean = false>(options: Options<GetTagsForScheduleData, ThrowOnError>) {
        return (options.client ?? client).get<GetTagsForScheduleResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/scheduler/schedules/{name}/tags',
            ...options
        });
    }
    
    /**
     * Put a tag to schedule
     */
    public static putTagForSchedule<ThrowOnError extends boolean = false>(options: Options<PutTagForScheduleData, ThrowOnError>) {
        return (options.client ?? client).put<PutTagForScheduleResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/scheduler/schedules/{name}/tags',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Search for workflow executions based on payload and other parameters
     *
     * use sort options as sort=<field>:ASC|DESC e.g. sort=name&sort=workflowId:DESC. If order is not specified, defaults to ASC.
     */
    public static searchV2<ThrowOnError extends boolean = false>(options?: Options<SearchV2Data, ThrowOnError>) {
        return (options?.client ?? client).get<SearchV2Responses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/scheduler/search/executions',
            ...options
        });
    }
}

export class SchedulerBulkResource {
    /**
     * Pause the list of schedules
     */
    public static pauseSchedules<ThrowOnError extends boolean = false>(options: Options<PauseSchedulesData, ThrowOnError>) {
        return (options.client ?? client).put<PauseSchedulesResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/scheduler/bulk/pause',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Resume the list of schedules
     */
    public static resumeSchedules<ThrowOnError extends boolean = false>(options: Options<ResumeSchedulesData, ThrowOnError>) {
        return (options.client ?? client).put<ResumeSchedulesResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/scheduler/bulk/resume',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class SchemaResource {
    /**
     * Get all schemas
     */
    public static getAllSchemas<ThrowOnError extends boolean = false>(options?: Options<GetAllSchemasData, ThrowOnError>) {
        return (options?.client ?? client).get<GetAllSchemasResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/schema',
            ...options
        });
    }
    
    /**
     * Save schema
     */
    public static save<ThrowOnError extends boolean = false>(options: Options<SaveData, ThrowOnError>) {
        return (options.client ?? client).post<SaveResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/schema',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Delete all versions of schema by name
     */
    public static deleteSchemaByName<ThrowOnError extends boolean = false>(options: Options<DeleteSchemaByNameData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteSchemaByNameResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/schema/{name}',
            ...options
        });
    }
    
    /**
     * Get schema by name with latest version
     */
    public static getSchemaByNameWithLatestVersion<ThrowOnError extends boolean = false>(options: Options<GetSchemaByNameWithLatestVersionData, ThrowOnError>) {
        return (options.client ?? client).get<GetSchemaByNameWithLatestVersionResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/schema/{name}',
            ...options
        });
    }
    
    /**
     * Delete a version of schema by name
     */
    public static deleteSchemaByNameAndVersion<ThrowOnError extends boolean = false>(options: Options<DeleteSchemaByNameAndVersionData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteSchemaByNameAndVersionResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/schema/{name}/{version}',
            ...options
        });
    }
    
    /**
     * Get schema by name and version
     */
    public static getSchemaByNameAndVersion<ThrowOnError extends boolean = false>(options: Options<GetSchemaByNameAndVersionData, ThrowOnError>) {
        return (options.client ?? client).get<GetSchemaByNameAndVersionResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/schema/{name}/{version}',
            ...options
        });
    }
}

export class SecretResource {
    /**
     * List all secret names user can grant access to
     */
    public static listSecretsThatUserCanGrantAccessTo<ThrowOnError extends boolean = false>(options?: Options<ListSecretsThatUserCanGrantAccessToData, ThrowOnError>) {
        return (options?.client ?? client).get<ListSecretsThatUserCanGrantAccessToResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/secrets',
            ...options
        });
    }
    
    /**
     * List all secret names
     */
    public static listAllSecretNames<ThrowOnError extends boolean = false>(options?: Options<ListAllSecretNamesData, ThrowOnError>) {
        return (options?.client ?? client).post<ListAllSecretNamesResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/secrets',
            ...options
        });
    }
    
    /**
     * List all secret names along with tags user can grant access to
     */
    public static listSecretsWithTagsThatUserCanGrantAccessTo<ThrowOnError extends boolean = false>(options?: Options<ListSecretsWithTagsThatUserCanGrantAccessToData, ThrowOnError>) {
        return (options?.client ?? client).get<ListSecretsWithTagsThatUserCanGrantAccessToResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/secrets-v2',
            ...options
        });
    }
    
    /**
     * Clear local cache
     */
    public static clearLocalCache<ThrowOnError extends boolean = false>(options?: Options<ClearLocalCacheData, ThrowOnError>) {
        return (options?.client ?? client).get<ClearLocalCacheResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/secrets/clearLocalCache',
            ...options
        });
    }
    
    /**
     * Clear redis cache
     */
    public static clearRedisCache<ThrowOnError extends boolean = false>(options?: Options<ClearRedisCacheData, ThrowOnError>) {
        return (options?.client ?? client).get<ClearRedisCacheResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/secrets/clearRedisCache',
            ...options
        });
    }
    
    /**
     * Delete a secret value by key
     */
    public static deleteSecret<ThrowOnError extends boolean = false>(options: Options<DeleteSecretData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteSecretResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/secrets/{key}',
            ...options
        });
    }
    
    /**
     * Get secret value by key
     */
    public static getSecret<ThrowOnError extends boolean = false>(options: Options<GetSecretData, ThrowOnError>) {
        return (options.client ?? client).get<GetSecretResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/secrets/{key}',
            ...options
        });
    }
    
    /**
     * Put a secret value by key
     */
    public static putSecret<ThrowOnError extends boolean = false>(options: Options<PutSecretData, ThrowOnError>) {
        return (options.client ?? client).put<PutSecretResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/secrets/{key}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Check if secret exists
     */
    public static secretExists<ThrowOnError extends boolean = false>(options: Options<SecretExistsData, ThrowOnError>) {
        return (options.client ?? client).get<SecretExistsResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/secrets/{key}/exists',
            ...options
        });
    }
    
    /**
     * Delete tags of the secret
     */
    public static deleteTagForSecret<ThrowOnError extends boolean = false>(options: Options<DeleteTagForSecretData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteTagForSecretResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/secrets/{key}/tags',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get tags by secret
     */
    public static getTags<ThrowOnError extends boolean = false>(options: Options<GetTagsData, ThrowOnError>) {
        return (options.client ?? client).get<GetTagsResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/secrets/{key}/tags',
            ...options
        });
    }
    
    /**
     * Tag a secret
     */
    public static putTagForSecret<ThrowOnError extends boolean = false>(options: Options<PutTagForSecretData, ThrowOnError>) {
        return (options.client ?? client).put<PutTagForSecretResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/secrets/{key}/tags',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class TaskResource {
    /**
     * Update a task
     */
    public static updateTask<ThrowOnError extends boolean = false>(options: Options<UpdateTaskData, ThrowOnError>) {
        return (options.client ?? client).post<UpdateTaskResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/tasks',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Batch poll for a task of a certain type
     */
    public static batchPoll<ThrowOnError extends boolean = false>(options: Options<BatchPollData, ThrowOnError>) {
        return (options.client ?? client).get<BatchPollResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/tasks/poll/batch/{tasktype}',
            ...options
        });
    }
    
    /**
     * Poll for a task of a certain type
     */
    public static poll<ThrowOnError extends boolean = false>(options: Options<PollData2, ThrowOnError>) {
        return (options.client ?? client).get<PollResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/tasks/poll/{tasktype}',
            ...options
        });
    }
    
    /**
     * Get the details about each queue
     */
    public static all<ThrowOnError extends boolean = false>(options?: Options<AllData, ThrowOnError>) {
        return (options?.client ?? client).get<AllResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/tasks/queue/all',
            ...options
        });
    }
    
    /**
     * Get the details about each queue
     */
    public static allVerbose<ThrowOnError extends boolean = false>(options?: Options<AllVerboseData, ThrowOnError>) {
        return (options?.client ?? client).get<AllVerboseResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/tasks/queue/all/verbose',
            ...options
        });
    }
    
    /**
     * Get the last poll data for a given task type
     */
    public static getPollData<ThrowOnError extends boolean = false>(options: Options<GetPollDataData, ThrowOnError>) {
        return (options.client ?? client).get<GetPollDataResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/tasks/queue/polldata',
            ...options
        });
    }
    
    /**
     * Get the last poll data for all task types
     */
    public static getAllPollData<ThrowOnError extends boolean = false>(options?: Options<GetAllPollDataData, ThrowOnError>) {
        return (options?.client ?? client).get<GetAllPollDataResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/tasks/queue/polldata/all',
            ...options
        });
    }
    
    /**
     * Requeue pending tasks
     */
    public static requeuePendingTask<ThrowOnError extends boolean = false>(options: Options<RequeuePendingTaskData, ThrowOnError>) {
        return (options.client ?? client).post<RequeuePendingTaskResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/tasks/queue/requeue/{taskType}',
            ...options
        });
    }
    
    /**
     * Get Task type queue sizes
     */
    public static size<ThrowOnError extends boolean = false>(options?: Options<SizeData, ThrowOnError>) {
        return (options?.client ?? client).get<SizeResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/tasks/queue/sizes',
            ...options
        });
    }
    
    /**
     * Search for tasks based in payload and other parameters
     *
     * use sort options as sort=<field>:ASC|DESC e.g. sort=name&sort=workflowId:DESC. If order is not specified, defaults to ASC
     */
    public static search2<ThrowOnError extends boolean = false>(options?: Options<Search2Data, ThrowOnError>) {
        return (options?.client ?? client).get<Search2Responses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/tasks/search',
            ...options
        });
    }
    
    /**
     * Update a task
     */
    public static updateTaskV2<ThrowOnError extends boolean = false>(options: Options<UpdateTaskV2Data, ThrowOnError>) {
        return (options.client ?? client).post<UpdateTaskV2Responses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/tasks/update-v2',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get task by Id
     */
    public static getTask<ThrowOnError extends boolean = false>(options: Options<GetTaskData, ThrowOnError>) {
        return (options.client ?? client).get<GetTaskResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/tasks/{taskId}',
            ...options
        });
    }
    
    /**
     * Get Task Execution Logs
     */
    public static getTaskLogs<ThrowOnError extends boolean = false>(options: Options<GetTaskLogsData, ThrowOnError>) {
        return (options.client ?? client).get<GetTaskLogsResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/tasks/{taskId}/log',
            ...options
        });
    }
    
    /**
     * Log Task Execution Details
     */
    public static log<ThrowOnError extends boolean = false>(options: Options<LogData, ThrowOnError>) {
        return (options.client ?? client).post<LogResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/tasks/{taskId}/log',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Update running task in the workflow with given status and output asynchronously
     */
    public static signalWorkflowTaskASync<ThrowOnError extends boolean = false>(options: Options<SignalWorkflowTaskASyncData, ThrowOnError>) {
        return (options.client ?? client).post<SignalWorkflowTaskASyncResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/tasks/{workflowId}/{status}/signal',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Update running task in the workflow with given status and output synchronously and return back updated workflow
     */
    public static signalWorkflowTaskSync<ThrowOnError extends boolean = false>(options: Options<SignalWorkflowTaskSyncData, ThrowOnError>) {
        return (options.client ?? client).post<SignalWorkflowTaskSyncResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/tasks/{workflowId}/{status}/signal/sync',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Update a task By Ref Name. The output data is merged if data from a previous API call already exists.
     */
    public static updateTask1<ThrowOnError extends boolean = false>(options: Options<UpdateTask1Data, ThrowOnError>) {
        return (options.client ?? client).post<UpdateTask1Responses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/tasks/{workflowId}/{taskRefName}/{status}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Update a task By Ref Name synchronously. The output data is merged if data from a previous API call already exists.
     */
    public static updateTaskSync<ThrowOnError extends boolean = false>(options: Options<UpdateTaskSyncData, ThrowOnError>) {
        return (options.client ?? client).post<UpdateTaskSyncResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/tasks/{workflowId}/{taskRefName}/{status}/sync',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class TokenResource {
    /**
     * Generate JWT with the given access key
     */
    public static generateToken<ThrowOnError extends boolean = false>(options: Options<GenerateTokenData, ThrowOnError>) {
        return (options.client ?? client).post<GenerateTokenResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/token',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get the user info from the token
     */
    public static getUserInfo<ThrowOnError extends boolean = false>(options?: Options<GetUserInfoData, ThrowOnError>) {
        return (options?.client ?? client).get<GetUserInfoResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/token/userInfo',
            ...options
        });
    }
}

export class UserResource {
    /**
     * Get all users
     */
    public static listUsers<ThrowOnError extends boolean = false>(options?: Options<ListUsersData, ThrowOnError>) {
        return (options?.client ?? client).get<ListUsersResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/users',
            ...options
        });
    }
    
    /**
     * Delete a user
     */
    public static deleteUser<ThrowOnError extends boolean = false>(options: Options<DeleteUserData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteUserResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/users/{id}',
            ...options
        });
    }
    
    /**
     * Get a user by id
     */
    public static getUser<ThrowOnError extends boolean = false>(options: Options<GetUserData, ThrowOnError>) {
        return (options.client ?? client).get<GetUserResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/users/{id}',
            ...options
        });
    }
    
    /**
     * Create or update a user
     */
    public static upsertUser<ThrowOnError extends boolean = false>(options: Options<UpsertUserData, ThrowOnError>) {
        return (options.client ?? client).put<UpsertUserResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/users/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get the permissions this user has over workflows and tasks
     */
    public static checkPermissions<ThrowOnError extends boolean = false>(options: Options<CheckPermissionsData, ThrowOnError>) {
        return (options.client ?? client).get<CheckPermissionsResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/users/{userId}/checkPermissions',
            ...options
        });
    }
    
    /**
     * Get the permissions this user has over workflows and tasks
     */
    public static getGrantedPermissions<ThrowOnError extends boolean = false>(options: Options<GetGrantedPermissionsData, ThrowOnError>) {
        return (options.client ?? client).get<GetGrantedPermissionsResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/users/{userId}/permissions',
            ...options
        });
    }
}

export class VersionResource {
    /**
     * Get the server's version
     */
    public static getVersion<ThrowOnError extends boolean = false>(options?: Options<GetVersionData, ThrowOnError>) {
        return (options?.client ?? client).get<GetVersionResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/version',
            ...options
        });
    }
}

export class WorkflowResource {
    /**
     * Start a new workflow with StartWorkflowRequest, which allows task to be executed in a domain
     */
    public static startWorkflow<ThrowOnError extends boolean = false>(options: Options<StartWorkflowData, ThrowOnError>) {
        return (options.client ?? client).post<StartWorkflowResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/workflow',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Lists workflows for the given correlation id list and workflow name list
     */
    public static getWorkflows1<ThrowOnError extends boolean = false>(options: Options<GetWorkflows1Data, ThrowOnError>) {
        return (options.client ?? client).post<GetWorkflows1Responses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/workflow/correlated/batch',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Starts the decision task for a workflow
     */
    public static decide<ThrowOnError extends boolean = false>(options: Options<DecideData, ThrowOnError>) {
        return (options.client ?? client).put<DecideResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/workflow/decide/{workflowId}',
            ...options
        });
    }
    
    /**
     * Execute a workflow synchronously with input and outputs using get api
     *
     * @deprecated
     */
    public static executeWorkflowAsGetApi<ThrowOnError extends boolean = false>(options: Options<ExecuteWorkflowAsGetApiData, ThrowOnError>) {
        return (options.client ?? client).get<ExecuteWorkflowAsGetApiResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/workflow/execute/{name}',
            ...options
        });
    }
    
    /**
     * Execute a workflow synchronously with input and outputs
     *
     * @deprecated
     */
    public static executeWorkflowAsApi<ThrowOnError extends boolean = false>(options: Options<ExecuteWorkflowAsApiData, ThrowOnError>) {
        return (options.client ?? client).post<ExecuteWorkflowAsApiResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/workflow/execute/{name}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Execute a workflow synchronously
     */
    public static executeWorkflow<ThrowOnError extends boolean = false>(options: Options<ExecuteWorkflowData, ThrowOnError>) {
        return (options.client ?? client).post<ExecuteWorkflowResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/workflow/execute/{name}/{version}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Retrieve all the running workflows
     */
    public static getRunningWorkflow<ThrowOnError extends boolean = false>(options: Options<GetRunningWorkflowData, ThrowOnError>) {
        return (options.client ?? client).get<GetRunningWorkflowResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/workflow/running/{name}',
            ...options
        });
    }
    
    /**
     * Search for workflow executions based on payload and other parameters
     *
     * Search for workflow executions based on payload and other parameters.
     * The query parameter accepts exact matches using `=` and `IN` on the following fields: `workflowId`, `correlationId`, `taskId`, `workflowType`, `taskType`, and `status`.
     * Matches using `=` can be written as `taskType = HTTP`.
     * Matches using `IN` are written as `status IN (SCHEDULED, IN_PROGRESS)`.
     * The 'startTime' and 'modifiedTime' field uses unix timestamps and accepts queries using `<` and `>`, for example `startTime < 1696143600000`.
     * Queries can be combined using `AND`, for example `taskType = HTTP AND status = SCHEDULED`.
     *
     */
    public static search1<ThrowOnError extends boolean = false>(options?: Options<Search1Data, ThrowOnError>) {
        return (options?.client ?? client).get<Search1Responses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/workflow/search',
            ...options
        });
    }
    
    /**
     * Start a new workflow asynchronously. Returns the ID of the workflow instance that can be later used for tracking
     */
    public static startWorkflowAsync<ThrowOnError extends boolean = false>(options: Options<StartWorkflowAsyncData, ThrowOnError>) {
        return (options.client ?? client).post<StartWorkflowAsyncResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/workflow/start/{name}/{version}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Test workflow execution using mock data
     */
    public static testWorkflow<ThrowOnError extends boolean = false>(options: Options<TestWorkflowData, ThrowOnError>) {
        return (options.client ?? client).post<TestWorkflowResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/workflow/test',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Start a new workflow. Returns the ID of the workflow instance that can be later used for tracking
     */
    public static startWorkflow1<ThrowOnError extends boolean = false>(options: Options<StartWorkflow1Data, ThrowOnError>) {
        return (options.client ?? client).post<StartWorkflow1Responses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/workflow/{name}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Lists workflows for the given correlation id list
     */
    public static getWorkflows<ThrowOnError extends boolean = false>(options: Options<GetWorkflowsData, ThrowOnError>) {
        return (options.client ?? client).post<GetWorkflowsResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/workflow/{name}/correlated',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Lists workflows for the given correlation id
     */
    public static getWorkflows2<ThrowOnError extends boolean = false>(options: Options<GetWorkflows2Data, ThrowOnError>) {
        return (options.client ?? client).get<GetWorkflows2Responses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/workflow/{name}/correlated/{correlationId}',
            ...options
        });
    }
    
    /**
     * Terminate workflow execution
     */
    public static terminate1<ThrowOnError extends boolean = false>(options: Options<Terminate1Data, ThrowOnError>) {
        return (options.client ?? client).delete<Terminate1Responses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/workflow/{workflowId}',
            ...options
        });
    }
    
    /**
     * Gets the workflow by workflow (execution) id
     */
    public static getExecutionStatus<ThrowOnError extends boolean = false>(options: Options<GetExecutionStatusData, ThrowOnError>) {
        return (options.client ?? client).get<GetExecutionStatusResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/workflow/{workflowId}',
            ...options
        });
    }
    
    /**
     * Jump workflow execution to given task
     *
     * Jump workflow execution to given task.
     */
    public static jumpToTask<ThrowOnError extends boolean = false>(options: Options<JumpToTaskData, ThrowOnError>) {
        return (options.client ?? client).post<JumpToTaskResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/workflow/{workflowId}/jump/{taskReferenceName}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Pauses the workflow
     */
    public static pauseWorkflow<ThrowOnError extends boolean = false>(options: Options<PauseWorkflowData, ThrowOnError>) {
        return (options.client ?? client).put<PauseWorkflowResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/workflow/{workflowId}/pause',
            ...options
        });
    }
    
    /**
     * Removes the workflow from the system
     */
    public static delete1<ThrowOnError extends boolean = false>(options: Options<Delete1Data, ThrowOnError>) {
        return (options.client ?? client).delete<Delete1Responses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/workflow/{workflowId}/remove',
            ...options
        });
    }
    
    /**
     * Reruns the workflow from a specific task
     */
    public static rerun<ThrowOnError extends boolean = false>(options: Options<RerunData, ThrowOnError>) {
        return (options.client ?? client).post<RerunResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/workflow/{workflowId}/rerun',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Resets callback times of all non-terminal SIMPLE tasks to 0
     */
    public static resetWorkflow<ThrowOnError extends boolean = false>(options: Options<ResetWorkflowData, ThrowOnError>) {
        return (options.client ?? client).post<ResetWorkflowResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/workflow/{workflowId}/resetcallbacks',
            ...options
        });
    }
    
    /**
     * Restarts a completed workflow
     */
    public static restart<ThrowOnError extends boolean = false>(options: Options<RestartData, ThrowOnError>) {
        return (options.client ?? client).post<RestartResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/workflow/{workflowId}/restart',
            ...options
        });
    }
    
    /**
     * Resumes the workflow
     */
    public static resumeWorkflow<ThrowOnError extends boolean = false>(options: Options<ResumeWorkflowData, ThrowOnError>) {
        return (options.client ?? client).put<ResumeWorkflowResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/workflow/{workflowId}/resume',
            ...options
        });
    }
    
    /**
     * Retries the last failed task
     */
    public static retry<ThrowOnError extends boolean = false>(options: Options<RetryData, ThrowOnError>) {
        return (options.client ?? client).post<RetryResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/workflow/{workflowId}/retry',
            ...options
        });
    }
    
    /**
     * Skips a given task from a current running workflow
     */
    public static skipTaskFromWorkflow<ThrowOnError extends boolean = false>(options: Options<SkipTaskFromWorkflowData, ThrowOnError>) {
        return (options.client ?? client).put<SkipTaskFromWorkflowResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/workflow/{workflowId}/skiptask/{taskReferenceName}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Update a workflow state by updating variables or in progress task
     *
     * Updates the workflow variables, tasks and triggers evaluation.
     */
    public static updateWorkflowAndTaskState<ThrowOnError extends boolean = false>(options: Options<UpdateWorkflowAndTaskStateData, ThrowOnError>) {
        return (options.client ?? client).post<UpdateWorkflowAndTaskStateResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/workflow/{workflowId}/state',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Gets the workflow by workflow (execution) id
     */
    public static getWorkflowStatusSummary<ThrowOnError extends boolean = false>(options: Options<GetWorkflowStatusSummaryData, ThrowOnError>) {
        return (options.client ?? client).get<GetWorkflowStatusSummaryResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/workflow/{workflowId}/status',
            ...options
        });
    }
    
    /**
     * Gets the workflow tasks by workflow (execution) id
     */
    public static getExecutionStatusTaskList<ThrowOnError extends boolean = false>(options: Options<GetExecutionStatusTaskListData, ThrowOnError>) {
        return (options.client ?? client).get<GetExecutionStatusTaskListResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/workflow/{workflowId}/tasks',
            ...options
        });
    }
    
    /**
     * Upgrade running workflow to newer version
     *
     * Upgrade running workflow to newer version
     */
    public static upgradeRunningWorkflowToVersion<ThrowOnError extends boolean = false>(options: Options<UpgradeRunningWorkflowToVersionData, ThrowOnError>) {
        return (options.client ?? client).post<UpgradeRunningWorkflowToVersionResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/workflow/{workflowId}/upgrade',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Update workflow variables
     *
     * Updates the workflow variables and triggers evaluation.
     */
    public static updateWorkflowState<ThrowOnError extends boolean = false>(options: Options<UpdateWorkflowStateData, ThrowOnError>) {
        return (options.client ?? client).post<UpdateWorkflowStateResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/workflow/{workflowId}/variables',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class WorkflowBulkResource {
    /**
     * Permanently remove workflows from the system
     */
    public static delete<ThrowOnError extends boolean = false>(options: Options<DeleteData, ThrowOnError>) {
        return (options.client ?? client).post<DeleteResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/workflow/bulk/delete',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Pause the list of workflows
     */
    public static pauseWorkflow1<ThrowOnError extends boolean = false>(options: Options<PauseWorkflow1Data, ThrowOnError>) {
        return (options.client ?? client).put<PauseWorkflow1Responses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/workflow/bulk/pause',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Restart the list of completed workflow
     */
    public static restart1<ThrowOnError extends boolean = false>(options: Options<Restart1Data, ThrowOnError>) {
        return (options.client ?? client).post<Restart1Responses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/workflow/bulk/restart',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Resume the list of workflows
     */
    public static resumeWorkflow1<ThrowOnError extends boolean = false>(options: Options<ResumeWorkflow1Data, ThrowOnError>) {
        return (options.client ?? client).put<ResumeWorkflow1Responses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/workflow/bulk/resume',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Retry the last failed task for each workflow from the list
     */
    public static retry1<ThrowOnError extends boolean = false>(options: Options<Retry1Data, ThrowOnError>) {
        return (options.client ?? client).post<Retry1Responses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/workflow/bulk/retry',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Terminate workflows execution
     */
    public static terminate<ThrowOnError extends boolean = false>(options: Options<TerminateData, ThrowOnError>) {
        return (options.client ?? client).post<TerminateResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/api/workflow/bulk/terminate',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class ContextController {
    public static get<ThrowOnError extends boolean = false>(options?: Options<GetData, ThrowOnError>) {
        return (options?.client ?? client).get<GetResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/context.js',
            ...options
        });
    }
}

export class HealthCheckResource {
    public static doCheck<ThrowOnError extends boolean = false>(options?: Options<DoCheckData, ThrowOnError>) {
        return (options?.client ?? client).get<DoCheckResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/health',
            ...options
        });
    }
}

export class IncomingWebhookResource {
    public static handleWebhook1<ThrowOnError extends boolean = false>(options: Options<HandleWebhook1Data, ThrowOnError>) {
        return (options.client ?? client).get<HandleWebhook1Responses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/webhook/{id}',
            ...options
        });
    }
    
    public static handleWebhook<ThrowOnError extends boolean = false>(options: Options<HandleWebhookData, ThrowOnError>) {
        return (options.client ?? client).post<HandleWebhookResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'X-Authorization',
                    type: 'apiKey'
                }
            ],
            url: '/webhook/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}
